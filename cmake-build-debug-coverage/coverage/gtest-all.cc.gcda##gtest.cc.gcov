        -:    0:Source:C:/Users/osama/Desktop/Folders/University/TUK/Courses/VDS/Project/VDSProject/src/test/Google_tests/lib/googletest/src/gtest.cc
        -:    0:Graph:C:\Users\osama\Desktop\Folders\University\TUK\Courses\VDS\Project\VDSProject\cmake-build-debug-coverage\src\test\Google_tests\lib\googletest\CMakeFiles\gtest.dir\src\gtest-all.cc.gcno
        -:    0:Data:C:\Users\osama\Desktop\Folders\University\TUK\Courses\VDS\Project\VDSProject\cmake-build-debug-coverage\src\test\Google_tests\lib\googletest\CMakeFiles\gtest.dir\src\gtest-all.cc.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// Copyright 2005, Google Inc.
        -:    2:// All rights reserved.
        -:    3://
        -:    4:// Redistribution and use in source and binary forms, with or without
        -:    5:// modification, are permitted provided that the following conditions are
        -:    6:// met:
        -:    7://
        -:    8://     * Redistributions of source code must retain the above copyright
        -:    9:// notice, this list of conditions and the following disclaimer.
        -:   10://     * Redistributions in binary form must reproduce the above
        -:   11:// copyright notice, this list of conditions and the following disclaimer
        -:   12:// in the documentation and/or other materials provided with the
        -:   13:// distribution.
        -:   14://     * Neither the name of Google Inc. nor the names of its
        -:   15:// contributors may be used to endorse or promote products derived from
        -:   16:// this software without specific prior written permission.
        -:   17://
        -:   18:// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
        -:   19:// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
        -:   20:// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
        -:   21:// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
        -:   22:// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
        -:   23:// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
        -:   24:// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
        -:   25:// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
        -:   26:// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
        -:   27:// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
        -:   28:// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        -:   29:
        -:   30://
        -:   31:// The Google C++ Testing and Mocking Framework (Google Test)
        -:   32:
        -:   33:#include "gtest/gtest.h"
        -:   34:#include "gtest/internal/custom/gtest.h"
        -:   35:#include "gtest/gtest-spi.h"
        -:   36:
        -:   37:#include <ctype.h>
        -:   38:#include <stdarg.h>
        -:   39:#include <stdio.h>
        -:   40:#include <stdlib.h>
        -:   41:#include <time.h>
        -:   42:#include <wchar.h>
        -:   43:#include <wctype.h>
        -:   44:
        -:   45:#include <algorithm>
        -:   46:#include <chrono>  // NOLINT
        -:   47:#include <cmath>
        -:   48:#include <cstdint>
        -:   49:#include <iomanip>
        -:   50:#include <limits>
        -:   51:#include <list>
        -:   52:#include <map>
        -:   53:#include <ostream>  // NOLINT
        -:   54:#include <sstream>
        -:   55:#include <vector>
        -:   56:
        -:   57:#if GTEST_OS_LINUX
        -:   58:
        -:   59:# include <fcntl.h>  // NOLINT
        -:   60:# include <limits.h>  // NOLINT
        -:   61:# include <sched.h>  // NOLINT
        -:   62:// Declares vsnprintf().  This header is not available on Windows.
        -:   63:# include <strings.h>  // NOLINT
        -:   64:# include <sys/mman.h>  // NOLINT
        -:   65:# include <sys/time.h>  // NOLINT
        -:   66:# include <unistd.h>  // NOLINT
        -:   67:# include <string>
        -:   68:
        -:   69:#elif GTEST_OS_ZOS
        -:   70:# include <sys/time.h>  // NOLINT
        -:   71:
        -:   72:// On z/OS we additionally need strings.h for strcasecmp.
        -:   73:# include <strings.h>  // NOLINT
        -:   74:
        -:   75:#elif GTEST_OS_WINDOWS_MOBILE  // We are on Windows CE.
        -:   76:
        -:   77:# include <windows.h>  // NOLINT
        -:   78:# undef min
        -:   79:
        -:   80:#elif GTEST_OS_WINDOWS  // We are on Windows proper.
        -:   81:
        -:   82:# include <windows.h>  // NOLINT
        -:   83:# undef min
        -:   84:
        -:   85:#ifdef _MSC_VER
        -:   86:# include <crtdbg.h>  // NOLINT
        -:   87:#endif
        -:   88:
        -:   89:# include <io.h>  // NOLINT
        -:   90:# include <sys/timeb.h>  // NOLINT
        -:   91:# include <sys/types.h>  // NOLINT
        -:   92:# include <sys/stat.h>  // NOLINT
        -:   93:
        -:   94:# if GTEST_OS_WINDOWS_MINGW
        -:   95:#  include <sys/time.h>  // NOLINT
        -:   96:# endif  // GTEST_OS_WINDOWS_MINGW
        -:   97:
        -:   98:#else
        -:   99:
        -:  100:// cpplint thinks that the header is already included, so we want to
        -:  101:// silence it.
        -:  102:# include <sys/time.h>  // NOLINT
        -:  103:# include <unistd.h>  // NOLINT
        -:  104:
        -:  105:#endif  // GTEST_OS_LINUX
        -:  106:
        -:  107:#if GTEST_HAS_EXCEPTIONS
        -:  108:# include <stdexcept>
        -:  109:#endif
        -:  110:
        -:  111:#if GTEST_CAN_STREAM_RESULTS_
        -:  112:# include <arpa/inet.h>  // NOLINT
        -:  113:# include <netdb.h>  // NOLINT
        -:  114:# include <sys/socket.h>  // NOLINT
        -:  115:# include <sys/types.h>  // NOLINT
        -:  116:#endif
        -:  117:
        -:  118:#include "src/gtest-internal-inl.h"
        -:  119:
        -:  120:#if GTEST_OS_WINDOWS
        -:  121:# define vsnprintf _vsnprintf
        -:  122:#endif  // GTEST_OS_WINDOWS
        -:  123:
        -:  124:#if GTEST_OS_MAC
        -:  125:#ifndef GTEST_OS_IOS
        -:  126:#include <crt_externs.h>
        -:  127:#endif
        -:  128:#endif
        -:  129:
        -:  130:#if GTEST_HAS_ABSL
        -:  131:#include "absl/debugging/failure_signal_handler.h"
        -:  132:#include "absl/debugging/stacktrace.h"
        -:  133:#include "absl/debugging/symbolize.h"
        -:  134:#include "absl/strings/str_cat.h"
        -:  135:#endif  // GTEST_HAS_ABSL
        -:  136:
        -:  137:namespace testing {
        -:  138:
        -:  139:using internal::CountIf;
        -:  140:using internal::ForEach;
        -:  141:using internal::GetElementOr;
        -:  142:using internal::Shuffle;
        -:  143:
        -:  144:// Constants.
        -:  145:
        -:  146:// A test whose test suite name or test name matches this filter is
        -:  147:// disabled and not run.
        -:  148:static const char kDisableTestFilter[] = "DISABLED_*:*/DISABLED_*";
        -:  149:
        -:  150:// A test suite whose name matches this filter is considered a death
        -:  151:// test suite and will be run before test suites whose name doesn't
        -:  152:// match this filter.
        -:  153:static const char kDeathTestSuiteFilter[] = "*DeathTest:*DeathTest/*";
        -:  154:
        -:  155:// A test filter that matches everything.
        -:  156:static const char kUniversalFilter[] = "*";
        -:  157:
        -:  158:// The default output format.
        -:  159:static const char kDefaultOutputFormat[] = "xml";
        -:  160:// The default output file.
        -:  161:static const char kDefaultOutputFile[] = "test_detail";
        -:  162:
        -:  163:// The environment variable name for the test shard index.
        -:  164:static const char kTestShardIndex[] = "GTEST_SHARD_INDEX";
        -:  165:// The environment variable name for the total number of test shards.
        -:  166:static const char kTestTotalShards[] = "GTEST_TOTAL_SHARDS";
        -:  167:// The environment variable name for the test shard status file.
        -:  168:static const char kTestShardStatusFile[] = "GTEST_SHARD_STATUS_FILE";
        -:  169:
        -:  170:namespace internal {
        -:  171:
        -:  172:// The text used in failure messages to indicate the start of the
        -:  173:// stack trace.
        -:  174:const char kStackTraceMarker[] = "\nStack trace:\n";
        -:  175:
        -:  176:// g_help_flag is true if and only if the --help flag or an equivalent form
        -:  177:// is specified on the command line.
        -:  178:bool g_help_flag = false;
        -:  179:
        -:  180:// Utility function to Open File for Writing
function _ZN7testing8internalL18OpenFileForWritingERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  181:static FILE* OpenFileForWriting(const std::string& output_file) {
    #####:  182:  FILE* fileout = nullptr;
    #####:  183:  FilePath output_file_path(output_file);
    %%%%%:  183-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$:  183-block  1
call    4 never executed
    #####:  184:  FilePath output_dir(output_file_path.RemoveFileName());
    %%%%%:  184-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:  184-block  1
call    3 never executed
        -:  185:
    #####:  186:  if (output_dir.CreateDirectoriesRecursively()) {
    %%%%%:  186-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  186-block  1
branch  3 never executed
branch  4 never executed
    #####:  187:    fileout = posix::FOpen(output_file.c_str(), "w");
    %%%%%:  187-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  187-block  1
        -:  188:  }
    #####:  189:  if (fileout == nullptr) {
    %%%%%:  189-block  0
branch  0 never executed
branch  1 never executed
    #####:  190:    GTEST_LOG_(FATAL) << "Unable to open file \"" << output_file << "\"";
    %%%%%:  190-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  190-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  190-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:  190-block  3
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:  190-block  4
call   13 never executed
    $$$$$:  190-block  5
call   14 never executed
    $$$$$:  190-block  6
        -:  191:  }
    #####:  192:  return fileout;
    %%%%%:  192-block  0
call    0 never executed
    %%%%%:  192-block  1
        -:  193:}
        -:  194:
        -:  195:}  // namespace internal
        -:  196:
        -:  197:// Bazel passes in the argument to '--test_filter' via the TESTBRIDGE_TEST_ONLY
        -:  198:// environment variable.
function _ZN7testingL16GetDefaultFilterEv called 1 returned 100% blocks executed 80%
        1:  199:static const char* GetDefaultFilter() {
        -:  200:  const char* const testbridge_test_only =
        1:  201:      internal::posix::GetEnv("TESTBRIDGE_TEST_ONLY");
        1:  201-block  0
call    0 returned 1
        1:  202:  if (testbridge_test_only != nullptr) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  203:    return testbridge_test_only;
    %%%%%:  203-block  0
        -:  204:  }
        1:  205:  return kUniversalFilter;
        1:  205-block  0
        -:  206:}
        -:  207:
        -:  208:// Bazel passes in the argument to '--test_runner_fail_fast' via the
        -:  209:// TESTBRIDGE_TEST_RUNNER_FAIL_FAST environment variable.
function _ZN7testingL18GetDefaultFailFastEv called 1 returned 100% blocks executed 80%
        1:  210:static bool GetDefaultFailFast() {
        -:  211:  const char* const testbridge_test_runner_fail_fast =
        1:  212:      internal::posix::GetEnv("TESTBRIDGE_TEST_RUNNER_FAIL_FAST");
        1:  212-block  0
call    0 returned 1
        1:  213:  if (testbridge_test_runner_fail_fast != nullptr) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  214:    return strcmp(testbridge_test_runner_fail_fast, "1") == 0;
    %%%%%:  214-block  0
        -:  215:  }
        1:  216:  return false;
        1:  216-block  0
        -:  217:}
        -:  218:
        -:  219:}  // namespace testing
        -:  220:
        -:  221:GTEST_DEFINE_bool_(
        -:  222:    fail_fast,
        -:  223:    testing::internal::BoolFromGTestEnv("fail_fast",
        -:  224:                                        testing::GetDefaultFailFast()),
        -:  225:    "True if and only if a test failure should stop further test execution.");
        -:  226:
        -:  227:GTEST_DEFINE_bool_(
        -:  228:    also_run_disabled_tests,
        -:  229:    testing::internal::BoolFromGTestEnv("also_run_disabled_tests", false),
        -:  230:    "Run disabled tests too, in addition to the tests normally being run.");
        -:  231:
        -:  232:GTEST_DEFINE_bool_(
        -:  233:    break_on_failure,
        -:  234:    testing::internal::BoolFromGTestEnv("break_on_failure", false),
        -:  235:    "True if and only if a failed assertion should be a debugger "
        -:  236:    "break-point.");
        -:  237:
        -:  238:GTEST_DEFINE_bool_(catch_exceptions,
        -:  239:                   testing::internal::BoolFromGTestEnv("catch_exceptions",
        -:  240:                                                       true),
        -:  241:                   "True if and only if " GTEST_NAME_
        -:  242:                   " should catch exceptions and treat them as test failures.");
        -:  243:
        -:  244:GTEST_DEFINE_string_(
        -:  245:    color, testing::internal::StringFromGTestEnv("color", "auto"),
        -:  246:    "Whether to use colors in the output.  Valid values: yes, no, "
        -:  247:    "and auto.  'auto' means to use colors if the output is "
        -:  248:    "being sent to a terminal and the TERM environment variable "
        -:  249:    "is set to a terminal type that supports colors.");
        -:  250:
        -:  251:GTEST_DEFINE_string_(
        -:  252:    filter,
        -:  253:    testing::internal::StringFromGTestEnv("filter",
        -:  254:                                          testing::GetDefaultFilter()),
        -:  255:    "A colon-separated list of glob (not regex) patterns "
        -:  256:    "for filtering the tests to run, optionally followed by a "
        -:  257:    "'-' and a : separated list of negative patterns (tests to "
        -:  258:    "exclude).  A test is run if it matches one of the positive "
        -:  259:    "patterns and does not match any of the negative patterns.");
        -:  260:
        -:  261:GTEST_DEFINE_bool_(
        -:  262:    install_failure_signal_handler,
        -:  263:    testing::internal::BoolFromGTestEnv("install_failure_signal_handler",
        -:  264:                                        false),
        -:  265:    "If true and supported on the current platform, " GTEST_NAME_
        -:  266:    " should "
        -:  267:    "install a signal handler that dumps debugging information when fatal "
        -:  268:    "signals are raised.");
        -:  269:
        -:  270:GTEST_DEFINE_bool_(list_tests, false,
        -:  271:                   "List all tests without running them.");
        -:  272:
        -:  273:// The net priority order after flag processing is thus:
        -:  274://   --gtest_output command line flag
        -:  275://   GTEST_OUTPUT environment variable
        -:  276://   XML_OUTPUT_FILE environment variable
        -:  277://   ''
        -:  278:GTEST_DEFINE_string_(
        -:  279:    output,
        -:  280:    testing::internal::StringFromGTestEnv(
        -:  281:        "output", testing::internal::OutputFlagAlsoCheckEnvVar().c_str()),
        -:  282:    "A format (defaults to \"xml\" but can be specified to be \"json\"), "
        -:  283:    "optionally followed by a colon and an output file name or directory. "
        -:  284:    "A directory is indicated by a trailing pathname separator. "
        -:  285:    "Examples: \"xml:filename.xml\", \"xml::directoryname/\". "
        -:  286:    "If a directory is specified, output files will be created "
        -:  287:    "within that directory, with file-names based on the test "
        -:  288:    "executable's name and, if necessary, made unique by adding "
        -:  289:    "digits.");
        -:  290:
        -:  291:GTEST_DEFINE_bool_(
        -:  292:    brief, testing::internal::BoolFromGTestEnv("brief", false),
        -:  293:    "True if only test failures should be displayed in text output.");
        -:  294:
        -:  295:GTEST_DEFINE_bool_(print_time,
        -:  296:                   testing::internal::BoolFromGTestEnv("print_time", true),
        -:  297:                   "True if and only if " GTEST_NAME_
        -:  298:                   " should display elapsed time in text output.");
        -:  299:
        -:  300:GTEST_DEFINE_bool_(print_utf8,
        -:  301:                   testing::internal::BoolFromGTestEnv("print_utf8", true),
        -:  302:                   "True if and only if " GTEST_NAME_
        -:  303:                   " prints UTF8 characters as text.");
        -:  304:
        -:  305:GTEST_DEFINE_int32_(
        -:  306:    random_seed, testing::internal::Int32FromGTestEnv("random_seed", 0),
        -:  307:    "Random number seed to use when shuffling test orders.  Must be in range "
        -:  308:    "[1, 99999], or 0 to use a seed based on the current time.");
        -:  309:
        -:  310:GTEST_DEFINE_int32_(
        -:  311:    repeat, testing::internal::Int32FromGTestEnv("repeat", 1),
        -:  312:    "How many times to repeat each test.  Specify a negative number "
        -:  313:    "for repeating forever.  Useful for shaking out flaky tests.");
        -:  314:
        -:  315:GTEST_DEFINE_bool_(
        -:  316:    recreate_environments_when_repeating,
        -:  317:    testing::internal::BoolFromGTestEnv("recreate_environments_when_repeating",
        -:  318:                                        true),
        -:  319:    "Controls whether global test environments are recreated for each repeat "
        -:  320:    "of the tests. If set to false the global test environments are only set "
        -:  321:    "up once, for the first iteration, and only torn down once, for the last. "
        -:  322:    "Useful for shaking out flaky tests with stable, expensive test "
        -:  323:    "environments. If --gtest_repeat is set to a negative number, meaning "
        -:  324:    "there is no last run, the environments will always be recreated to avoid "
        -:  325:    "leaks.");
        -:  326:
        -:  327:GTEST_DEFINE_bool_(show_internal_stack_frames, false,
        -:  328:                   "True if and only if " GTEST_NAME_
        -:  329:                   " should include internal stack frames when "
        -:  330:                   "printing test failure stack traces.");
        -:  331:
        -:  332:GTEST_DEFINE_bool_(shuffle,
        -:  333:                   testing::internal::BoolFromGTestEnv("shuffle", false),
        -:  334:                   "True if and only if " GTEST_NAME_
        -:  335:                   " should randomize tests' order on every run.");
        -:  336:
        -:  337:GTEST_DEFINE_int32_(
        -:  338:    stack_trace_depth,
        -:  339:    testing::internal::Int32FromGTestEnv("stack_trace_depth",
        -:  340:                                         testing::kMaxStackTraceDepth),
        -:  341:    "The maximum number of stack frames to print when an "
        -:  342:    "assertion fails.  The valid range is 0 through 100, inclusive.");
        -:  343:
        -:  344:GTEST_DEFINE_string_(
        -:  345:    stream_result_to,
        -:  346:    testing::internal::StringFromGTestEnv("stream_result_to", ""),
        -:  347:    "This flag specifies the host name and the port number on which to stream "
        -:  348:    "test results. Example: \"localhost:555\". The flag is effective only on "
        -:  349:    "Linux.");
        -:  350:
        -:  351:GTEST_DEFINE_bool_(
        -:  352:    throw_on_failure,
        -:  353:    testing::internal::BoolFromGTestEnv("throw_on_failure", false),
        -:  354:    "When this flag is specified, a failed assertion will throw an exception "
        -:  355:    "if exceptions are enabled or exit the program with a non-zero code "
        -:  356:    "otherwise. For use with an external test framework.");
        -:  357:
        -:  358:#if GTEST_USE_OWN_FLAGFILE_FLAG_
        -:  359:GTEST_DEFINE_string_(
        -:  360:    flagfile, testing::internal::StringFromGTestEnv("flagfile", ""),
        -:  361:    "This flag specifies the flagfile to read command-line flags from.");
        -:  362:#endif  // GTEST_USE_OWN_FLAGFILE_FLAG_
        -:  363:
        -:  364:namespace testing {
        -:  365:namespace internal {
        -:  366:
        -:  367:// Generates a random number from [0, range), using a Linear
        -:  368:// Congruential Generator (LCG).  Crashes if 'range' is 0 or greater
        -:  369:// than kMaxRange.
function _ZN7testing8internal6Random8GenerateEj called 0 returned 0% blocks executed 0%
    #####:  370:uint32_t Random::Generate(uint32_t range) {
        -:  371:  // These constants are the same as are used in glibc's rand(3).
        -:  372:  // Use wider types than necessary to prevent unsigned overflow diagnostics.
    #####:  373:  state_ = static_cast<uint32_t>(1103515245ULL*state_ + 12345U) % kMaxRange;
        -:  374:
    #####:  375:  GTEST_CHECK_(range > 0)
    %%%%%:  375-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  375-block  1
call    3 never executed
call    4 never executed
    %%%%%:  375-block  2
call    5 never executed
    $$$$$:  375-block  3
call    6 never executed
    $$$$$:  375-block  4
call    7 never executed
    #####:  376:      << "Cannot generate a number in the range [0, 0).";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  376-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  377:  GTEST_CHECK_(range <= kMaxRange)
    %%%%%:  377-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  377-block  1
call    3 never executed
call    4 never executed
    %%%%%:  377-block  2
call    5 never executed
    $$$$$:  377-block  3
call    6 never executed
    #####:  378:      << "Generation of a number in [0, " << range << ") was requested, "
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  378-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  378-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####:  379:      << "but this can only generate numbers in [0, " << kMaxRange << ").";
    %%%%%:  379-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  379-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  379-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:  379-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
        -:  380:
        -:  381:  // Converting via modulus introduces a bit of downward bias, but
        -:  382:  // it's simple, and a linear congruential generator isn't too good
        -:  383:  // to begin with.
    #####:  384:  return state_ % range;
    %%%%%:  384-block  0
    %%%%%:  384-block  1
        -:  385:}
        -:  386:
        -:  387:// GTestIsInitialized() returns true if and only if the user has initialized
        -:  388:// Google Test.  Useful for catching the user mistake of not initializing
        -:  389:// Google Test before calling RUN_ALL_TESTS().
function _ZN7testing8internalL18GTestIsInitializedEv called 2 returned 100% blocks executed 100%
        2:  390:static bool GTestIsInitialized() { return GetArgvs().size() > 0; }
        2:  390-block  0
call    0 returned 2
call    1 returned 2
call    2 returned 2
        -:  391:
        -:  392:// Iterates over a vector of TestSuites, keeping a running sum of the
        -:  393:// results of calling a given int-returning method on each.
        -:  394:// Returns the sum.
function _ZN7testing8internalL20SumOverTestSuiteListERKSt6vectorIPNS_9TestSuiteESaIS3_EEMS2_KFivE called 5 returned 100% blocks executed 91%
        5:  395:static int SumOverTestSuiteList(const std::vector<TestSuite*>& case_list,
        -:  396:                                int (TestSuite::*method)() const) {
        5:  397:  int sum = 0;
      120:  398:  for (size_t i = 0; i < case_list.size(); i++) {
        5:  398-block  0
      120:  398-block  1
call    0 returned 120
branch  1 taken 115 (fallthrough)
branch  2 taken 5
     115*:  399:    sum += (case_list[i]->*method)();
      115:  399-block  0
call    0 returned 115
branch  1 taken 0 (fallthrough)
branch  2 taken 115
    %%%%%:  399-block  1
      115:  399-block  2
      115:  399-block  3
call    3 returned 115
        -:  400:  }
        5:  401:  return sum;
        5:  401-block  0
        -:  402:}
        -:  403:
        -:  404:// Returns true if and only if the test suite passed.
function _ZN7testing8internalL15TestSuitePassedEPKNS_9TestSuiteE called 0 returned 0% blocks executed 0%
    #####:  405:static bool TestSuitePassed(const TestSuite* test_suite) {
    #####:  406:  return test_suite->should_run() && test_suite->Passed();
    %%%%%:  406-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  406-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  406-block  2
    %%%%%:  406-block  3
    %%%%%:  406-block  4
        -:  407:}
        -:  408:
        -:  409:// Returns true if and only if the test suite failed.
function _ZN7testing8internalL15TestSuiteFailedEPKNS_9TestSuiteE called 46 returned 100% blocks executed 88%
       46:  410:static bool TestSuiteFailed(const TestSuite* test_suite) {
      46*:  411:  return test_suite->should_run() && test_suite->Failed();
       46:  411-block  0
call    0 returned 46
branch  1 taken 46 (fallthrough)
branch  2 taken 0
       46:  411-block  1
call    3 returned 46
branch  4 taken 0 (fallthrough)
branch  5 taken 46
    %%%%%:  411-block  2
       46:  411-block  3
       46:  411-block  4
        -:  412:}
        -:  413:
        -:  414:// Returns true if and only if test_suite contains at least one test that
        -:  415:// should run.
function _ZN7testing8internalL18ShouldRunTestSuiteEPKNS_9TestSuiteE called 46 returned 100% blocks executed 100%
       46:  416:static bool ShouldRunTestSuite(const TestSuite* test_suite) {
       46:  417:  return test_suite->should_run();
       46:  417-block  0
call    0 returned 46
        -:  418:}
        -:  419:
        -:  420:// AssertHelper constructor.
function _ZN7testing8internal12AssertHelperC2ENS_14TestPartResult4TypeEPKciS5_ called 0 returned 0% blocks executed 0%
    #####:  421:AssertHelper::AssertHelper(TestPartResult::Type type,
        -:  422:                           const char* file,
        -:  423:                           int line,
    #####:  424:                           const char* message)
    #####:  425:    : data_(new AssertHelperData(type, file, line, message)) {
    %%%%%:  425-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$:  425-block  1
call    4 never executed
    #####:  426:}
    %%%%%:  426-block  0
        -:  427:
function _ZN7testing8internal12AssertHelperD2Ev called 0 returned 0% blocks executed 0%
    #####:  428:AssertHelper::~AssertHelper() {
    #####:  429:  delete data_;
    %%%%%:  429-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  429-block  1
call    2 never executed
call    3 never executed
    #####:  430:}
        -:  431:
        -:  432:// Message assignment, for assertion streaming support.
function _ZNK7testing8internal12AssertHelperaSERKNS_7MessageE called 0 returned 0% blocks executed 0%
    #####:  433:void AssertHelper::operator=(const Message& message) const {
        -:  434:  UnitTest::GetInstance()->
    #####:  435:    AddTestPartResult(data_->type, data_->file, data_->line,
    %%%%%:  435-block  0
call    0 never executed
    %%%%%:  435-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  436:                      AppendUserMessage(data_->message, message),
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  436-block  0
call    3 never executed
    $$$$$:  436-block  1
call    4 never executed
    $$$$$:  436-block  2
        -:  437:                      UnitTest::GetInstance()->impl()
    #####:  438:                      ->CurrentOsStackTraceExceptTop(1)
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    $$$$$:  438-block  0
call    4 never executed
        -:  439:                      // Skips the stack frame for this function itself.
        -:  440:                      );  // NOLINT
    #####:  441:}
        -:  442:
        -:  443:namespace {
        -:  444:
        -:  445:// When TEST_P is found without a matching INSTANTIATE_TEST_SUITE_P
        -:  446:// to creates test cases for it, a synthetic test case is
        -:  447:// inserted to report ether an error or a log message.
        -:  448://
        -:  449:// This configuration bit will likely be removed at some point.
        -:  450:constexpr bool kErrorOnUninstantiatedParameterizedTest = true;
        -:  451:constexpr bool kErrorOnUninstantiatedTypeParameterizedTest = true;
        -:  452:
        -:  453:// A test that fails at a given file/line location with a given message.
        -:  454:class FailureTest : public Test {
        -:  455: public:
function _ZN7testing8internal12_GLOBAL__N_111FailureTestC2ERKNS0_12CodeLocationENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb called 0 returned 0% blocks executed 0%
    #####:  456:  explicit FailureTest(const CodeLocation& loc, std::string error_message,
        -:  457:                       bool as_error)
    #####:  458:      : loc_(loc),
    #####:  459:        error_message_(std::move(error_message)),
    #####:  460:        as_error_(as_error) {}
    %%%%%:  460-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  460-block  1
call    4 never executed
call    5 never executed
    $$$$$:  460-block  2
call    6 never executed
        -:  461:
function _ZN7testing8internal12_GLOBAL__N_111FailureTest8TestBodyEv called 0 returned 0% blocks executed 0%
    #####:  462:  void TestBody() override {
    #####:  463:    if (as_error_) {
    %%%%%:  463-block  0
branch  0 never executed
branch  1 never executed
    #####:  464:      AssertHelper(TestPartResult::kNonFatalFailure, loc_.file.c_str(),
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  464-block  0
call    3 never executed
    $$$$$:  464-block  1
call    4 never executed
    $$$$$:  464-block  2
    #####:  465:                   loc_.line, "") = Message() << error_message_;
    %%%%%:  465-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  465-block  1
call    4 never executed
    %%%%%:  465-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
    $$$$$:  465-block  3
call    9 never executed
        -:  466:    } else {
    #####:  467:      std::cout << error_message_ << std::endl;
    %%%%%:  467-block  0
call    0 never executed
call    1 never executed
        -:  468:    }
    #####:  469:  }
    %%%%%:  469-block  0
        -:  470:
        -:  471: private:
        -:  472:  const CodeLocation loc_;
        -:  473:  const std::string error_message_;
        -:  474:  const bool as_error_;
        -:  475:};
        -:  476:
        -:  477:
        -:  478:}  // namespace
        -:  479:
function _ZN7testing8internal33GetIgnoredParameterizedTestSuitesB5cxx11Ev called 1 returned 100% blocks executed 100%
        1:  480:std::set<std::string>* GetIgnoredParameterizedTestSuites() {
        1:  481:  return UnitTest::GetInstance()->impl()->ignored_parameterized_test_suites();
        1:  481-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
        -:  482:}
        -:  483:
        -:  484:// Add a given test_suit to the list of them allow to go un-instantiated.
function _ZN7testing8internal13MarkAsIgnoredC2EPKc called 0 returned 0% blocks executed 0%
    #####:  485:MarkAsIgnored::MarkAsIgnored(const char* test_suite) {
    #####:  486:  GetIgnoredParameterizedTestSuites()->insert(test_suite);
    %%%%%:  486-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:  486-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:  486-block  2
call    8 never executed
call    9 never executed
    $$$$$:  486-block  3
call   10 never executed
    $$$$$:  486-block  4
    $$$$$:  486-block  5
call   11 never executed
    #####:  487:}
        -:  488:
        -:  489:// If this parameterized test suite has no instantiations (and that
        -:  490:// has not been marked as okay), emit a test case reporting that.
function _ZN7testing8internal23InsertSyntheticTestCaseERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS0_12CodeLocationEb called 0 returned 0% blocks executed 0%
    #####:  491:void InsertSyntheticTestCase(const std::string& name, CodeLocation location,
        -:  492:                             bool has_test_p) {
    #####:  493:  const auto& ignored = *GetIgnoredParameterizedTestSuites();
    %%%%%:  493-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  494:  if (ignored.find(name) != ignored.end()) return;
    %%%%%:  494-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  494-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  494-block  2
    $$$$$:  494-block  3
        -:  495:
    #####:  496:  const char kMissingInstantiation[] =  //
        -:  497:      " is defined via TEST_P, but never instantiated. None of the test cases "
        -:  498:      "will run. Either no INSTANTIATE_TEST_SUITE_P is provided or the only "
        -:  499:      "ones provided expand to nothing."
        -:  500:      "\n\n"
        -:  501:      "Ideally, TEST_P definitions should only ever be included as part of "
        -:  502:      "binaries that intend to use them. (As opposed to, for example, being "
        -:  503:      "placed in a library that may be linked in to get other utilities.)";
        -:  504:
    #####:  505:  const char kMissingTestCase[] =  //
        -:  506:      " is instantiated via INSTANTIATE_TEST_SUITE_P, but no tests are "
        -:  507:      "defined via TEST_P . No test cases will run."
        -:  508:      "\n\n"
        -:  509:      "Ideally, INSTANTIATE_TEST_SUITE_P should only ever be invoked from "
        -:  510:      "code that always depend on code that provides TEST_P. Failing to do "
        -:  511:      "so is often an indication of dead code, e.g. the last TEST_P was "
        -:  512:      "removed but the rest got left behind.";
        -:  513:
        -:  514:  std::string message =
    #####:  515:      "Parameterized test suite " + name +
    %%%%%:  515-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  515-block  1
    %%%%%:  515-block  2
    %%%%%:  515-block  3
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:  515-block  4
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
    $$$$$:  515-block  5
    $$$$$:  515-block  6
    #####:  516:      (has_test_p ? kMissingInstantiation : kMissingTestCase) +
    %%%%%:  516-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$:  516-block  1
        -:  517:      "\n\n"
        -:  518:      "To suppress this error for this test suite, insert the following line "
        -:  519:      "(in a non-header) in the namespace it is defined in:"
        -:  520:      "\n\n"
    #####:  521:      "GTEST_ALLOW_UNINSTANTIATED_PARAMETERIZED_TEST(" + name + ");";
    %%%%%:  521-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  521-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    $$$$$:  521-block  2
    $$$$$:  521-block  3
call    8 never executed
        -:  522:
    #####:  523:  std::string full_name = "UninstantiatedParameterizedTestSuite<" + name + ">";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  523-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$:  523-block  1
    $$$$$:  523-block  2
call    6 never executed
    #####:  524:  RegisterTest(  //
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  524-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  524-block  1
call    6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%:  524-block  2
call   11 never executed
call   12 never executed
    $$$$$:  524-block  3
call   13 never executed
    $$$$$:  524-block  4
        -:  525:      "GoogleTestVerification", full_name.c_str(),
        -:  526:      nullptr,  // No type parameter.
        -:  527:      nullptr,  // No value parameter.
        -:  528:      location.file.c_str(), location.line, [message, location] {
        -:  529:        return new FailureTest(location, message,
        -:  530:                               kErrorOnUninstantiatedParameterizedTest);
        -:  531:      });
        -:  532:}
        -:  533:
function _ZN7testing8internal34RegisterTypeParameterizedTestSuiteEPKcNS0_12CodeLocationE called 0 returned 0% blocks executed 0%
    #####:  534:void RegisterTypeParameterizedTestSuite(const char* test_suite_name,
        -:  535:                                        CodeLocation code_location) {
    #####:  536:  GetUnitTestImpl()->type_parameterized_test_registry().RegisterTestSuite(
    %%%%%:  536-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  536-block  1
call    6 never executed
    $$$$$:  536-block  2
call    7 never executed
        -:  537:      test_suite_name, code_location);
    #####:  538:}
        -:  539:
function _ZN7testing8internal47RegisterTypeParameterizedTestSuiteInstantiationEPKc called 0 returned 0% blocks executed 0%
    #####:  540:void RegisterTypeParameterizedTestSuiteInstantiation(const char* case_name) {
        -:  541:  GetUnitTestImpl()
    #####:  542:      ->type_parameterized_test_registry()
    %%%%%:  542-block  0
call    0 never executed
call    1 never executed
    #####:  543:      .RegisterInstantiation(case_name);
call    0 never executed
    #####:  544:}
        -:  545:
function _ZN7testing8internal34TypeParameterizedTestSuiteRegistry17RegisterTestSuiteEPKcNS0_12CodeLocationE called 0 returned 0% blocks executed 0%
    #####:  546:void TypeParameterizedTestSuiteRegistry::RegisterTestSuite(
        -:  547:    const char* test_suite_name, CodeLocation code_location) {
    #####:  548:  suites_.emplace(std::string(test_suite_name),
    %%%%%:  548-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  548-block  1
call    4 never executed
call    5 never executed
    $$$$$:  548-block  2
call    6 never executed
    $$$$$:  548-block  3
    $$$$$:  548-block  4
call    7 never executed
    $$$$$:  548-block  5
    #####:  549:                 TypeParameterizedTestSuiteInfo(code_location));
    %%%%%:  549-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  549-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
    $$$$$:  549-block  2
call    9 never executed
    $$$$$:  549-block  3
    $$$$$:  549-block  4
call   10 never executed
    #####:  550:}
        -:  551:
function _ZN7testing8internal34TypeParameterizedTestSuiteRegistry21RegisterInstantiationEPKc called 0 returned 0% blocks executed 0%
    #####:  552:void TypeParameterizedTestSuiteRegistry::RegisterInstantiation(
        -:  553:        const char* test_suite_name) {
    #####:  554:  auto it = suites_.find(std::string(test_suite_name));
    %%%%%:  554-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  554-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  554-block  2
call    7 never executed
call    8 never executed
    $$$$$:  554-block  3
call    9 never executed
    $$$$$:  554-block  4
    $$$$$:  554-block  5
call   10 never executed
    $$$$$:  554-block  6
    #####:  555:  if (it != suites_.end()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  556:    it->second.instantiated = true;
    %%%%%:  556-block  0
call    0 never executed
        -:  557:  } else {
    #####:  558:    GTEST_LOG_(ERROR) << "Unknown type parameterized test suit '"
    %%%%%:  558-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  558-block  1
call    3 never executed
    %%%%%:  558-block  2
call    4 never executed
    $$$$$:  558-block  3
call    5 never executed
    $$$$$:  558-block  4
    #####:  559:                      << test_suite_name << "'";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  559-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  559-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
        -:  560:  }
    #####:  561:}
    %%%%%:  561-block  0
        -:  562:
function _ZN7testing8internal34TypeParameterizedTestSuiteRegistry22CheckForInstantiationsEv called 1 returned 100% blocks executed 12%
        1:  563:void TypeParameterizedTestSuiteRegistry::CheckForInstantiations() {
        1:  564:  const auto& ignored = *GetIgnoredParameterizedTestSuites();
        1:  564-block  0
call    0 returned 1
       1*:  565:  for (const auto& testcase : suites_) {
call    0 returned 1
call    1 returned 1
        1:  565-block  0
call    2 returned 1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:  565-block  1
call    5 never executed
    %%%%%:  565-block  2
call    6 never executed
    #####:  566:    if (testcase.second.instantiated) continue;
branch  0 never executed
branch  1 never executed
    %%%%%:  566-block  0
    %%%%%:  566-block  1
    #####:  567:    if (ignored.find(testcase.first) != ignored.end()) continue;
    %%%%%:  567-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  567-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  567-block  2
    $$$$$:  567-block  3
        -:  568:
        -:  569:    std::string message =
    #####:  570:        "Type parameterized test suite " + testcase.first +
    %%%%%:  570-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$:  570-block  1
    $$$$$:  570-block  2
        -:  571:        " is defined via REGISTER_TYPED_TEST_SUITE_P, but never instantiated "
        -:  572:        "via INSTANTIATE_TYPED_TEST_SUITE_P. None of the test cases will run."
        -:  573:        "\n\n"
        -:  574:        "Ideally, TYPED_TEST_P definitions should only ever be included as "
        -:  575:        "part of binaries that intend to use them. (As opposed to, for "
        -:  576:        "example, being placed in a library that may be linked in to get other "
        -:  577:        "utilities.)"
        -:  578:        "\n\n"
        -:  579:        "To suppress this error for this test suite, insert the following line "
        -:  580:        "(in a non-header) in the namespace it is defined in:"
        -:  581:        "\n\n"
    #####:  582:        "GTEST_ALLOW_UNINSTANTIATED_PARAMETERIZED_TEST(" +
    %%%%%:  582-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$:  582-block  1
    #####:  583:        testcase.first + ");";
    %%%%%:  583-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  583-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$:  583-block  2
call    7 never executed
        -:  584:
        -:  585:    std::string full_name =
    #####:  586:        "UninstantiatedTypeParameterizedTestSuite<" + testcase.first + ">";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  586-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$:  586-block  1
    $$$$$:  586-block  2
call    6 never executed
    #####:  587:    RegisterTest(  //
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  587-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:  587-block  1
call   10 never executed
call   11 never executed
    $$$$$:  587-block  2
call   12 never executed
    $$$$$:  587-block  3
        -:  588:        "GoogleTestVerification", full_name.c_str(),
        -:  589:        nullptr,  // No type parameter.
        -:  590:        nullptr,  // No value parameter.
        -:  591:        testcase.second.code_location.file.c_str(),
    #####:  592:        testcase.second.code_location.line, [message, testcase] {
    %%%%%:  592-block  0
call    0 never executed
        -:  593:          return new FailureTest(testcase.second.code_location, message,
        -:  594:                                 kErrorOnUninstantiatedTypeParameterizedTest);
        -:  595:        });
        -:  596:  }
        1:  597:}
        1:  597-block  0
        -:  598:
        -:  599:// A copy of all command line arguments.  Set by InitGoogleTest().
        -:  600:static ::std::vector<std::string> g_argvs;
        -:  601:
function _ZN7testing8internal8GetArgvsB5cxx11Ev called 2 returned 100% blocks executed 100%
        2:  602:::std::vector<std::string> GetArgvs() {
        -:  603:#if defined(GTEST_CUSTOM_GET_ARGVS_)
        -:  604:  // GTEST_CUSTOM_GET_ARGVS_() may return a container of std::string or
        -:  605:  // ::string. This code converts it to the appropriate type.
        -:  606:  const auto& custom = GTEST_CUSTOM_GET_ARGVS_();
        -:  607:  return ::std::vector<std::string>(custom.begin(), custom.end());
        -:  608:#else   // defined(GTEST_CUSTOM_GET_ARGVS_)
        2:  609:  return g_argvs;
        2:  609-block  0
call    0 returned 2
        -:  610:#endif  // defined(GTEST_CUSTOM_GET_ARGVS_)
        -:  611:}
        -:  612:
        -:  613:// Returns the current application's name, removing directory path if that
        -:  614:// is present.
function _ZN7testing8internal24GetCurrentExecutableNameEv called 0 returned 0% blocks executed 0%
    #####:  615:FilePath GetCurrentExecutableName() {
    #####:  616:  FilePath result;
    %%%%%:  616-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  616-block  1
call    3 never executed
    $$$$$:  616-block  2
call    4 never executed
        -:  617:
        -:  618:#if GTEST_OS_WINDOWS || GTEST_OS_OS2
    #####:  619:  result.Set(FilePath(GetArgvs()[0]).RemoveExtension("exe"));
    %%%%%:  619-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  619-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  619-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:  619-block  3
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:  619-block  4
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$:  619-block  5
call   16 never executed
    $$$$$:  619-block  6
    $$$$$:  619-block  7
call   17 never executed
    $$$$$:  619-block  8
    $$$$$:  619-block  9
call   18 never executed
    $$$$$:  619-block 10
        -:  620:#else
        -:  621:  result.Set(FilePath(GetArgvs()[0]));
        -:  622:#endif  // GTEST_OS_WINDOWS
        -:  623:
    #####:  624:  return result.RemoveDirectoryName();
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  624-block  0
    %%%%%:  624-block  1
        -:  625:}
        -:  626:
        -:  627:// Functions for processing the gtest_output flag.
        -:  628:
        -:  629:// Returns the output format, or "" for normal printed output.
function _ZN7testing8internal15UnitTestOptions15GetOutputFormatB5cxx11Ev called 1 returned 100% blocks executed 50%
        1:  630:std::string UnitTestOptions::GetOutputFormat() {
        1:  631:  std::string s = GTEST_FLAG_GET(output);
        1:  631-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
    $$$$$:  631-block  1
call    3 never executed
        1:  632:  const char* const gtest_output_flag = s.c_str();
        1:  632-block  0
call    0 returned 1
        1:  633:  const char* const colon = strchr(gtest_output_flag, ':');
        -:  634:  return (colon == nullptr)
        -:  635:             ? std::string(gtest_output_flag)
        -:  636:             : std::string(gtest_output_flag,
       3*:  637:                           static_cast<size_t>(colon - gtest_output_flag));
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  637-block  0
call    2 returned 1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
    %%%%%:  637-block  1
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
        1:  637-block  2
branch 10 taken 0 (fallthrough)
branch 11 taken 1
    %%%%%:  637-block  3
call   12 never executed
        1:  637-block  4
branch 13 taken 1 (fallthrough)
branch 14 taken 0
        1:  637-block  5
call   15 returned 1
        1:  637-block  6
call   16 returned 1
        1:  637-block  7
    $$$$$:  637-block  8
branch 17 never executed
branch 18 never executed
    $$$$$:  637-block  9
call   19 never executed
    $$$$$:  637-block 10
    $$$$$:  637-block 11
branch 20 never executed
branch 21 never executed
    $$$$$:  637-block 12
call   22 never executed
    $$$$$:  637-block 13
        -:  638:}
        -:  639:
        -:  640:// Returns the name of the requested output file, or the default if none
        -:  641:// was explicitly specified.
function _ZN7testing8internal15UnitTestOptions27GetAbsolutePathToOutputFileB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:  642:std::string UnitTestOptions::GetAbsolutePathToOutputFile() {
    #####:  643:  std::string s = GTEST_FLAG_GET(output);
    %%%%%:  643-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$:  643-block  1
call    4 never executed
    #####:  644:  const char* const gtest_output_flag = s.c_str();
    %%%%%:  644-block  0
call    0 never executed
        -:  645:
    #####:  646:  std::string format = GetOutputFormat();
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  646-block  0
call    3 never executed
    $$$$$:  646-block  1
call    4 never executed
    #####:  647:  if (format.empty())
    %%%%%:  647-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  648:    format = std::string(kDefaultOutputFormat);
    %%%%%:  648-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  648-block  1
call    4 never executed
call    5 never executed
call    6 never executed
    $$$$$:  648-block  2
call    7 never executed
    $$$$$:  648-block  3
        -:  649:
    #####:  650:  const char* const colon = strchr(gtest_output_flag, ':');
    #####:  651:  if (colon == nullptr)
    %%%%%:  651-block  0
branch  0 never executed
branch  1 never executed
    #####:  652:    return internal::FilePath::MakeFileName(
    %%%%%:  652-block  0
call    0 never executed
    %%%%%:  652-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  652-block  2
call    4 never executed
    $$$$$:  652-block  3
call    5 never executed
    $$$$$:  652-block  4
    #####:  653:        internal::FilePath(
    %%%%%:  653-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  653-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:  653-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    $$$$$:  653-block  3
call   14 never executed
    $$$$$:  653-block  4
    $$$$$:  653-block  5
call   15 never executed
    $$$$$:  653-block  6
    $$$$$:  653-block  7
call   16 never executed
    $$$$$:  653-block  8
        -:  654:            UnitTest::GetInstance()->original_working_dir()),
    #####:  655:        internal::FilePath(kDefaultOutputFile), 0,
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  655-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    $$$$$:  655-block  1
call   10 never executed
    $$$$$:  655-block  2
    $$$$$:  655-block  3
call   11 never executed
    $$$$$:  655-block  4
    $$$$$:  655-block  5
call   12 never executed
    $$$$$:  655-block  6
    #####:  656:        format.c_str()).string();
    %%%%%:  656-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  656-block  1
        -:  657:
    #####:  658:  internal::FilePath output_name(colon + 1);
    %%%%%:  658-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  658-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    %%%%%:  658-block  2
call    8 never executed
    $$$$$:  658-block  3
    $$$$$:  658-block  4
    $$$$$:  658-block  5
call    9 never executed
    #####:  659:  if (!output_name.IsAbsolutePath())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  660:    output_name = internal::FilePath::ConcatPaths(
    %%%%%:  660-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  660-block  1
call    3 never executed
    $$$$$:  660-block  2
call    4 never executed
    $$$$$:  660-block  3
    #####:  661:        internal::FilePath(UnitTest::GetInstance()->original_working_dir()),
    %%%%%:  661-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  661-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:  661-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    $$$$$:  661-block  3
call   14 never executed
    $$$$$:  661-block  4
    $$$$$:  661-block  5
call   15 never executed
    $$$$$:  661-block  6
    $$$$$:  661-block  7
call   16 never executed
    $$$$$:  661-block  8
    #####:  662:        internal::FilePath(colon + 1));
    %%%%%:  662-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  662-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  662-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    $$$$$:  662-block  3
call   13 never executed
    $$$$$:  662-block  4
    $$$$$:  662-block  5
call   14 never executed
    $$$$$:  662-block  6
    $$$$$:  662-block  7
call   15 never executed
    $$$$$:  662-block  8
        -:  663:
    #####:  664:  if (!output_name.IsDirectory())
    %%%%%:  664-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  665:    return output_name.string();
    %%%%%:  665-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  665-block  1
        -:  666:
        -:  667:  internal::FilePath result(internal::FilePath::GenerateUniqueFileName(
    #####:  668:      output_name, internal::GetCurrentExecutableName(),
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$:  668-block  0
    #####:  669:      GetOutputFormat().c_str()));
    %%%%%:  669-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  669-block  1
call    3 never executed
    %%%%%:  669-block  2
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  669-block  3
call    7 never executed
    $$$$$:  669-block  4
    $$$$$:  669-block  5
call    8 never executed
    #####:  670:  return result.string();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  670-block  0
        -:  671:}
        -:  672:
        -:  673:// Returns true if and only if the wildcard pattern matches the string. Each
        -:  674:// pattern consists of regular characters, single-character wildcards (?), and
        -:  675:// multi-character wildcards (*).
        -:  676://
        -:  677:// This function implements a linear-time string globbing algorithm based on
        -:  678:// https://research.swtch.com/glob.
function _ZN7testing8internalL20PatternMatchesStringERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKcSA_ called 1449 returned 100% blocks executed 87%
     1449:  679:static bool PatternMatchesString(const std::string& name_str,
        -:  680:                                 const char* pattern, const char* pattern_end) {
     1449:  681:  const char* name = name_str.c_str();
     1449:  681-block  0
call    0 returned 1449
     1449:  682:  const char* const name_begin = name;
     1449:  683:  const char* const name_end = name + name_str.size();
call    0 returned 1449
        -:  684:
     1449:  685:  const char* pattern_next = pattern;
     1449:  686:  const char* name_next = name;
        -:  687:
    46178:  688:  while (pattern < pattern_end || name < name_end) {
    46178:  688-block  0
branch  0 taken 46 (fallthrough)
branch  1 taken 46132
       46:  688-block  1
branch  2 taken 23 (fallthrough)
branch  3 taken 23
    44729:  688-block  2
    46155:  689:    if (pattern < pattern_end) {
    46155:  689-block  0
branch  0 taken 46132 (fallthrough)
branch  1 taken 23
    46132:  690:      switch (*pattern) {
    46132:  690-block  0
branch  0 taken 25869
branch  1 taken 0
branch  2 taken 20263
    25869:  691:        default:  // Match an ordinary character.
    25869:  692:          if (name < name_end && *name == *pattern) {
    25869:  692-block  0
branch  0 taken 25271 (fallthrough)
branch  1 taken 598
    25271:  692-block  1
branch  2 taken 4801 (fallthrough)
branch  3 taken 20470
     4801:  693:            ++pattern;
     4801:  694:            ++name;
     4801:  695:            continue;
     4801:  695-block  0
        -:  696:          }
    21068:  697:          break;
    21068:  697-block  0
    #####:  698:        case '?':  // Match any single character.
    #####:  699:          if (name < name_end) {
    %%%%%:  699-block  0
branch  0 never executed
branch  1 never executed
    #####:  700:            ++pattern;
    #####:  701:            ++name;
    #####:  702:            continue;
    %%%%%:  702-block  0
        -:  703:          }
    #####:  704:          break;
    %%%%%:  704-block  0
    20263:  705:        case '*':
        -:  706:          // Match zero or more characters. Start by skipping over the wildcard
        -:  707:          // and matching zero characters from name. If that fails, restart and
        -:  708:          // match one more character than the last attempt.
    20263:  709:          pattern_next = pattern;
    20263:  710:          name_next = name + 1;
    20263:  711:          ++pattern;
    20263:  712:          continue;
    20263:  712-block  0
        -:  713:      }
        -:  714:    }
        -:  715:    // Failed to match a character. Restart if possible.
    21091:  716:    if (name_begin < name_next && name_next <= name_end) {
    21091:  716-block  0
branch  0 taken 20263 (fallthrough)
branch  1 taken 828
    20263:  716-block  1
branch  2 taken 19665 (fallthrough)
branch  3 taken 598
    19665:  717:      pattern = pattern_next;
    19665:  718:      name = name_next;
    19665:  719:      continue;
    19665:  719-block  0
        -:  720:    }
     1426:  721:    return false;
     1426:  721-block  0
        -:  722:  }
       23:  723:  return true;
       23:  723-block  0
        -:  724:}
        -:  725:
function _ZN7testing8internal15UnitTestOptions13MatchesFilterERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKc called 115 returned 100% blocks executed 100%
      115:  726:bool UnitTestOptions::MatchesFilter(const std::string& name_str,
        -:  727:                                    const char* filter) {
        -:  728:  // The filter is a list of patterns separated by colons (:).
      115:  729:  const char* pattern = filter;
      115:  729-block  0
        -:  730:  while (true) {
        -:  731:    // Find the bounds of this pattern.
     1449:  732:    const char* const next_sep = strchr(pattern, ':');
     1449:  733:    const char* const pattern_end =
     1449:  734:        next_sep != nullptr ? next_sep : pattern + strlen(pattern);
     1449:  734-block  0
branch  0 taken 92 (fallthrough)
branch  1 taken 1357
       92:  734-block  1
     1357:  734-block  2
        -:  735:
        -:  736:    // Check if this pattern matches name_str.
     1449:  737:    if (PatternMatchesString(name_str, pattern, pattern_end)) {
     1449:  737-block  0
call    0 returned 1449
branch  1 taken 23 (fallthrough)
branch  2 taken 1426
       23:  738:      return true;
       23:  738-block  0
        -:  739:    }
        -:  740:
        -:  741:    // Give up on this pattern. However, if we found a pattern separator (:),
        -:  742:    // advance to the next pattern (skipping over the separator) and restart.
     1426:  743:    if (next_sep == nullptr) {
     1426:  743-block  0
branch  0 taken 92 (fallthrough)
branch  1 taken 1334
       92:  744:      return false;
       92:  744-block  0
        -:  745:    }
     1334:  746:    pattern = next_sep + 1;
     1334:  747:  }
     1334:  747-block  0
        -:  748:  return true;
        -:  749:}
        -:  750:
        -:  751:// Returns true if and only if the user-specified filter matches the test
        -:  752:// suite name and the test name.
function _ZN7testing8internal15UnitTestOptions17FilterMatchesTestERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_ called 23 returned 100% blocks executed 46%
       23:  753:bool UnitTestOptions::FilterMatchesTest(const std::string& test_suite_name,
        -:  754:                                        const std::string& test_name) {
       46:  755:  const std::string& full_name = test_suite_name + "." + test_name.c_str();
       23:  755-block  0
call    0 returned 23
call    1 returned 23
branch  2 taken 23 (fallthrough)
branch  3 taken 0 (throw)
       23:  755-block  1
call    4 returned 23
branch  5 taken 23 (fallthrough)
branch  6 taken 0 (throw)
       23:  755-block  2
call    7 returned 23
call    8 returned 23
    $$$$$:  755-block  3
call    9 never executed
    $$$$$:  755-block  4
    $$$$$:  755-block  5
call   10 never executed
        -:  756:
        -:  757:  // Split --gtest_filter at '-', if there is one, to separate into
        -:  758:  // positive filter and negative filter portions
       46:  759:  std::string str = GTEST_FLAG_GET(filter);
call    0 returned 23
branch  1 taken 23 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 23
    $$$$$:  759-block  0
call    4 never executed
       23:  760:  const char* const p = str.c_str();
       23:  760-block  0
call    0 returned 23
       23:  761:  const char* const dash = strchr(p, '-');
       46:  762:  std::string positive;
call    0 returned 23
call    1 returned 23
    $$$$$:  762-block  0
call    2 never executed
       23:  763:  std::string negative;
call    0 returned 23
    $$$$$:  763-block  0
call    1 never executed
       23:  764:  if (dash == nullptr) {
branch  0 taken 23 (fallthrough)
branch  1 taken 0
       23:  765:    positive = str.c_str();  // Whole string is a positive filter
       23:  765-block  0
call    0 returned 23
call    1 returned 23
branch  2 taken 23 (fallthrough)
branch  3 taken 0 (throw)
       23:  766:    negative = "";
       23:  766-block  0
call    0 returned 23
branch  1 taken 23 (fallthrough)
branch  2 taken 0 (throw)
        -:  767:  } else {
    #####:  768:    positive = std::string(p, dash);   // Everything up to the dash
    %%%%%:  768-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  768-block  1
call    4 never executed
call    5 never executed
call    6 never executed
    $$$$$:  768-block  2
call    7 never executed
    $$$$$:  768-block  3
    #####:  769:    negative = std::string(dash + 1);  // Everything after the dash
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  769-block  0
call    4 never executed
call    5 never executed
call    6 never executed
    $$$$$:  769-block  1
call    7 never executed
    $$$$$:  769-block  2
    #####:  770:    if (positive.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  771:      // Treat '-test1' as the same as '*-test1'
    #####:  772:      positive = kUniversalFilter;
    %%%%%:  772-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  773:    }
        -:  774:  }
        -:  775:
        -:  776:  // A filter is a colon-separated list of patterns.  It matches a
        -:  777:  // test if any pattern in it matches the test.
      46*:  778:  return (MatchesFilter(full_name, positive.c_str()) &&
       23:  778-block  0
call    0 returned 23
call    1 returned 23
branch  2 taken 23 (fallthrough)
branch  3 taken 0
       23:  778-block  1
    %%%%%:  778-block  2
       69:  779:          !MatchesFilter(full_name, negative.c_str()));
       23:  779-block  0
call    0 returned 23
call    1 returned 23
branch  2 taken 23 (fallthrough)
branch  3 taken 0
       23:  779-block  1
call    4 returned 23
       23:  779-block  2
        -:  780:}
        -:  781:
        -:  782:#if GTEST_HAS_SEH
        -:  783:// Returns EXCEPTION_EXECUTE_HANDLER if Google Test should handle the
        -:  784:// given SEH exception, or EXCEPTION_CONTINUE_SEARCH otherwise.
        -:  785:// This function is useful as an __except condition.
        -:  786:int UnitTestOptions::GTestShouldProcessSEH(DWORD exception_code) {
        -:  787:  // Google Test should handle a SEH exception if:
        -:  788:  //   1. the user wants it to, AND
        -:  789:  //   2. this is not a breakpoint exception, AND
        -:  790:  //   3. this is not a C++ exception (VC++ implements them via SEH,
        -:  791:  //      apparently).
        -:  792:  //
        -:  793:  // SEH exception code for C++ exceptions.
        -:  794:  // (see http://support.microsoft.com/kb/185294 for more information).
        -:  795:  const DWORD kCxxExceptionCode = 0xe06d7363;
        -:  796:
        -:  797:  bool should_handle = true;
        -:  798:
        -:  799:  if (!GTEST_FLAG_GET(catch_exceptions))
        -:  800:    should_handle = false;
        -:  801:  else if (exception_code == EXCEPTION_BREAKPOINT)
        -:  802:    should_handle = false;
        -:  803:  else if (exception_code == kCxxExceptionCode)
        -:  804:    should_handle = false;
        -:  805:
        -:  806:  return should_handle ? EXCEPTION_EXECUTE_HANDLER : EXCEPTION_CONTINUE_SEARCH;
        -:  807:}
        -:  808:#endif  // GTEST_HAS_SEH
        -:  809:
        -:  810:}  // namespace internal
        -:  811:
        -:  812:// The c'tor sets this object as the test part result reporter used by
        -:  813:// Google Test.  The 'result' parameter specifies where to report the
        -:  814:// results. Intercepts only failures from the current thread.
function _ZN7testing32ScopedFakeTestPartResultReporterC2EPNS_19TestPartResultArrayE called 0 returned 0% blocks executed 0%
    #####:  815:ScopedFakeTestPartResultReporter::ScopedFakeTestPartResultReporter(
    #####:  816:    TestPartResultArray* result)
        -:  817:    : intercept_mode_(INTERCEPT_ONLY_CURRENT_THREAD),
    #####:  818:      result_(result) {
    %%%%%:  818-block  0
call    0 never executed
    $$$$$:  818-block  1
call    1 never executed
    #####:  819:  Init();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  820:}
    %%%%%:  820-block  0
        -:  821:
        -:  822:// The c'tor sets this object as the test part result reporter used by
        -:  823:// Google Test.  The 'result' parameter specifies where to report the
        -:  824:// results.
function _ZN7testing32ScopedFakeTestPartResultReporterC2ENS0_13InterceptModeEPNS_19TestPartResultArrayE called 0 returned 0% blocks executed 0%
    #####:  825:ScopedFakeTestPartResultReporter::ScopedFakeTestPartResultReporter(
    #####:  826:    InterceptMode intercept_mode, TestPartResultArray* result)
        -:  827:    : intercept_mode_(intercept_mode),
    #####:  828:      result_(result) {
    %%%%%:  828-block  0
call    0 never executed
    $$$$$:  828-block  1
call    1 never executed
    #####:  829:  Init();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  830:}
    %%%%%:  830-block  0
        -:  831:
function _ZN7testing32ScopedFakeTestPartResultReporter4InitEv called 0 returned 0% blocks executed 0%
    #####:  832:void ScopedFakeTestPartResultReporter::Init() {
    #####:  833:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
    %%%%%:  833-block  0
call    0 never executed
    #####:  834:  if (intercept_mode_ == INTERCEPT_ALL_THREADS) {
branch  0 never executed
branch  1 never executed
    #####:  835:    old_reporter_ = impl->GetGlobalTestPartResultReporter();
    %%%%%:  835-block  0
call    0 never executed
    #####:  836:    impl->SetGlobalTestPartResultReporter(this);
call    0 never executed
        -:  837:  } else {
    #####:  838:    old_reporter_ = impl->GetTestPartResultReporterForCurrentThread();
    %%%%%:  838-block  0
call    0 never executed
    #####:  839:    impl->SetTestPartResultReporterForCurrentThread(this);
call    0 never executed
        -:  840:  }
    #####:  841:}
        -:  842:
        -:  843:// The d'tor restores the test part result reporter used by Google Test
        -:  844:// before.
    #####:  845:ScopedFakeTestPartResultReporter::~ScopedFakeTestPartResultReporter() {
    #####:  846:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
    #####:  847:  if (intercept_mode_ == INTERCEPT_ALL_THREADS) {
    #####:  848:    impl->SetGlobalTestPartResultReporter(old_reporter_);
        -:  849:  } else {
    #####:  850:    impl->SetTestPartResultReporterForCurrentThread(old_reporter_);
        -:  851:  }
    #####:  852:}
------------------
_ZN7testing32ScopedFakeTestPartResultReporterD0Ev:
function _ZN7testing32ScopedFakeTestPartResultReporterD0Ev called 0 returned 0% blocks executed 0%
    #####:  845:ScopedFakeTestPartResultReporter::~ScopedFakeTestPartResultReporter() {
        -:  846:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
        -:  847:  if (intercept_mode_ == INTERCEPT_ALL_THREADS) {
        -:  848:    impl->SetGlobalTestPartResultReporter(old_reporter_);
        -:  849:  } else {
        -:  850:    impl->SetTestPartResultReporterForCurrentThread(old_reporter_);
        -:  851:  }
    #####:  852:}
    %%%%%:  852-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7testing32ScopedFakeTestPartResultReporterD2Ev:
function _ZN7testing32ScopedFakeTestPartResultReporterD2Ev called 0 returned 0% blocks executed 0%
    #####:  845:ScopedFakeTestPartResultReporter::~ScopedFakeTestPartResultReporter() {
    %%%%%:  845-block  0
call    0 never executed
    #####:  846:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
    %%%%%:  846-block  0
call    0 never executed
    #####:  847:  if (intercept_mode_ == INTERCEPT_ALL_THREADS) {
branch  0 never executed
branch  1 never executed
    #####:  848:    impl->SetGlobalTestPartResultReporter(old_reporter_);
    %%%%%:  848-block  0
call    0 never executed
        -:  849:  } else {
    #####:  850:    impl->SetTestPartResultReporterForCurrentThread(old_reporter_);
    %%%%%:  850-block  0
call    0 never executed
        -:  851:  }
    #####:  852:}
------------------
        -:  853:
        -:  854:// Increments the test part result count and remembers the result.
        -:  855:// This method is from the TestPartResultReporterInterface interface.
function _ZN7testing32ScopedFakeTestPartResultReporter20ReportTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####:  856:void ScopedFakeTestPartResultReporter::ReportTestPartResult(
        -:  857:    const TestPartResult& result) {
    #####:  858:  result_->Append(result);
    %%%%%:  858-block  0
call    0 never executed
    #####:  859:}
        -:  860:
        -:  861:namespace internal {
        -:  862:
        -:  863:// Returns the type ID of ::testing::Test.  We should always call this
        -:  864:// instead of GetTypeId< ::testing::Test>() to get the type ID of
        -:  865:// testing::Test.  This is to work around a suspected linker bug when
        -:  866:// using Google Test as a framework on Mac OS X.  The bug causes
        -:  867:// GetTypeId< ::testing::Test>() to return different values depending
        -:  868:// on whether the call is from the Google Test framework itself or
        -:  869:// from user test code.  GetTestTypeId() is guaranteed to always
        -:  870:// return the same value, as it always calls GetTypeId<>() from the
        -:  871:// gtest.cc, which is within the Google Test framework.
function _ZN7testing8internal13GetTestTypeIdEv called 24 returned 100% blocks executed 100%
       24:  872:TypeId GetTestTypeId() {
       24:  873:  return GetTypeId<Test>();
       24:  873-block  0
call    0 returned 24
        -:  874:}
        -:  875:
        -:  876:// The value of GetTestTypeId() as seen from within the Google Test
        -:  877:// library.  This is solely for testing GetTestTypeId().
        -:  878:extern const TypeId kTestTypeIdInGoogleTest = GetTestTypeId();
        -:  879:
        -:  880:// This predicate-formatter checks that 'results' contains a test part
        -:  881:// failure of the given type and that the failure message contains the
        -:  882:// given substring.
function _ZN7testing8internalL13HasOneFailureEPKcS2_S2_RKNS_19TestPartResultArrayENS_14TestPartResult4TypeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  883:static AssertionResult HasOneFailure(const char* /* results_expr */,
        -:  884:                                     const char* /* type_expr */,
        -:  885:                                     const char* /* substr_expr */,
        -:  886:                                     const TestPartResultArray& results,
        -:  887:                                     TestPartResult::Type type,
        -:  888:                                     const std::string& substr) {
        -:  889:  const std::string expected(type == TestPartResult::kFatalFailure ?
        -:  890:                        "1 fatal failure" :
    #####:  891:                        "1 non-fatal failure");
    %%%%%:  891-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  891-block  1
    %%%%%:  891-block  2
    %%%%%:  891-block  3
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$:  891-block  4
    $$$$$:  891-block  5
call    7 never executed
    #####:  892:  Message msg;
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  892-block  0
call    3 never executed
    $$$$$:  892-block  1
call    4 never executed
    #####:  893:  if (results.size() != 1) {
    %%%%%:  893-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  894:    msg << "Expected: " << expected << "\n"
    %%%%%:  894-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  894-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  894-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####:  895:        << "  Actual: " << results.size() << " failures";
    %%%%%:  895-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  895-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  895-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    $$$$$:  895-block  3
    #####:  896:    for (int i = 0; i < results.size(); i++) {
    %%%%%:  896-block  0
    %%%%%:  896-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  896-block  2
    #####:  897:      msg << "\n" << results.GetTestPartResult(i);
    %%%%%:  897-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  897-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  897-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
        -:  898:    }
    #####:  899:    return AssertionFailure() << msg;
    %%%%%:  899-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  899-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  899-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:  899-block  3
    %%%%%:  899-block  4
call    9 never executed
    $$$$$:  899-block  5
call   10 never executed
    $$$$$:  899-block  6
        -:  900:  }
        -:  901:
    #####:  902:  const TestPartResult& r = results.GetTestPartResult(0);
    %%%%%:  902-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  903:  if (r.type() != type) {
    %%%%%:  903-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  904:    return AssertionFailure() << "Expected: " << expected << "\n"
    %%%%%:  904-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  904-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  904-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:  904-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%:  904-block  4
call   12 never executed
    $$$$$:  904-block  5
call   13 never executed
    $$$$$:  904-block  6
    #####:  905:                              << "  Actual:\n"
    %%%%%:  905-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  906:                              << r;
    %%%%%:  906-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  906-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  906-block  2
        -:  907:  }
        -:  908:
    #####:  909:  if (strstr(r.message(), substr.c_str()) == nullptr) {
    %%%%%:  909-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  910:    return AssertionFailure() << "Expected: " << expected << " containing \""
    %%%%%:  910-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  910-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  910-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:  910-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%:  910-block  4
call   12 never executed
    $$$$$:  910-block  5
call   13 never executed
    $$$$$:  910-block  6
    #####:  911:                              << substr << "\"\n"
    %%%%%:  911-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  911-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  912:                              << "  Actual:\n"
    %%%%%:  912-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  913:                              << r;
    %%%%%:  913-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  913-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  913-block  2
        -:  914:  }
        -:  915:
    #####:  916:  return AssertionSuccess();
    %%%%%:  916-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  916-block  1
        -:  917:}
        -:  918:
        -:  919:// The constructor of SingleFailureChecker remembers where to look up
        -:  920:// test part results, what type of failure we expect, and what
        -:  921:// substring the failure message should contain.
function _ZN7testing8internal20SingleFailureCheckerC2EPKNS_19TestPartResultArrayENS_14TestPartResult4TypeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  922:SingleFailureChecker::SingleFailureChecker(const TestPartResultArray* results,
        -:  923:                                           TestPartResult::Type type,
    #####:  924:                                           const std::string& substr)
    #####:  925:    : results_(results), type_(type), substr_(substr) {}
    %%%%%:  925-block  0
call    0 never executed
        -:  926:
        -:  927:// The destructor of SingleFailureChecker verifies that the given
        -:  928:// TestPartResultArray contains exactly one failure that has the given
        -:  929:// type and contains the given substring.  If that's not the case, a
        -:  930:// non-fatal failure will be generated.
function _ZN7testing8internal20SingleFailureCheckerD2Ev called 0 returned 0% blocks executed 0%
    #####:  931:SingleFailureChecker::~SingleFailureChecker() {
    #####:  932:  EXPECT_PRED_FORMAT3(HasOneFailure, *results_, type_, substr_);
    %%%%%:  932-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  932-block  1
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    %%%%%:  932-block  2
call   10 never executed
call   11 never executed
    #####:  933:}
        -:  934:
function _ZN7testing8internal35DefaultGlobalTestPartResultReporterC2EPNS0_12UnitTestImplE called 1 returned 100% blocks executed 100%
        1:  935:DefaultGlobalTestPartResultReporter::DefaultGlobalTestPartResultReporter(
        1:  936:    UnitTestImpl* unit_test) : unit_test_(unit_test) {}
        1:  936-block  0
call    0 returned 1
        -:  937:
function _ZN7testing8internal35DefaultGlobalTestPartResultReporter20ReportTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####:  938:void DefaultGlobalTestPartResultReporter::ReportTestPartResult(
        -:  939:    const TestPartResult& result) {
    #####:  940:  unit_test_->current_test_result()->AddTestPartResult(result);
    %%%%%:  940-block  0
call    0 never executed
call    1 never executed
    #####:  941:  unit_test_->listeners()->repeater()->OnTestPartResult(result);
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  942:}
        -:  943:
function _ZN7testing8internal38DefaultPerThreadTestPartResultReporterC2EPNS0_12UnitTestImplE called 1 returned 100% blocks executed 100%
        1:  944:DefaultPerThreadTestPartResultReporter::DefaultPerThreadTestPartResultReporter(
        1:  945:    UnitTestImpl* unit_test) : unit_test_(unit_test) {}
        1:  945-block  0
call    0 returned 1
        -:  946:
function _ZN7testing8internal38DefaultPerThreadTestPartResultReporter20ReportTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####:  947:void DefaultPerThreadTestPartResultReporter::ReportTestPartResult(
        -:  948:    const TestPartResult& result) {
    #####:  949:  unit_test_->GetGlobalTestPartResultReporter()->ReportTestPartResult(result);
    %%%%%:  949-block  0
call    0 never executed
call    1 never executed
    #####:  950:}
        -:  951:
        -:  952:// Returns the global test part result reporter.
        -:  953:TestPartResultReporterInterface*
function _ZN7testing8internal12UnitTestImpl31GetGlobalTestPartResultReporterEv called 0 returned 0% blocks executed 0%
    #####:  954:UnitTestImpl::GetGlobalTestPartResultReporter() {
    #####:  955:  internal::MutexLock lock(&global_test_part_result_reporter_mutex_);
    %%%%%:  955-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  956:  return global_test_part_result_repoter_;
    %%%%%:  956-block  0
call    0 never executed
    %%%%%:  956-block  1
        -:  957:}
        -:  958:
        -:  959:// Sets the global test part result reporter.
function _ZN7testing8internal12UnitTestImpl31SetGlobalTestPartResultReporterEPNS_31TestPartResultReporterInterfaceE called 0 returned 0% blocks executed 0%
    #####:  960:void UnitTestImpl::SetGlobalTestPartResultReporter(
        -:  961:    TestPartResultReporterInterface* reporter) {
    #####:  962:  internal::MutexLock lock(&global_test_part_result_reporter_mutex_);
    %%%%%:  962-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  963:  global_test_part_result_repoter_ = reporter;
    %%%%%:  963-block  0
call    0 never executed
    #####:  964:}
        -:  965:
        -:  966:// Returns the test part result reporter for the current thread.
        -:  967:TestPartResultReporterInterface*
function _ZN7testing8internal12UnitTestImpl41GetTestPartResultReporterForCurrentThreadEv called 0 returned 0% blocks executed 0%
    #####:  968:UnitTestImpl::GetTestPartResultReporterForCurrentThread() {
    #####:  969:  return per_thread_test_part_result_reporter_.get();
    %%%%%:  969-block  0
call    0 never executed
        -:  970:}
        -:  971:
        -:  972:// Sets the test part result reporter for the current thread.
function _ZN7testing8internal12UnitTestImpl41SetTestPartResultReporterForCurrentThreadEPNS_31TestPartResultReporterInterfaceE called 0 returned 0% blocks executed 0%
    #####:  973:void UnitTestImpl::SetTestPartResultReporterForCurrentThread(
        -:  974:    TestPartResultReporterInterface* reporter) {
    #####:  975:  per_thread_test_part_result_reporter_.set(reporter);
    %%%%%:  975-block  0
call    0 never executed
    #####:  976:}
        -:  977:
        -:  978:// Gets the number of successful test suites.
function _ZNK7testing8internal12UnitTestImpl27successful_test_suite_countEv called 0 returned 0% blocks executed 0%
    #####:  979:int UnitTestImpl::successful_test_suite_count() const {
    #####:  980:  return CountIf(test_suites_, TestSuitePassed);
    %%%%%:  980-block  0
call    0 never executed
        -:  981:}
        -:  982:
        -:  983:// Gets the number of failed test suites.
function _ZNK7testing8internal12UnitTestImpl23failed_test_suite_countEv called 2 returned 100% blocks executed 100%
        2:  984:int UnitTestImpl::failed_test_suite_count() const {
        2:  985:  return CountIf(test_suites_, TestSuiteFailed);
        2:  985-block  0
call    0 returned 2
        -:  986:}
        -:  987:
        -:  988:// Gets the number of all test suites.
function _ZNK7testing8internal12UnitTestImpl22total_test_suite_countEv called 24 returned 100% blocks executed 100%
       24:  989:int UnitTestImpl::total_test_suite_count() const {
       24:  990:  return static_cast<int>(test_suites_.size());
       24:  990-block  0
call    0 returned 24
        -:  991:}
        -:  992:
        -:  993:// Gets the number of all test suites that contain at least one test
        -:  994:// that should run.
function _ZNK7testing8internal12UnitTestImpl23test_suite_to_run_countEv called 2 returned 100% blocks executed 100%
        2:  995:int UnitTestImpl::test_suite_to_run_count() const {
        2:  996:  return CountIf(test_suites_, ShouldRunTestSuite);
        2:  996-block  0
call    0 returned 2
        -:  997:}
        -:  998:
        -:  999:// Gets the number of successful tests.
function _ZNK7testing8internal12UnitTestImpl21successful_test_countEv called 1 returned 100% blocks executed 100%
        1: 1000:int UnitTestImpl::successful_test_count() const {
        1: 1001:  return SumOverTestSuiteList(test_suites_, &TestSuite::successful_test_count);
        1: 1001-block  0
call    0 returned 1
        -: 1002:}
        -: 1003:
        -: 1004:// Gets the number of skipped tests.
function _ZNK7testing8internal12UnitTestImpl18skipped_test_countEv called 1 returned 100% blocks executed 100%
        1: 1005:int UnitTestImpl::skipped_test_count() const {
        1: 1006:  return SumOverTestSuiteList(test_suites_, &TestSuite::skipped_test_count);
        1: 1006-block  0
call    0 returned 1
        -: 1007:}
        -: 1008:
        -: 1009:// Gets the number of failed tests.
function _ZNK7testing8internal12UnitTestImpl17failed_test_countEv called 0 returned 0% blocks executed 0%
    #####: 1010:int UnitTestImpl::failed_test_count() const {
    #####: 1011:  return SumOverTestSuiteList(test_suites_, &TestSuite::failed_test_count);
    %%%%%: 1011-block  0
call    0 never executed
        -: 1012:}
        -: 1013:
        -: 1014:// Gets the number of disabled tests that will be reported in the XML report.
function _ZNK7testing8internal12UnitTestImpl30reportable_disabled_test_countEv called 1 returned 100% blocks executed 100%
        1: 1015:int UnitTestImpl::reportable_disabled_test_count() const {
        1: 1016:  return SumOverTestSuiteList(test_suites_,
        1: 1016-block  0
call    0 returned 1
        1: 1017:                              &TestSuite::reportable_disabled_test_count);
        -: 1018:}
        -: 1019:
        -: 1020:// Gets the number of disabled tests.
function _ZNK7testing8internal12UnitTestImpl19disabled_test_countEv called 0 returned 0% blocks executed 0%
    #####: 1021:int UnitTestImpl::disabled_test_count() const {
    #####: 1022:  return SumOverTestSuiteList(test_suites_, &TestSuite::disabled_test_count);
    %%%%%: 1022-block  0
call    0 never executed
        -: 1023:}
        -: 1024:
        -: 1025:// Gets the number of tests to be printed in the XML report.
function _ZNK7testing8internal12UnitTestImpl21reportable_test_countEv called 0 returned 0% blocks executed 0%
    #####: 1026:int UnitTestImpl::reportable_test_count() const {
    #####: 1027:  return SumOverTestSuiteList(test_suites_, &TestSuite::reportable_test_count);
    %%%%%: 1027-block  0
call    0 never executed
        -: 1028:}
        -: 1029:
        -: 1030:// Gets the number of all tests.
function _ZNK7testing8internal12UnitTestImpl16total_test_countEv called 0 returned 0% blocks executed 0%
    #####: 1031:int UnitTestImpl::total_test_count() const {
    #####: 1032:  return SumOverTestSuiteList(test_suites_, &TestSuite::total_test_count);
    %%%%%: 1032-block  0
call    0 never executed
        -: 1033:}
        -: 1034:
        -: 1035:// Gets the number of tests that should run.
function _ZNK7testing8internal12UnitTestImpl17test_to_run_countEv called 2 returned 100% blocks executed 100%
        2: 1036:int UnitTestImpl::test_to_run_count() const {
        2: 1037:  return SumOverTestSuiteList(test_suites_, &TestSuite::test_to_run_count);
        2: 1037-block  0
call    0 returned 2
        -: 1038:}
        -: 1039:
        -: 1040:// Returns the current OS stack trace as an std::string.
        -: 1041://
        -: 1042:// The maximum number of stack frames to be included is specified by
        -: 1043:// the gtest_stack_trace_depth flag.  The skip_count parameter
        -: 1044:// specifies the number of top frames to be skipped, which doesn't
        -: 1045:// count against the number of frames to be included.
        -: 1046://
        -: 1047:// For example, if Foo() calls Bar(), which in turn calls
        -: 1048:// CurrentOsStackTraceExceptTop(1), Foo() will be included in the
        -: 1049:// trace but Bar() and CurrentOsStackTraceExceptTop() won't.
function _ZN7testing8internal12UnitTestImpl28CurrentOsStackTraceExceptTopB5cxx11Ei called 0 returned 0% blocks executed 0%
    #####: 1050:std::string UnitTestImpl::CurrentOsStackTraceExceptTop(int skip_count) {
    #####: 1051:  return os_stack_trace_getter()->CurrentStackTrace(
    %%%%%: 1051-block  0
call    0 never executed
        -: 1052:      static_cast<int>(GTEST_FLAG_GET(stack_trace_depth)), skip_count + 1
        -: 1053:      // Skips the user-specified number of frames plus this function
        -: 1054:      // itself.
    #####: 1055:  );  // NOLINT
call    0 never executed
        -: 1056:}
        -: 1057:
        -: 1058:// A helper class for measuring elapsed times.
        -: 1059:class Timer {
        -: 1060: public:
function _ZN7testing8internal5TimerC1Ev called 47 returned 100% blocks executed 100%
       47: 1061:  Timer() : start_(std::chrono::steady_clock::now()) {}
       47: 1061-block  0
call    0 returned 47
        -: 1062:
        -: 1063:  // Return time elapsed in milliseconds since the timer was created.
function _ZN7testing8internal5Timer7ElapsedEv called 47 returned 100% blocks executed 88%
       47: 1064:  TimeInMillis Elapsed() {
       47: 1065:    return std::chrono::duration_cast<std::chrono::milliseconds>(
       94: 1066:               std::chrono::steady_clock::now() - start_)
       47: 1066-block  0
call    0 returned 47
call    1 returned 47
branch  2 taken 47 (fallthrough)
branch  3 taken 0 (throw)
       47: 1066-block  1
call    4 returned 47
branch  5 taken 47 (fallthrough)
branch  6 taken 0 (throw)
    $$$$$: 1066-block  2
       94: 1067:        .count();
       47: 1067-block  0
call    0 returned 47
       47: 1067-block  1
        -: 1068:  }
        -: 1069:
        -: 1070: private:
        -: 1071:  std::chrono::steady_clock::time_point start_;
        -: 1072:};
        -: 1073:
        -: 1074:// Returns a timestamp as milliseconds since the epoch. Note this time may jump
        -: 1075:// around subject to adjustments by the system, to measure elapsed time use
        -: 1076:// Timer instead.
function _ZN7testing8internal15GetTimeInMillisEv called 47 returned 100% blocks executed 80%
       47: 1077:TimeInMillis GetTimeInMillis() {
       47: 1078:  return std::chrono::duration_cast<std::chrono::milliseconds>(
       47: 1079:             std::chrono::system_clock::now() -
call    0 returned 47
    $$$$$: 1079-block  0
    $$$$$: 1079-block  1
      141: 1080:             std::chrono::system_clock::from_time_t(0))
       47: 1080-block  0
call    0 returned 47
call    1 returned 47
call    2 returned 47
branch  3 taken 47 (fallthrough)
branch  4 taken 0 (throw)
       94: 1081:      .count();
       47: 1081-block  0
call    0 returned 47
       47: 1081-block  1
        -: 1082:}
        -: 1083:
        -: 1084:// Utilities
        -: 1085:
        -: 1086:// class String.
        -: 1087:
        -: 1088:#if GTEST_OS_WINDOWS_MOBILE
        -: 1089:// Creates a UTF-16 wide string from the given ANSI string, allocating
        -: 1090:// memory using new. The caller is responsible for deleting the return
        -: 1091:// value using delete[]. Returns the wide string, or NULL if the
        -: 1092:// input is NULL.
        -: 1093:LPCWSTR String::AnsiToUtf16(const char* ansi) {
        -: 1094:  if (!ansi) return nullptr;
        -: 1095:  const int length = strlen(ansi);
        -: 1096:  const int unicode_length =
        -: 1097:      MultiByteToWideChar(CP_ACP, 0, ansi, length, nullptr, 0);
        -: 1098:  WCHAR* unicode = new WCHAR[unicode_length + 1];
        -: 1099:  MultiByteToWideChar(CP_ACP, 0, ansi, length,
        -: 1100:                      unicode, unicode_length);
        -: 1101:  unicode[unicode_length] = 0;
        -: 1102:  return unicode;
        -: 1103:}
        -: 1104:
        -: 1105:// Creates an ANSI string from the given wide string, allocating
        -: 1106:// memory using new. The caller is responsible for deleting the return
        -: 1107:// value using delete[]. Returns the ANSI string, or NULL if the
        -: 1108:// input is NULL.
        -: 1109:const char* String::Utf16ToAnsi(LPCWSTR utf16_str)  {
        -: 1110:  if (!utf16_str) return nullptr;
        -: 1111:  const int ansi_length = WideCharToMultiByte(CP_ACP, 0, utf16_str, -1, nullptr,
        -: 1112:                                              0, nullptr, nullptr);
        -: 1113:  char* ansi = new char[ansi_length + 1];
        -: 1114:  WideCharToMultiByte(CP_ACP, 0, utf16_str, -1, ansi, ansi_length, nullptr,
        -: 1115:                      nullptr);
        -: 1116:  ansi[ansi_length] = 0;
        -: 1117:  return ansi;
        -: 1118:}
        -: 1119:
        -: 1120:#endif  // GTEST_OS_WINDOWS_MOBILE
        -: 1121:
        -: 1122:// Compares two C strings.  Returns true if and only if they have the same
        -: 1123:// content.
        -: 1124://
        -: 1125:// Unlike strcmp(), this function can handle NULL argument(s).  A NULL
        -: 1126:// C string is considered different to any non-NULL C string,
        -: 1127:// including the empty string.
function _ZN7testing8internal6String13CStringEqualsEPKcS3_ called 2 returned 100% blocks executed 67%
        2: 1128:bool String::CStringEquals(const char * lhs, const char * rhs) {
       2*: 1129:  if (lhs == nullptr) return rhs == nullptr;
        2: 1129-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    %%%%%: 1129-block  1
        -: 1130:
       2*: 1131:  if (rhs == nullptr) return false;
        2: 1131-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    %%%%%: 1131-block  1
        -: 1132:
        2: 1133:  return strcmp(lhs, rhs) == 0;
        2: 1133-block  0
        -: 1134:}
        -: 1135:
        -: 1136:#if GTEST_HAS_STD_WSTRING
        -: 1137:
        -: 1138:// Converts an array of wide chars to a narrow string using the UTF-8
        -: 1139:// encoding, and streams the result to the given Message object.
function _ZN7testing8internalL24StreamWideCharsToMessageEPKwjPNS_7MessageE called 0 returned 0% blocks executed 0%
    #####: 1140:static void StreamWideCharsToMessage(const wchar_t* wstr, size_t length,
        -: 1141:                                     Message* msg) {
    #####: 1142:  for (size_t i = 0; i != length; ) {  // NOLINT
    %%%%%: 1142-block  0
    %%%%%: 1142-block  1
branch  0 never executed
branch  1 never executed
    %%%%%: 1142-block  2
    #####: 1143:    if (wstr[i] != L'\0') {
    %%%%%: 1143-block  0
branch  0 never executed
branch  1 never executed
    #####: 1144:      *msg << WideStringToUtf8(wstr + i, static_cast<int>(length - i));
    %%%%%: 1144-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1144-block  1
call    4 never executed
    $$$$$: 1144-block  2
call    5 never executed
    $$$$$: 1144-block  3
call    6 never executed
    #####: 1145:      while (i != length && wstr[i] != L'\0')
    %%%%%: 1145-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1145-block  1
branch  2 never executed
branch  3 never executed
    #####: 1146:        i++;
    %%%%%: 1146-block  0
        -: 1147:    } else {
    #####: 1148:      *msg << '\0';
    %%%%%: 1148-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1149:      i++;
    %%%%%: 1149-block  0
        -: 1150:    }
        -: 1151:  }
    #####: 1152:}
    %%%%%: 1152-block  0
        -: 1153:
        -: 1154:#endif  // GTEST_HAS_STD_WSTRING
        -: 1155:
function _ZN7testing8internal11SplitStringERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcPSt6vectorIS6_SaIS6_EE called 0 returned 0% blocks executed 0%
    #####: 1156:void SplitString(const ::std::string& str, char delimiter,
        -: 1157:                 ::std::vector< ::std::string>* dest) {
    #####: 1158:  ::std::vector< ::std::string> parsed;
    %%%%%: 1158-block  0
call    0 never executed
call    1 never executed
    $$$$$: 1158-block  1
call    2 never executed
    #####: 1159:  ::std::string::size_type pos = 0;
    #####: 1160:  while (::testing::internal::AlwaysTrue()) {
    %%%%%: 1160-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1160-block  1
branch  3 never executed
branch  4 never executed
    #####: 1161:    const ::std::string::size_type colon = str.find(delimiter, pos);
    %%%%%: 1161-block  0
call    0 never executed
    #####: 1162:    if (colon == ::std::string::npos) {
branch  0 never executed
branch  1 never executed
    #####: 1163:      parsed.push_back(str.substr(pos));
    %%%%%: 1163-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1163-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1163-block  2
call    6 never executed
    $$$$$: 1163-block  3
call    7 never executed
    $$$$$: 1163-block  4
    #####: 1164:      break;
        -: 1165:    } else {
    #####: 1166:      parsed.push_back(str.substr(pos, colon - pos));
    %%%%%: 1166-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1166-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1166-block  2
call    6 never executed
    $$$$$: 1166-block  3
call    7 never executed
    $$$$$: 1166-block  4
    #####: 1167:      pos = colon + 1;
        -: 1168:    }
        -: 1169:  }
    #####: 1170:  dest->swap(parsed);
    %%%%%: 1170-block  0
call    0 never executed
    #####: 1171:}
        -: 1172:
        -: 1173:}  // namespace internal
        -: 1174:
        -: 1175:// Constructs an empty Message.
        -: 1176:// We allocate the stringstream separately because otherwise each use of
        -: 1177:// ASSERT/EXPECT in a procedure adds over 200 bytes to the procedure's
        -: 1178:// stack frame leading to huge stack frames in some cases; gcc does not reuse
        -: 1179:// the stack space.
function _ZN7testing7MessageC2Ev called 143 returned 100% blocks executed 75%
      143: 1180:Message::Message() : ss_(new ::std::stringstream) {
      143: 1180-block  0
call    0 returned 143
call    1 returned 143
call    2 returned 143
branch  3 taken 143 (fallthrough)
branch  4 taken 0 (throw)
      143: 1180-block  1
call    5 returned 143
    $$$$$: 1180-block  2
call    6 never executed
    $$$$$: 1180-block  3
call    7 never executed
        -: 1181:  // By default, we want there to be enough precision when printing
        -: 1182:  // a double to a Message.
      143: 1183:  *ss_ << std::setprecision(std::numeric_limits<double>::digits10 + 2);
call    0 returned 143
call    1 returned 143
call    2 returned 143
branch  3 taken 143 (fallthrough)
branch  4 taken 0 (throw)
      143: 1184:}
      143: 1184-block  0
        -: 1185:
        -: 1186:// These two overloads allow streaming a wide C string to a Message
        -: 1187:// using the UTF-8 encoding.
function _ZN7testing7MessagelsEPKw called 0 returned 0% blocks executed 0%
    #####: 1188:Message& Message::operator <<(const wchar_t* wide_c_str) {
    #####: 1189:  return *this << internal::String::ShowWideCString(wide_c_str);
    %%%%%: 1189-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1189-block  1
call    4 never executed
    %%%%%: 1189-block  2
    $$$$$: 1189-block  3
call    5 never executed
        -: 1190:}
function _ZN7testing7MessagelsEPw called 0 returned 0% blocks executed 0%
    #####: 1191:Message& Message::operator <<(wchar_t* wide_c_str) {
    #####: 1192:  return *this << internal::String::ShowWideCString(wide_c_str);
    %%%%%: 1192-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1192-block  1
call    4 never executed
    %%%%%: 1192-block  2
    $$$$$: 1192-block  3
call    5 never executed
        -: 1193:}
        -: 1194:
        -: 1195:#if GTEST_HAS_STD_WSTRING
        -: 1196:// Converts the given wide string to a narrow string using the UTF-8
        -: 1197:// encoding, and streams the result to this Message object.
function _ZN7testing7MessagelsERKNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEE called 0 returned 0% blocks executed 0%
    #####: 1198:Message& Message::operator <<(const ::std::wstring& wstr) {
    #####: 1199:  internal::StreamWideCharsToMessage(wstr.c_str(), wstr.length(), this);
    %%%%%: 1199-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1200:  return *this;
        -: 1201:}
        -: 1202:#endif  // GTEST_HAS_STD_WSTRING
        -: 1203:
        -: 1204:// Gets the text streamed to this object so far as an std::string.
        -: 1205:// Each '\0' character in the buffer is replaced with "\\0".
function _ZNK7testing7Message9GetStringB5cxx11Ev called 143 returned 100% blocks executed 100%
      143: 1206:std::string Message::GetString() const {
      143: 1207:  return internal::StringStreamToString(ss_.get());
      143: 1207-block  0
call    0 returned 143
call    1 returned 143
        -: 1208:}
        -: 1209:
        -: 1210:// AssertionResult constructors.
        -: 1211:// Used in EXPECT_TRUE/FALSE(assertion_result).
function _ZN7testing15AssertionResultC2ERKS0_ called 0 returned 0% blocks executed 0%
    #####: 1212:AssertionResult::AssertionResult(const AssertionResult& other)
    #####: 1213:    : success_(other.success_),
    #####: 1214:      message_(other.message_.get() != nullptr
    #####: 1215:                   ? new ::std::string(*other.message_)
    %%%%%: 1215-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    $$$$$: 1215-block  1
call    5 never executed
    #####: 1216:                   : static_cast< ::std::string*>(nullptr)) {}
    %%%%%: 1216-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1216-block  1
    %%%%%: 1216-block  2
    %%%%%: 1216-block  3
call    3 never executed
        -: 1217:
        -: 1218:// Swaps two AssertionResults.
function _ZN7testing15AssertionResult4swapERS0_ called 0 returned 0% blocks executed 0%
    #####: 1219:void AssertionResult::swap(AssertionResult& other) {
        -: 1220:  using std::swap;
    #####: 1221:  swap(success_, other.success_);
    %%%%%: 1221-block  0
call    0 never executed
    #####: 1222:  swap(message_, other.message_);
call    0 never executed
    #####: 1223:}
        -: 1224:
        -: 1225:// Returns the assertion's negation. Used with EXPECT/ASSERT_FALSE.
function _ZNK7testing15AssertionResultntEv called 0 returned 0% blocks executed 0%
    #####: 1226:AssertionResult AssertionResult::operator!() const {
    #####: 1227:  AssertionResult negation(!success_);
    %%%%%: 1227-block  0
call    0 never executed
    #####: 1228:  if (message_.get() != nullptr) negation << *message_;
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1228-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1229:  return negation;
    %%%%%: 1229-block  0
    %%%%%: 1229-block  1
        -: 1230:}
        -: 1231:
        -: 1232:// Makes a successful assertion result.
function _ZN7testing16AssertionSuccessEv called 497 returned 100% blocks executed 100%
      497: 1233:AssertionResult AssertionSuccess() {
      497: 1234:  return AssertionResult(true);
      497: 1234-block  0
call    0 returned 497
        -: 1235:}
        -: 1236:
        -: 1237:// Makes a failed assertion result.
function _ZN7testing16AssertionFailureEv called 0 returned 0% blocks executed 0%
    #####: 1238:AssertionResult AssertionFailure() {
    #####: 1239:  return AssertionResult(false);
    %%%%%: 1239-block  0
call    0 never executed
        -: 1240:}
        -: 1241:
        -: 1242:// Makes a failed assertion result with the given failure message.
        -: 1243:// Deprecated; use AssertionFailure() << message.
function _ZN7testing16AssertionFailureERKNS_7MessageE called 0 returned 0% blocks executed 0%
    #####: 1244:AssertionResult AssertionFailure(const Message& message) {
    #####: 1245:  return AssertionFailure() << message;
    %%%%%: 1245-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1245-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 1245-block  2
    %%%%%: 1245-block  3
call    7 never executed
    %%%%%: 1245-block  4
    $$$$$: 1245-block  5
call    8 never executed
        -: 1246:}
        -: 1247:
        -: 1248:namespace internal {
        -: 1249:
        -: 1250:namespace edit_distance {
function _ZN7testing8internal13edit_distance21CalculateOptimalEditsERKSt6vectorIjSaIjEES6_ called 0 returned 0% blocks executed 0%
    #####: 1251:std::vector<EditType> CalculateOptimalEdits(const std::vector<size_t>& left,
        -: 1252:                                            const std::vector<size_t>& right) {
        -: 1253:  std::vector<std::vector<double> > costs(
    #####: 1254:      left.size() + 1, std::vector<double>(right.size() + 1));
    %%%%%: 1254-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1254-block  1
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    $$$$$: 1254-block  2
    $$$$$: 1254-block  3
    $$$$$: 1254-block  4
    $$$$$: 1254-block  5
call   13 never executed
        -: 1255:  std::vector<std::vector<EditType> > best_move(
    #####: 1256:      left.size() + 1, std::vector<EditType>(right.size() + 1));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1256-block  0
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
    %%%%%: 1256-block  1
call   12 never executed
    $$$$$: 1256-block  2
    $$$$$: 1256-block  3
    $$$$$: 1256-block  4
    $$$$$: 1256-block  5
call   13 never executed
        -: 1257:
        -: 1258:  // Populate for empty right.
    #####: 1259:  for (size_t l_i = 0; l_i < costs.size(); ++l_i) {
    %%%%%: 1259-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1260:    costs[l_i][0] = static_cast<double>(l_i);
    %%%%%: 1260-block  0
call    0 never executed
call    1 never executed
    #####: 1261:    best_move[l_i][0] = kRemove;
call    0 never executed
call    1 never executed
        -: 1262:  }
        -: 1263:  // Populate for empty left.
    #####: 1264:  for (size_t r_i = 1; r_i < costs[0].size(); ++r_i) {
    %%%%%: 1264-block  0
    %%%%%: 1264-block  1
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1265:    costs[0][r_i] = static_cast<double>(r_i);
    %%%%%: 1265-block  0
call    0 never executed
call    1 never executed
    #####: 1266:    best_move[0][r_i] = kAdd;
call    0 never executed
call    1 never executed
        -: 1267:  }
        -: 1268:
    #####: 1269:  for (size_t l_i = 0; l_i < left.size(); ++l_i) {
    %%%%%: 1269-block  0
    %%%%%: 1269-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1269-block  2
    #####: 1270:    for (size_t r_i = 0; r_i < right.size(); ++r_i) {
    %%%%%: 1270-block  0
    %%%%%: 1270-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1270-block  2
    #####: 1271:      if (left[l_i] == right[r_i]) {
    %%%%%: 1271-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1272:        // Found a match. Consume it.
    #####: 1273:        costs[l_i + 1][r_i + 1] = costs[l_i][r_i];
    %%%%%: 1273-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 1274:        best_move[l_i + 1][r_i + 1] = kMatch;
call    0 never executed
call    1 never executed
    #####: 1275:        continue;
        -: 1276:      }
        -: 1277:
    #####: 1278:      const double add = costs[l_i + 1][r_i];
    %%%%%: 1278-block  0
call    0 never executed
call    1 never executed
    #####: 1279:      const double remove = costs[l_i][r_i + 1];
call    0 never executed
call    1 never executed
    #####: 1280:      const double replace = costs[l_i][r_i];
call    0 never executed
call    1 never executed
    #####: 1281:      if (add < remove && add < replace) {
branch  0 never executed
branch  1 never executed
    %%%%%: 1281-block  0
branch  2 never executed
branch  3 never executed
    #####: 1282:        costs[l_i + 1][r_i + 1] = add + 1;
    %%%%%: 1282-block  0
call    0 never executed
call    1 never executed
    #####: 1283:        best_move[l_i + 1][r_i + 1] = kAdd;
call    0 never executed
call    1 never executed
    #####: 1284:      } else if (remove < add && remove < replace) {
    %%%%%: 1284-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1284-block  1
branch  2 never executed
branch  3 never executed
    #####: 1285:        costs[l_i + 1][r_i + 1] = remove + 1;
    %%%%%: 1285-block  0
call    0 never executed
call    1 never executed
    #####: 1286:        best_move[l_i + 1][r_i + 1] = kRemove;
call    0 never executed
call    1 never executed
        -: 1287:      } else {
        -: 1288:        // We make replace a little more expensive than add/remove to lower
        -: 1289:        // their priority.
    #####: 1290:        costs[l_i + 1][r_i + 1] = replace + 1.00001;
    %%%%%: 1290-block  0
call    0 never executed
call    1 never executed
    #####: 1291:        best_move[l_i + 1][r_i + 1] = kReplace;
call    0 never executed
call    1 never executed
        -: 1292:      }
        -: 1293:    }
        -: 1294:  }
        -: 1295:
        -: 1296:  // Reconstruct the best path. We do it in reverse order.
    #####: 1297:  std::vector<EditType> best_path;
    %%%%%: 1297-block  0
call    0 never executed
    #####: 1298:  for (size_t l_i = left.size(), r_i = right.size(); l_i > 0 || r_i > 0;) {
call    0 never executed
call    1 never executed
    %%%%%: 1298-block  0
branch  2 never executed
branch  3 never executed
    %%%%%: 1298-block  1
branch  4 never executed
branch  5 never executed
    #####: 1299:    EditType move = best_move[l_i][r_i];
    %%%%%: 1299-block  0
call    0 never executed
call    1 never executed
    #####: 1300:    best_path.push_back(move);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1301:    l_i -= move != kAdd;
    #####: 1302:    r_i -= move != kRemove;
    %%%%%: 1302-block  0
        -: 1303:  }
    #####: 1304:  std::reverse(best_path.begin(), best_path.end());
    %%%%%: 1304-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1305:  return best_path;
    %%%%%: 1305-block  0
    %%%%%: 1305-block  1
        -: 1306:}
        -: 1307:
        -: 1308:namespace {
        -: 1309:
        -: 1310:// Helper class to convert string into ids with deduplication.
        -: 1311:class InternalStrings {
        -: 1312: public:
function _ZN7testing8internal13edit_distance12_GLOBAL__N_115InternalStrings5GetIdERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 1313:  size_t GetId(const std::string& str) {
    #####: 1314:    IdMap::iterator it = ids_.find(str);
    %%%%%: 1314-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1315:    if (it != ids_.end()) return it->second;
    %%%%%: 1315-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1315-block  1
call    4 never executed
    #####: 1316:    size_t id = ids_.size();
    %%%%%: 1316-block  0
call    0 never executed
    #####: 1317:    return ids_[str] = id;
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1317-block  0
        -: 1318:  }
        -: 1319:
        -: 1320: private:
        -: 1321:  typedef std::map<std::string, size_t> IdMap;
        -: 1322:  IdMap ids_;
        -: 1323:};
        -: 1324:
        -: 1325:}  // namespace
        -: 1326:
function _ZN7testing8internal13edit_distance21CalculateOptimalEditsERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS8_EESC_ called 0 returned 0% blocks executed 0%
    #####: 1327:std::vector<EditType> CalculateOptimalEdits(
        -: 1328:    const std::vector<std::string>& left,
        -: 1329:    const std::vector<std::string>& right) {
    #####: 1330:  std::vector<size_t> left_ids, right_ids;
    %%%%%: 1330-block  0
call    0 never executed
call    1 never executed
    %%%%%: 1330-block  1
call    2 never executed
call    3 never executed
    $$$$$: 1330-block  2
call    4 never executed
    $$$$$: 1330-block  3
call    5 never executed
        -: 1331:  {
    #####: 1332:    InternalStrings intern_table;
call    0 never executed
    %%%%%: 1332-block  0
call    1 never executed
    $$$$$: 1332-block  1
call    2 never executed
    #####: 1333:    for (size_t i = 0; i < left.size(); ++i) {
    %%%%%: 1333-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1334:      left_ids.push_back(intern_table.GetId(left[i]));
    %%%%%: 1334-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1334-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 1334-block  2
    $$$$$: 1334-block  3
        -: 1335:    }
    #####: 1336:    for (size_t i = 0; i < right.size(); ++i) {
    %%%%%: 1336-block  0
    %%%%%: 1336-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1337:      right_ids.push_back(intern_table.GetId(right[i]));
    %%%%%: 1337-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1337-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 1337-block  2
    $$$$$: 1337-block  3
        -: 1338:    }
        -: 1339:  }
    #####: 1340:  return CalculateOptimalEdits(left_ids, right_ids);
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1340-block  0
    %%%%%: 1340-block  1
        -: 1341:}
        -: 1342:
        -: 1343:namespace {
        -: 1344:
        -: 1345:// Helper class that holds the state for one hunk and prints it out to the
        -: 1346:// stream.
        -: 1347:// It reorders adds/removes when possible to group all removes before all
        -: 1348:// adds. It also adds the hunk header before printint into the stream.
        -: 1349:class Hunk {
        -: 1350: public:
function _ZN7testing8internal13edit_distance12_GLOBAL__N_14HunkC2Ejj called 0 returned 0% blocks executed 0%
    #####: 1351:  Hunk(size_t left_start, size_t right_start)
    #####: 1352:      : left_start_(left_start),
        -: 1353:        right_start_(right_start),
        -: 1354:        adds_(),
        -: 1355:        removes_(),
    #####: 1356:        common_() {}
    %%%%%: 1356-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -: 1357:
function _ZN7testing8internal13edit_distance12_GLOBAL__N_14Hunk8PushLineEcPKc called 0 returned 0% blocks executed 0%
    #####: 1358:  void PushLine(char edit, const char* line) {
    #####: 1359:    switch (edit) {
    %%%%%: 1359-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1360:      case ' ':
    #####: 1361:        ++common_;
    #####: 1362:        FlushEdits();
    %%%%%: 1362-block  0
call    0 never executed
    #####: 1363:        hunk_.push_back(std::make_pair(' ', line));
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1363-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 1363-block  1
    $$$$$: 1363-block  2
call    6 never executed
    #####: 1364:        break;
    %%%%%: 1364-block  0
    #####: 1365:      case '-':
    #####: 1366:        ++removes_;
    #####: 1367:        hunk_removes_.push_back(std::make_pair('-', line));
    %%%%%: 1367-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1367-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 1367-block  2
    $$$$$: 1367-block  3
call    6 never executed
    #####: 1368:        break;
    %%%%%: 1368-block  0
    #####: 1369:      case '+':
    #####: 1370:        ++adds_;
    #####: 1371:        hunk_adds_.push_back(std::make_pair('+', line));
    %%%%%: 1371-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1371-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 1371-block  2
    #####: 1372:        break;
    %%%%%: 1372-block  0
        -: 1373:    }
    #####: 1374:  }
    %%%%%: 1374-block  0
        -: 1375:
function _ZN7testing8internal13edit_distance12_GLOBAL__N_14Hunk7PrintToEPSo called 0 returned 0% blocks executed 0%
    #####: 1376:  void PrintTo(std::ostream* os) {
    #####: 1377:    PrintHeader(os);
    %%%%%: 1377-block  0
call    0 never executed
    #####: 1378:    FlushEdits();
call    0 never executed
    #####: 1379:    for (std::list<std::pair<char, const char*> >::const_iterator it =
    #####: 1380:             hunk_.begin();
call    0 never executed
call    1 never executed
    #####: 1381:         it != hunk_.end(); ++it) {
    %%%%%: 1381-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 1381-block  1
call    5 never executed
    #####: 1382:      *os << it->first << it->second << "\n";
    %%%%%: 1382-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1382-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1382-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
        -: 1383:    }
    #####: 1384:  }
    %%%%%: 1384-block  0
        -: 1385:
function _ZNK7testing8internal13edit_distance12_GLOBAL__N_14Hunk9has_editsEv called 0 returned 0% blocks executed 0%
    #####: 1386:  bool has_edits() const { return adds_ || removes_; }
    %%%%%: 1386-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1386-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 1386-block  2
    %%%%%: 1386-block  3
    %%%%%: 1386-block  4
        -: 1387:
        -: 1388: private:
function _ZN7testing8internal13edit_distance12_GLOBAL__N_14Hunk10FlushEditsEv called 0 returned 0% blocks executed 0%
    #####: 1389:  void FlushEdits() {
    #####: 1390:    hunk_.splice(hunk_.end(), hunk_removes_);
    %%%%%: 1390-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1391:    hunk_.splice(hunk_.end(), hunk_adds_);
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1392:  }
        -: 1393:
        -: 1394:  // Print a unified diff header for one hunk.
        -: 1395:  // The format is
        -: 1396:  //   "@@ -<left_start>,<left_length> +<right_start>,<right_length> @@"
        -: 1397:  // where the left/right parts are omitted if unnecessary.
function _ZNK7testing8internal13edit_distance12_GLOBAL__N_14Hunk11PrintHeaderEPSo called 0 returned 0% blocks executed 0%
    #####: 1398:  void PrintHeader(std::ostream* ss) const {
    #####: 1399:    *ss << "@@ ";
    %%%%%: 1399-block  0
call    0 never executed
    #####: 1400:    if (removes_) {
branch  0 never executed
branch  1 never executed
    #####: 1401:      *ss << "-" << left_start_ << "," << (removes_ + common_);
    %%%%%: 1401-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1402:    }
    #####: 1403:    if (removes_ && adds_) {
    %%%%%: 1403-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1403-block  1
branch  2 never executed
branch  3 never executed
    #####: 1404:      *ss << " ";
    %%%%%: 1404-block  0
call    0 never executed
        -: 1405:    }
    #####: 1406:    if (adds_) {
    %%%%%: 1406-block  0
branch  0 never executed
branch  1 never executed
    #####: 1407:      *ss << "+" << right_start_ << "," << (adds_ + common_);
    %%%%%: 1407-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1408:    }
    #####: 1409:    *ss << " @@\n";
    %%%%%: 1409-block  0
call    0 never executed
    #####: 1410:  }
        -: 1411:
        -: 1412:  size_t left_start_, right_start_;
        -: 1413:  size_t adds_, removes_, common_;
        -: 1414:  std::list<std::pair<char, const char*> > hunk_, hunk_adds_, hunk_removes_;
        -: 1415:};
        -: 1416:
        -: 1417:}  // namespace
        -: 1418:
        -: 1419:// Create a list of diff hunks in Unified diff format.
        -: 1420:// Each hunk has a header generated by PrintHeader above plus a body with
        -: 1421:// lines prefixed with ' ' for no change, '-' for deletion and '+' for
        -: 1422:// addition.
        -: 1423:// 'context' represents the desired unchanged prefix/suffix around the diff.
        -: 1424:// If two hunks are close enough that their contexts overlap, then they are
        -: 1425:// joined into one hunk.
function _ZN7testing8internal13edit_distance17CreateUnifiedDiffERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS8_EESC_j called 0 returned 0% blocks executed 0%
    #####: 1426:std::string CreateUnifiedDiff(const std::vector<std::string>& left,
        -: 1427:                              const std::vector<std::string>& right,
        -: 1428:                              size_t context) {
    #####: 1429:  const std::vector<EditType> edits = CalculateOptimalEdits(left, right);
    %%%%%: 1429-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$: 1429-block  1
call    4 never executed
        -: 1430:
    #####: 1431:  size_t l_i = 0, r_i = 0, edit_i = 0;
    #####: 1432:  std::stringstream ss;
    %%%%%: 1432-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1432-block  1
call    4 never executed
    $$$$$: 1432-block  2
call    5 never executed
    #####: 1433:  while (edit_i < edits.size()) {
    %%%%%: 1433-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1433-block  1
        -: 1434:    // Find first edit.
    #####: 1435:    while (edit_i < edits.size() && edits[edit_i] == kMatch) {
    %%%%%: 1435-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1435-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1435-block  2
    %%%%%: 1435-block  3
    %%%%%: 1435-block  4
branch  6 never executed
branch  7 never executed
    #####: 1436:      ++l_i;
    #####: 1437:      ++r_i;
    #####: 1438:      ++edit_i;
    %%%%%: 1438-block  0
        -: 1439:    }
        -: 1440:
        -: 1441:    // Find the first line to include in the hunk.
    #####: 1442:    const size_t prefix_context = std::min(l_i, context);
    %%%%%: 1442-block  0
call    0 never executed
    #####: 1443:    Hunk hunk(l_i - prefix_context + 1, r_i - prefix_context + 1);
call    0 never executed
    $$$$$: 1443-block  0
call    1 never executed
    #####: 1444:    for (size_t i = prefix_context; i > 0; --i) {
    %%%%%: 1444-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1444-block  1
    #####: 1445:      hunk.PushLine(' ', left[l_i - i].c_str());
    %%%%%: 1445-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 1446:    }
        -: 1447:
        -: 1448:    // Iterate the edits until we found enough suffix for the hunk or the input
        -: 1449:    // is over.
    #####: 1450:    size_t n_suffix = 0;
    %%%%%: 1450-block  0
    #####: 1451:    for (; edit_i < edits.size(); ++edit_i) {
    %%%%%: 1451-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1452:      if (n_suffix >= context) {
    %%%%%: 1452-block  0
branch  0 never executed
branch  1 never executed
        -: 1453:        // Continue only if the next hunk is very close.
    #####: 1454:        auto it = edits.begin() + static_cast<int>(edit_i);
    %%%%%: 1454-block  0
call    0 never executed
call    1 never executed
    #####: 1455:        while (it != edits.end() && *it == kMatch) ++it;
    %%%%%: 1455-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1455-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 1455-block  2
    %%%%%: 1455-block  3
    %%%%%: 1455-block  4
branch  7 never executed
branch  8 never executed
    %%%%%: 1455-block  5
call    9 never executed
    #####: 1456:        if (it == edits.end() ||
    %%%%%: 1456-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1456-block  1
    %%%%%: 1456-block  2
    #####: 1457:            static_cast<size_t>(it - edits.begin()) - edit_i >= context) {
    %%%%%: 1457-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1457-block  1
branch  4 never executed
branch  5 never executed
        -: 1458:          // There is no next edit or it is too far away.
    #####: 1459:          break;
    %%%%%: 1459-block  0
        -: 1460:        }
        -: 1461:      }
        -: 1462:
    #####: 1463:      EditType edit = edits[edit_i];
    %%%%%: 1463-block  0
call    0 never executed
        -: 1464:      // Reset count when a non match is found.
    #####: 1465:      n_suffix = edit == kMatch ? n_suffix + 1 : 0;
branch  0 never executed
branch  1 never executed
    %%%%%: 1465-block  0
    %%%%%: 1465-block  1
        -: 1466:
    #####: 1467:      if (edit == kMatch || edit == kRemove || edit == kReplace) {
    %%%%%: 1467-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1467-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 1467-block  2
branch  4 never executed
branch  5 never executed
    #####: 1468:        hunk.PushLine(edit == kMatch ? ' ' : '-', left[l_i].c_str());
    %%%%%: 1468-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1468-block  1
    %%%%%: 1468-block  2
    %%%%%: 1468-block  3
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 1469:      }
    #####: 1470:      if (edit == kAdd || edit == kReplace) {
    %%%%%: 1470-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1470-block  1
branch  2 never executed
branch  3 never executed
    #####: 1471:        hunk.PushLine('+', right[r_i].c_str());
    %%%%%: 1471-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 1472:      }
        -: 1473:
        -: 1474:      // Advance indices, depending on edit type.
    #####: 1475:      l_i += edit != kAdd;
    #####: 1476:      r_i += edit != kRemove;
    %%%%%: 1476-block  0
        -: 1477:    }
        -: 1478:
    #####: 1479:    if (!hunk.has_edits()) {
    %%%%%: 1479-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1480:      // We are done. We don't want this hunk.
    #####: 1481:      break;
    %%%%%: 1481-block  0
        -: 1482:    }
        -: 1483:
    #####: 1484:    hunk.PrintTo(&ss);
    %%%%%: 1484-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1485:  }
    #####: 1486:  return ss.str();
    %%%%%: 1486-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1486-block  1
    %%%%%: 1486-block  2
        -: 1487:}
        -: 1488:
        -: 1489:}  // namespace edit_distance
        -: 1490:
        -: 1491:namespace {
        -: 1492:
        -: 1493:// The string representation of the values received in EqFailure() are already
        -: 1494:// escaped. Split them on escaped '\n' boundaries. Leave all other escaped
        -: 1495:// characters the same.
function _ZN7testing8internal12_GLOBAL__N_118SplitEscapedStringERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 1496:std::vector<std::string> SplitEscapedString(const std::string& str) {
    #####: 1497:  std::vector<std::string> lines;
    %%%%%: 1497-block  0
call    0 never executed
    #####: 1498:  size_t start = 0, end = str.size();
call    0 never executed
    #####: 1499:  if (end > 2 && str[0] == '"' && str[end - 1] == '"') {
branch  0 never executed
branch  1 never executed
    %%%%%: 1499-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 1499-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1499-block  2
    %%%%%: 1499-block  3
    %%%%%: 1499-block  4
branch  8 never executed
branch  9 never executed
    #####: 1500:    ++start;
    #####: 1501:    --end;
    %%%%%: 1501-block  0
        -: 1502:  }
    #####: 1503:  bool escaped = false;
    #####: 1504:  for (size_t i = start; i + 1 < end; ++i) {
    %%%%%: 1504-block  0
    %%%%%: 1504-block  1
branch  0 never executed
branch  1 never executed
    %%%%%: 1504-block  2
    #####: 1505:    if (escaped) {
    %%%%%: 1505-block  0
branch  0 never executed
branch  1 never executed
    #####: 1506:      escaped = false;
    #####: 1507:      if (str[i] == 'n') {
    %%%%%: 1507-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1508:        lines.push_back(str.substr(start, i - start - 1));
    %%%%%: 1508-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1508-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1508-block  2
call    6 never executed
    $$$$$: 1508-block  3
call    7 never executed
    $$$$$: 1508-block  4
    #####: 1509:        start = i + 1;
        -: 1510:      }
        -: 1511:    } else {
    #####: 1512:      escaped = str[i] == '\\';
    %%%%%: 1512-block  0
call    0 never executed
        -: 1513:    }
        -: 1514:  }
    #####: 1515:  lines.push_back(str.substr(start, end - start));
    %%%%%: 1515-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1515-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1515-block  2
call    6 never executed
    $$$$$: 1515-block  3
call    7 never executed
    $$$$$: 1515-block  4
    #####: 1516:  return lines;
    %%%%%: 1516-block  0
        -: 1517:}
        -: 1518:
        -: 1519:}  // namespace
        -: 1520:
        -: 1521:// Constructs and returns the message for an equality assertion
        -: 1522:// (e.g. ASSERT_EQ, EXPECT_STREQ, etc) failure.
        -: 1523://
        -: 1524:// The first four parameters are the expressions used in the assertion
        -: 1525:// and their values, as strings.  For example, for ASSERT_EQ(foo, bar)
        -: 1526:// where foo is 5 and bar is 6, we have:
        -: 1527://
        -: 1528://   lhs_expression: "foo"
        -: 1529://   rhs_expression: "bar"
        -: 1530://   lhs_value:      "5"
        -: 1531://   rhs_value:      "6"
        -: 1532://
        -: 1533:// The ignoring_case parameter is true if and only if the assertion is a
        -: 1534:// *_STRCASEEQ*.  When it's true, the string "Ignoring case" will
        -: 1535:// be inserted into the message.
function _ZN7testing8internal9EqFailureEPKcS2_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_b called 0 returned 0% blocks executed 0%
    #####: 1536:AssertionResult EqFailure(const char* lhs_expression,
        -: 1537:                          const char* rhs_expression,
        -: 1538:                          const std::string& lhs_value,
        -: 1539:                          const std::string& rhs_value,
        -: 1540:                          bool ignoring_case) {
    #####: 1541:  Message msg;
    %%%%%: 1541-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1541-block  1
call    3 never executed
    #####: 1542:  msg << "Expected equality of these values:";
    %%%%%: 1542-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1543:  msg << "\n  " << lhs_expression;
    %%%%%: 1543-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1543-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1544:  if (lhs_value != lhs_expression) {
    %%%%%: 1544-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1544-block  1
branch  3 never executed
branch  4 never executed
    #####: 1545:    msg << "\n    Which is: " << lhs_value;
    %%%%%: 1545-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1545-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 1546:  }
    #####: 1547:  msg << "\n  " << rhs_expression;
    %%%%%: 1547-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1547-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1548:  if (rhs_value != rhs_expression) {
    %%%%%: 1548-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1548-block  1
branch  3 never executed
branch  4 never executed
    #####: 1549:    msg << "\n    Which is: " << rhs_value;
    %%%%%: 1549-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1549-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 1550:  }
        -: 1551:
    #####: 1552:  if (ignoring_case) {
    %%%%%: 1552-block  0
branch  0 never executed
branch  1 never executed
    #####: 1553:    msg << "\nIgnoring case";
    %%%%%: 1553-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1554:  }
        -: 1555:
    #####: 1556:  if (!lhs_value.empty() && !rhs_value.empty()) {
    %%%%%: 1556-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1556-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1556-block  2
    %%%%%: 1556-block  3
    %%%%%: 1556-block  4
branch  6 never executed
branch  7 never executed
        -: 1557:    const std::vector<std::string> lhs_lines =
    #####: 1558:        SplitEscapedString(lhs_value);
    %%%%%: 1558-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$: 1558-block  1
call    4 never executed
        -: 1559:    const std::vector<std::string> rhs_lines =
    #####: 1560:        SplitEscapedString(rhs_value);
    %%%%%: 1560-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1560-block  1
call    3 never executed
    $$$$$: 1560-block  2
call    4 never executed
    #####: 1561:    if (lhs_lines.size() > 1 || rhs_lines.size() > 1) {
    %%%%%: 1561-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1561-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1561-block  2
    %%%%%: 1561-block  3
    %%%%%: 1561-block  4
branch  6 never executed
branch  7 never executed
    #####: 1562:      msg << "\nWith diff:\n"
    %%%%%: 1562-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1563:          << edit_distance::CreateUnifiedDiff(lhs_lines, rhs_lines);
    %%%%%: 1563-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1563-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1563-block  2
call    6 never executed
    $$$$$: 1563-block  3
call    7 never executed
    $$$$$: 1563-block  4
        -: 1564:    }
        -: 1565:  }
        -: 1566:
    #####: 1567:  return AssertionFailure() << msg;
    %%%%%: 1567-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1567-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1567-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1567-block  3
    %%%%%: 1567-block  4
call    9 never executed
call   10 never executed
    %%%%%: 1567-block  5
    $$$$$: 1567-block  6
call   11 never executed
    $$$$$: 1567-block  7
        -: 1568:}
        -: 1569:
        -: 1570:// Constructs a failure message for Boolean assertions such as EXPECT_TRUE.
function _ZN7testing8internal30GetBoolAssertionFailureMessageB5cxx11ERKNS_15AssertionResultEPKcS5_S5_ called 0 returned 0% blocks executed 0%
    #####: 1571:std::string GetBoolAssertionFailureMessage(
        -: 1572:    const AssertionResult& assertion_result,
        -: 1573:    const char* expression_text,
        -: 1574:    const char* actual_predicate_value,
        -: 1575:    const char* expected_predicate_value) {
    #####: 1576:  const char* actual_message = assertion_result.message();
    %%%%%: 1576-block  0
call    0 never executed
    #####: 1577:  Message msg;
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1577-block  0
call    3 never executed
    $$$$$: 1577-block  1
call    4 never executed
    #####: 1578:  msg << "Value of: " << expression_text
    %%%%%: 1578-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1578-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1579:      << "\n  Actual: " << actual_predicate_value;
    %%%%%: 1579-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1579-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1580:  if (actual_message[0] != '\0')
    %%%%%: 1580-block  0
branch  0 never executed
branch  1 never executed
    #####: 1581:    msg << " (" << actual_message << ")";
    %%%%%: 1581-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1581-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1581-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1582:  msg << "\nExpected: " << expected_predicate_value;
    %%%%%: 1582-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1582-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1583:  return msg.GetString();
    %%%%%: 1583-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1583-block  1
    %%%%%: 1583-block  2
        -: 1584:}
        -: 1585:
        -: 1586:// Helper function for implementing ASSERT_NEAR.
function _ZN7testing8internal20DoubleNearPredFormatEPKcS2_S2_ddd called 0 returned 0% blocks executed 0%
    #####: 1587:AssertionResult DoubleNearPredFormat(const char* expr1,
        -: 1588:                                     const char* expr2,
        -: 1589:                                     const char* abs_error_expr,
        -: 1590:                                     double val1,
        -: 1591:                                     double val2,
        -: 1592:                                     double abs_error) {
    #####: 1593:  const double diff = fabs(val1 - val2);
    #####: 1594:  if (diff <= abs_error) return AssertionSuccess();
    %%%%%: 1594-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1594-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 1594-block  2
        -: 1595:
        -: 1596:  // Find the value which is closest to zero.
    #####: 1597:  const double min_abs = std::min(fabs(val1), fabs(val2));
    %%%%%: 1597-block  0
call    0 never executed
        -: 1598:  // Find the distance to the next double from that value.
        -: 1599:  const double epsilon =
    #####: 1600:      nextafter(min_abs, std::numeric_limits<double>::infinity()) - min_abs;
call    0 never executed
        -: 1601:  // Detect the case where abs_error is so small that EXPECT_NEAR is
        -: 1602:  // effectively the same as EXPECT_EQUAL, and give an informative error
        -: 1603:  // message so that the situation can be more easily understood without
        -: 1604:  // requiring exotic floating-point knowledge.
        -: 1605:  // Don't do an epsilon check if abs_error is zero because that implies
        -: 1606:  // that an equality check was actually intended.
    #####: 1607:  if (!(std::isnan)(val1) && !(std::isnan)(val2) && abs_error > 0 &&
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1607-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1607-block  1
branch  6 never executed
branch  7 never executed
    %%%%%: 1607-block  2
    %%%%%: 1607-block  3
    %%%%%: 1607-block  4
branch  8 never executed
branch  9 never executed
    #####: 1608:      abs_error < epsilon) {
    %%%%%: 1608-block  0
branch  0 never executed
branch  1 never executed
    #####: 1609:    return AssertionFailure()
    %%%%%: 1609-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1609-block  1
call    3 never executed
    $$$$$: 1609-block  2
call    4 never executed
    $$$$$: 1609-block  3
    #####: 1610:           << "The difference between " << expr1 << " and " << expr2 << " is "
    %%%%%: 1610-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1610-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1610-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1610-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1610-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    #####: 1611:           << diff << ", where\n"
    %%%%%: 1611-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1611-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1612:           << expr1 << " evaluates to " << val1 << ",\n"
    %%%%%: 1612-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1612-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1612-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1612-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1613:           << expr2 << " evaluates to " << val2 << ".\nThe abs_error parameter "
    %%%%%: 1613-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1613-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1613-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1613-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1614:           << abs_error_expr << " evaluates to " << abs_error
    %%%%%: 1614-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1614-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1614-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 1615:           << " which is smaller than the minimum distance between doubles for "
    #####: 1616:              "numbers of this magnitude which is "
    %%%%%: 1616-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1617:           << epsilon
    %%%%%: 1617-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1618:           << ", thus making this EXPECT_NEAR check equivalent to "
    #####: 1619:              "EXPECT_EQUAL. Consider using EXPECT_DOUBLE_EQ instead.";
    %%%%%: 1619-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1619-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1619-block  2
        -: 1620:  }
    #####: 1621:  return AssertionFailure()
    %%%%%: 1621-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1621-block  1
call    3 never executed
    $$$$$: 1621-block  2
call    4 never executed
    $$$$$: 1621-block  3
    #####: 1622:      << "The difference between " << expr1 << " and " << expr2
    %%%%%: 1622-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1622-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1622-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1622-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1623:      << " is " << diff << ", which exceeds " << abs_error_expr << ", where\n"
    %%%%%: 1623-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1623-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1623-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1623-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1623-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    #####: 1624:      << expr1 << " evaluates to " << val1 << ",\n"
    %%%%%: 1624-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1624-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1624-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1624-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1625:      << expr2 << " evaluates to " << val2 << ", and\n"
    %%%%%: 1625-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1625-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1625-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1625-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1626:      << abs_error_expr << " evaluates to " << abs_error << ".";
    %%%%%: 1626-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1626-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1626-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1626-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1626-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 1626-block  5
        -: 1627:}
        -: 1628:
        -: 1629:
        -: 1630:// Helper template for implementing FloatLE() and DoubleLE().
        -: 1631:template <typename RawType>
    #####: 1632:AssertionResult FloatingPointLE(const char* expr1,
        -: 1633:                                const char* expr2,
        -: 1634:                                RawType val1,
        -: 1635:                                RawType val2) {
        -: 1636:  // Returns success if val1 is less than val2,
    #####: 1637:  if (val1 < val2) {
    #####: 1638:    return AssertionSuccess();
        -: 1639:  }
        -: 1640:
        -: 1641:  // or if val1 is almost equal to val2.
    #####: 1642:  const FloatingPoint<RawType> lhs(val1), rhs(val2);
    #####: 1643:  if (lhs.AlmostEquals(rhs)) {
    #####: 1644:    return AssertionSuccess();
        -: 1645:  }
        -: 1646:
        -: 1647:  // Note that the above two checks will both fail if either val1 or
        -: 1648:  // val2 is NaN, as the IEEE floating-point standard requires that
        -: 1649:  // any predicate involving a NaN must return false.
        -: 1650:
    #####: 1651:  ::std::stringstream val1_ss;
    #####: 1652:  val1_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    #####: 1653:          << val1;
        -: 1654:
    #####: 1655:  ::std::stringstream val2_ss;
    #####: 1656:  val2_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    #####: 1657:          << val2;
        -: 1658:
        -: 1659:  return AssertionFailure()
    #####: 1660:      << "Expected: (" << expr1 << ") <= (" << expr2 << ")\n"
    #####: 1661:      << "  Actual: " << StringStreamToString(&val1_ss) << " vs "
    #####: 1662:      << StringStreamToString(&val2_ss);
        -: 1663:}
------------------
_ZN7testing8internal15FloatingPointLEIdEENS_15AssertionResultEPKcS4_T_S5_:
function _ZN7testing8internal15FloatingPointLEIdEENS_15AssertionResultEPKcS4_T_S5_ called 0 returned 0% blocks executed 0%
    #####: 1632:AssertionResult FloatingPointLE(const char* expr1,
        -: 1633:                                const char* expr2,
        -: 1634:                                RawType val1,
        -: 1635:                                RawType val2) {
        -: 1636:  // Returns success if val1 is less than val2,
    #####: 1637:  if (val1 < val2) {
    %%%%%: 1637-block  0
branch  0 never executed
branch  1 never executed
    #####: 1638:    return AssertionSuccess();
    %%%%%: 1638-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1638-block  1
        -: 1639:  }
        -: 1640:
        -: 1641:  // or if val1 is almost equal to val2.
    #####: 1642:  const FloatingPoint<RawType> lhs(val1), rhs(val2);
    %%%%%: 1642-block  0
call    0 never executed
call    1 never executed
    #####: 1643:  if (lhs.AlmostEquals(rhs)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1643-block  0
branch  3 never executed
branch  4 never executed
    #####: 1644:    return AssertionSuccess();
    %%%%%: 1644-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1644-block  1
        -: 1645:  }
        -: 1646:
        -: 1647:  // Note that the above two checks will both fail if either val1 or
        -: 1648:  // val2 is NaN, as the IEEE floating-point standard requires that
        -: 1649:  // any predicate involving a NaN must return false.
        -: 1650:
    #####: 1651:  ::std::stringstream val1_ss;
    %%%%%: 1651-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 1651-block  1
call    5 never executed
    #####: 1652:  val1_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    %%%%%: 1652-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1653:          << val1;
    %%%%%: 1653-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1654:
    #####: 1655:  ::std::stringstream val2_ss;
    %%%%%: 1655-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 1655-block  1
call    4 never executed
    #####: 1656:  val2_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    %%%%%: 1656-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1657:          << val2;
    %%%%%: 1657-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1658:
        -: 1659:  return AssertionFailure()
    #####: 1660:      << "Expected: (" << expr1 << ") <= (" << expr2 << ")\n"
    %%%%%: 1660-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1660-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1660-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1660-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1660-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 1660-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
    $$$$$: 1660-block  6
call   19 never executed
    $$$$$: 1660-block  7
    #####: 1661:      << "  Actual: " << StringStreamToString(&val1_ss) << " vs "
    %%%%%: 1661-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1661-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1661-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1661-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
    $$$$$: 1661-block  4
call   13 never executed
    $$$$$: 1661-block  5
    #####: 1662:      << StringStreamToString(&val2_ss);
    %%%%%: 1662-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1662-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1662-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1662-block  3
    %%%%%: 1662-block  4
call    9 never executed
call   10 never executed
    $$$$$: 1662-block  5
call   11 never executed
    $$$$$: 1662-block  6
        -: 1663:}
------------------
_ZN7testing8internal15FloatingPointLEIfEENS_15AssertionResultEPKcS4_T_S5_:
function _ZN7testing8internal15FloatingPointLEIfEENS_15AssertionResultEPKcS4_T_S5_ called 0 returned 0% blocks executed 0%
    #####: 1632:AssertionResult FloatingPointLE(const char* expr1,
        -: 1633:                                const char* expr2,
        -: 1634:                                RawType val1,
        -: 1635:                                RawType val2) {
        -: 1636:  // Returns success if val1 is less than val2,
    #####: 1637:  if (val1 < val2) {
    %%%%%: 1637-block  0
branch  0 never executed
branch  1 never executed
    #####: 1638:    return AssertionSuccess();
    %%%%%: 1638-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1638-block  1
        -: 1639:  }
        -: 1640:
        -: 1641:  // or if val1 is almost equal to val2.
    #####: 1642:  const FloatingPoint<RawType> lhs(val1), rhs(val2);
    %%%%%: 1642-block  0
call    0 never executed
call    1 never executed
    #####: 1643:  if (lhs.AlmostEquals(rhs)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1643-block  0
branch  3 never executed
branch  4 never executed
    #####: 1644:    return AssertionSuccess();
    %%%%%: 1644-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1644-block  1
        -: 1645:  }
        -: 1646:
        -: 1647:  // Note that the above two checks will both fail if either val1 or
        -: 1648:  // val2 is NaN, as the IEEE floating-point standard requires that
        -: 1649:  // any predicate involving a NaN must return false.
        -: 1650:
    #####: 1651:  ::std::stringstream val1_ss;
    %%%%%: 1651-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 1651-block  1
call    5 never executed
    #####: 1652:  val1_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    %%%%%: 1652-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1653:          << val1;
    %%%%%: 1653-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1654:
    #####: 1655:  ::std::stringstream val2_ss;
    %%%%%: 1655-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 1655-block  1
call    4 never executed
    #####: 1656:  val2_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    %%%%%: 1656-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1657:          << val2;
    %%%%%: 1657-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1658:
        -: 1659:  return AssertionFailure()
    #####: 1660:      << "Expected: (" << expr1 << ") <= (" << expr2 << ")\n"
    %%%%%: 1660-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1660-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1660-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1660-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1660-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 1660-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
    $$$$$: 1660-block  6
call   19 never executed
    $$$$$: 1660-block  7
    #####: 1661:      << "  Actual: " << StringStreamToString(&val1_ss) << " vs "
    %%%%%: 1661-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1661-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1661-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1661-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
    $$$$$: 1661-block  4
call   13 never executed
    $$$$$: 1661-block  5
    #####: 1662:      << StringStreamToString(&val2_ss);
    %%%%%: 1662-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1662-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1662-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1662-block  3
    %%%%%: 1662-block  4
call    9 never executed
call   10 never executed
    $$$$$: 1662-block  5
call   11 never executed
    $$$$$: 1662-block  6
        -: 1663:}
------------------
        -: 1664:
        -: 1665:}  // namespace internal
        -: 1666:
        -: 1667:// Asserts that val1 is less than, or almost equal to, val2.  Fails
        -: 1668:// otherwise.  In particular, it fails if either val1 or val2 is NaN.
function _ZN7testing7FloatLEEPKcS1_ff called 0 returned 0% blocks executed 0%
    #####: 1669:AssertionResult FloatLE(const char* expr1, const char* expr2,
        -: 1670:                        float val1, float val2) {
    #####: 1671:  return internal::FloatingPointLE<float>(expr1, expr2, val1, val2);
    %%%%%: 1671-block  0
call    0 never executed
        -: 1672:}
        -: 1673:
        -: 1674:// Asserts that val1 is less than, or almost equal to, val2.  Fails
        -: 1675:// otherwise.  In particular, it fails if either val1 or val2 is NaN.
function _ZN7testing8DoubleLEEPKcS1_dd called 0 returned 0% blocks executed 0%
    #####: 1676:AssertionResult DoubleLE(const char* expr1, const char* expr2,
        -: 1677:                         double val1, double val2) {
    #####: 1678:  return internal::FloatingPointLE<double>(expr1, expr2, val1, val2);
    %%%%%: 1678-block  0
call    0 never executed
        -: 1679:}
        -: 1680:
        -: 1681:namespace internal {
        -: 1682:
        -: 1683:// The helper function for {ASSERT|EXPECT}_STREQ.
function _ZN7testing8internal14CmpHelperSTREQEPKcS2_S2_S2_ called 0 returned 0% blocks executed 0%
    #####: 1684:AssertionResult CmpHelperSTREQ(const char* lhs_expression,
        -: 1685:                               const char* rhs_expression,
        -: 1686:                               const char* lhs,
        -: 1687:                               const char* rhs) {
    #####: 1688:  if (String::CStringEquals(lhs, rhs)) {
    %%%%%: 1688-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1689:    return AssertionSuccess();
    %%%%%: 1689-block  0
call    0 never executed
        -: 1690:  }
        -: 1691:
        -: 1692:  return EqFailure(lhs_expression,
        -: 1693:                   rhs_expression,
    #####: 1694:                   PrintToString(lhs),
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1694-block  0
call    3 never executed
    $$$$$: 1694-block  1
call    4 never executed
    $$$$$: 1694-block  2
    #####: 1695:                   PrintToString(rhs),
    %%%%%: 1695-block  0
call    0 never executed
call    1 never executed
    $$$$$: 1695-block  1
call    2 never executed
    #####: 1696:                   false);
    %%%%%: 1696-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1696-block  1
        -: 1697:}
        -: 1698:
        -: 1699:// The helper function for {ASSERT|EXPECT}_STRCASEEQ.
function _ZN7testing8internal18CmpHelperSTRCASEEQEPKcS2_S2_S2_ called 0 returned 0% blocks executed 0%
    #####: 1700:AssertionResult CmpHelperSTRCASEEQ(const char* lhs_expression,
        -: 1701:                                   const char* rhs_expression,
        -: 1702:                                   const char* lhs,
        -: 1703:                                   const char* rhs) {
    #####: 1704:  if (String::CaseInsensitiveCStringEquals(lhs, rhs)) {
    %%%%%: 1704-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1705:    return AssertionSuccess();
    %%%%%: 1705-block  0
call    0 never executed
        -: 1706:  }
        -: 1707:
        -: 1708:  return EqFailure(lhs_expression,
        -: 1709:                   rhs_expression,
    #####: 1710:                   PrintToString(lhs),
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1710-block  0
call    3 never executed
    $$$$$: 1710-block  1
call    4 never executed
    $$$$$: 1710-block  2
    #####: 1711:                   PrintToString(rhs),
    %%%%%: 1711-block  0
call    0 never executed
call    1 never executed
    $$$$$: 1711-block  1
call    2 never executed
    #####: 1712:                   true);
    %%%%%: 1712-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1712-block  1
        -: 1713:}
        -: 1714:
        -: 1715:// The helper function for {ASSERT|EXPECT}_STRNE.
function _ZN7testing8internal14CmpHelperSTRNEEPKcS2_S2_S2_ called 0 returned 0% blocks executed 0%
    #####: 1716:AssertionResult CmpHelperSTRNE(const char* s1_expression,
        -: 1717:                               const char* s2_expression,
        -: 1718:                               const char* s1,
        -: 1719:                               const char* s2) {
    #####: 1720:  if (!String::CStringEquals(s1, s2)) {
    %%%%%: 1720-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1721:    return AssertionSuccess();
    %%%%%: 1721-block  0
call    0 never executed
        -: 1722:  } else {
    #####: 1723:    return AssertionFailure() << "Expected: (" << s1_expression << ") != ("
    %%%%%: 1723-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1723-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 1723-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 1723-block  3
call   10 never executed
    $$$$$: 1723-block  4
call   11 never executed
    #####: 1724:                              << s2_expression << "), actual: \""
    %%%%%: 1724-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1724-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1725:                              << s1 << "\" vs \"" << s2 << "\"";
    %%%%%: 1725-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1725-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1725-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1725-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1725-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 1725-block  5
        -: 1726:  }
        -: 1727:}
        -: 1728:
        -: 1729:// The helper function for {ASSERT|EXPECT}_STRCASENE.
function _ZN7testing8internal18CmpHelperSTRCASENEEPKcS2_S2_S2_ called 0 returned 0% blocks executed 0%
    #####: 1730:AssertionResult CmpHelperSTRCASENE(const char* s1_expression,
        -: 1731:                                   const char* s2_expression,
        -: 1732:                                   const char* s1,
        -: 1733:                                   const char* s2) {
    #####: 1734:  if (!String::CaseInsensitiveCStringEquals(s1, s2)) {
    %%%%%: 1734-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1735:    return AssertionSuccess();
    %%%%%: 1735-block  0
call    0 never executed
        -: 1736:  } else {
    #####: 1737:    return AssertionFailure()
    %%%%%: 1737-block  0
call    0 never executed
    %%%%%: 1737-block  1
call    1 never executed
    $$$$$: 1737-block  2
call    2 never executed
    #####: 1738:        << "Expected: (" << s1_expression << ") != ("
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1738-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1738-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1739:        << s2_expression << ") (ignoring case), actual: \""
    %%%%%: 1739-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1739-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1740:        << s1 << "\" vs \"" << s2 << "\"";
    %%%%%: 1740-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1740-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1740-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1740-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1740-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 1740-block  5
        -: 1741:  }
        -: 1742:}
        -: 1743:
        -: 1744:}  // namespace internal
        -: 1745:
        -: 1746:namespace {
        -: 1747:
        -: 1748:// Helper functions for implementing IsSubString() and IsNotSubstring().
        -: 1749:
        -: 1750:// This group of overloaded functions return true if and only if needle
        -: 1751:// is a substring of haystack.  NULL is considered a substring of
        -: 1752:// itself only.
        -: 1753:
function _ZN7testing12_GLOBAL__N_115IsSubstringPredEPKcS2_ called 0 returned 0% blocks executed 0%
    #####: 1754:bool IsSubstringPred(const char* needle, const char* haystack) {
    #####: 1755:  if (needle == nullptr || haystack == nullptr) return needle == haystack;
    %%%%%: 1755-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1755-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 1755-block  2
        -: 1756:
    #####: 1757:  return strstr(haystack, needle) != nullptr;
    %%%%%: 1757-block  0
        -: 1758:}
        -: 1759:
function _ZN7testing12_GLOBAL__N_115IsSubstringPredEPKwS2_ called 0 returned 0% blocks executed 0%
    #####: 1760:bool IsSubstringPred(const wchar_t* needle, const wchar_t* haystack) {
    #####: 1761:  if (needle == nullptr || haystack == nullptr) return needle == haystack;
    %%%%%: 1761-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1761-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 1761-block  2
        -: 1762:
    #####: 1763:  return wcsstr(haystack, needle) != nullptr;
    %%%%%: 1763-block  0
call    0 never executed
        -: 1764:}
        -: 1765:
        -: 1766:// StringType here can be either ::std::string or ::std::wstring.
        -: 1767:template <typename StringType>
    #####: 1768:bool IsSubstringPred(const StringType& needle,
        -: 1769:                     const StringType& haystack) {
    #####: 1770:  return haystack.find(needle) != StringType::npos;
        -: 1771:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringPredINSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEEbRKT_SA_:
function _ZN7testing12_GLOBAL__N_115IsSubstringPredINSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEEbRKT_SA_ called 0 returned 0% blocks executed 0%
    #####: 1768:bool IsSubstringPred(const StringType& needle,
        -: 1769:                     const StringType& haystack) {
    #####: 1770:  return haystack.find(needle) != StringType::npos;
    %%%%%: 1770-block  0
call    0 never executed
        -: 1771:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringPredINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_SA_:
function _ZN7testing12_GLOBAL__N_115IsSubstringPredINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_SA_ called 0 returned 0% blocks executed 0%
    #####: 1768:bool IsSubstringPred(const StringType& needle,
        -: 1769:                     const StringType& haystack) {
    #####: 1770:  return haystack.find(needle) != StringType::npos;
    %%%%%: 1770-block  0
call    0 never executed
        -: 1771:}
------------------
        -: 1772:
        -: 1773:// This function implements either IsSubstring() or IsNotSubstring(),
        -: 1774:// depending on the value of the expected_to_be_substring parameter.
        -: 1775:// StringType here can be const char*, const wchar_t*, ::std::string,
        -: 1776:// or ::std::wstring.
        -: 1777:template <typename StringType>
    #####: 1778:AssertionResult IsSubstringImpl(
        -: 1779:    bool expected_to_be_substring,
        -: 1780:    const char* needle_expr, const char* haystack_expr,
        -: 1781:    const StringType& needle, const StringType& haystack) {
    #####: 1782:  if (IsSubstringPred(needle, haystack) == expected_to_be_substring)
    #####: 1783:    return AssertionSuccess();
        -: 1784:
    #####: 1785:  const bool is_wide_string = sizeof(needle[0]) > 1;
    #####: 1786:  const char* const begin_string_quote = is_wide_string ? "L\"" : "\"";
        -: 1787:  return AssertionFailure()
    #####: 1788:      << "Value of: " << needle_expr << "\n"
    #####: 1789:      << "  Actual: " << begin_string_quote << needle << "\"\n"
    #####: 1790:      << "Expected: " << (expected_to_be_substring ? "" : "not ")
    #####: 1791:      << "a substring of " << haystack_expr << "\n"
    #####: 1792:      << "Which is: " << begin_string_quote << haystack << "\"";
        -: 1793:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringImplINSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEENS_15AssertionResultEbPKcSA_RKT_SD_:
function _ZN7testing12_GLOBAL__N_115IsSubstringImplINSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEENS_15AssertionResultEbPKcSA_RKT_SD_ called 0 returned 0% blocks executed 0%
    #####: 1778:AssertionResult IsSubstringImpl(
        -: 1779:    bool expected_to_be_substring,
        -: 1780:    const char* needle_expr, const char* haystack_expr,
        -: 1781:    const StringType& needle, const StringType& haystack) {
    #####: 1782:  if (IsSubstringPred(needle, haystack) == expected_to_be_substring)
    %%%%%: 1782-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1783:    return AssertionSuccess();
    %%%%%: 1783-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1783-block  1
        -: 1784:
    #####: 1785:  const bool is_wide_string = sizeof(needle[0]) > 1;
    #####: 1786:  const char* const begin_string_quote = is_wide_string ? "L\"" : "\"";
        -: 1787:  return AssertionFailure()
    #####: 1788:      << "Value of: " << needle_expr << "\n"
    %%%%%: 1788-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1788-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1788-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1788-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$: 1788-block  4
call   12 never executed
    $$$$$: 1788-block  5
    #####: 1789:      << "  Actual: " << begin_string_quote << needle << "\"\n"
    %%%%%: 1789-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1789-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1789-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1789-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1790:      << "Expected: " << (expected_to_be_substring ? "" : "not ")
    %%%%%: 1790-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1790-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 1790-block  2
    %%%%%: 1790-block  3
    %%%%%: 1790-block  4
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1790-block  5
call    8 never executed
    $$$$$: 1790-block  6
    #####: 1791:      << "a substring of " << haystack_expr << "\n"
    %%%%%: 1791-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1791-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1791-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1792:      << "Which is: " << begin_string_quote << haystack << "\"";
    %%%%%: 1792-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1792-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1792-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1792-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1792-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 1792-block  5
        -: 1793:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringImplINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_15AssertionResultEbPKcSA_RKT_SD_:
function _ZN7testing12_GLOBAL__N_115IsSubstringImplINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_15AssertionResultEbPKcSA_RKT_SD_ called 0 returned 0% blocks executed 0%
    #####: 1778:AssertionResult IsSubstringImpl(
        -: 1779:    bool expected_to_be_substring,
        -: 1780:    const char* needle_expr, const char* haystack_expr,
        -: 1781:    const StringType& needle, const StringType& haystack) {
    #####: 1782:  if (IsSubstringPred(needle, haystack) == expected_to_be_substring)
    %%%%%: 1782-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1783:    return AssertionSuccess();
    %%%%%: 1783-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1783-block  1
        -: 1784:
    #####: 1785:  const bool is_wide_string = sizeof(needle[0]) > 1;
    #####: 1786:  const char* const begin_string_quote = is_wide_string ? "L\"" : "\"";
        -: 1787:  return AssertionFailure()
    #####: 1788:      << "Value of: " << needle_expr << "\n"
    %%%%%: 1788-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1788-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1788-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1788-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$: 1788-block  4
call   12 never executed
    $$$$$: 1788-block  5
    #####: 1789:      << "  Actual: " << begin_string_quote << needle << "\"\n"
    %%%%%: 1789-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1789-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1789-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1789-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1790:      << "Expected: " << (expected_to_be_substring ? "" : "not ")
    %%%%%: 1790-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1790-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 1790-block  2
    %%%%%: 1790-block  3
    %%%%%: 1790-block  4
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1790-block  5
call    8 never executed
    $$$$$: 1790-block  6
    #####: 1791:      << "a substring of " << haystack_expr << "\n"
    %%%%%: 1791-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1791-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1791-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1792:      << "Which is: " << begin_string_quote << haystack << "\"";
    %%%%%: 1792-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1792-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1792-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1792-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1792-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 1792-block  5
        -: 1793:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringImplIPKwEENS_15AssertionResultEbPKcS6_RKT_S9_:
function _ZN7testing12_GLOBAL__N_115IsSubstringImplIPKwEENS_15AssertionResultEbPKcS6_RKT_S9_ called 0 returned 0% blocks executed 0%
    #####: 1778:AssertionResult IsSubstringImpl(
        -: 1779:    bool expected_to_be_substring,
        -: 1780:    const char* needle_expr, const char* haystack_expr,
        -: 1781:    const StringType& needle, const StringType& haystack) {
    #####: 1782:  if (IsSubstringPred(needle, haystack) == expected_to_be_substring)
    %%%%%: 1782-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1783:    return AssertionSuccess();
    %%%%%: 1783-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1783-block  1
        -: 1784:
    #####: 1785:  const bool is_wide_string = sizeof(needle[0]) > 1;
    #####: 1786:  const char* const begin_string_quote = is_wide_string ? "L\"" : "\"";
        -: 1787:  return AssertionFailure()
    #####: 1788:      << "Value of: " << needle_expr << "\n"
    %%%%%: 1788-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1788-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1788-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1788-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$: 1788-block  4
call   12 never executed
    $$$$$: 1788-block  5
    #####: 1789:      << "  Actual: " << begin_string_quote << needle << "\"\n"
    %%%%%: 1789-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1789-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1789-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1789-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1790:      << "Expected: " << (expected_to_be_substring ? "" : "not ")
    %%%%%: 1790-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1790-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 1790-block  2
    %%%%%: 1790-block  3
    %%%%%: 1790-block  4
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1790-block  5
call    8 never executed
    $$$$$: 1790-block  6
    #####: 1791:      << "a substring of " << haystack_expr << "\n"
    %%%%%: 1791-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1791-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1791-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1792:      << "Which is: " << begin_string_quote << haystack << "\"";
    %%%%%: 1792-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1792-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1792-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1792-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1792-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 1792-block  5
        -: 1793:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringImplIPKcEENS_15AssertionResultEbS3_S3_RKT_S7_:
function _ZN7testing12_GLOBAL__N_115IsSubstringImplIPKcEENS_15AssertionResultEbS3_S3_RKT_S7_ called 0 returned 0% blocks executed 0%
    #####: 1778:AssertionResult IsSubstringImpl(
        -: 1779:    bool expected_to_be_substring,
        -: 1780:    const char* needle_expr, const char* haystack_expr,
        -: 1781:    const StringType& needle, const StringType& haystack) {
    #####: 1782:  if (IsSubstringPred(needle, haystack) == expected_to_be_substring)
    %%%%%: 1782-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1783:    return AssertionSuccess();
    %%%%%: 1783-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1783-block  1
        -: 1784:
    #####: 1785:  const bool is_wide_string = sizeof(needle[0]) > 1;
    #####: 1786:  const char* const begin_string_quote = is_wide_string ? "L\"" : "\"";
        -: 1787:  return AssertionFailure()
    #####: 1788:      << "Value of: " << needle_expr << "\n"
    %%%%%: 1788-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1788-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1788-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1788-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$: 1788-block  4
call   12 never executed
    $$$$$: 1788-block  5
    #####: 1789:      << "  Actual: " << begin_string_quote << needle << "\"\n"
    %%%%%: 1789-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1789-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1789-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1789-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1790:      << "Expected: " << (expected_to_be_substring ? "" : "not ")
    %%%%%: 1790-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1790-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 1790-block  2
    %%%%%: 1790-block  3
    %%%%%: 1790-block  4
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1790-block  5
call    8 never executed
    $$$$$: 1790-block  6
    #####: 1791:      << "a substring of " << haystack_expr << "\n"
    %%%%%: 1791-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1791-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1791-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1792:      << "Which is: " << begin_string_quote << haystack << "\"";
    %%%%%: 1792-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1792-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1792-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1792-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1792-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 1792-block  5
        -: 1793:}
------------------
        -: 1794:
        -: 1795:}  // namespace
        -: 1796:
        -: 1797:// IsSubstring() and IsNotSubstring() check whether needle is a
        -: 1798:// substring of haystack (NULL is considered a substring of itself
        -: 1799:// only), and return an appropriate error message when they fail.
        -: 1800:
function _ZN7testing11IsSubstringEPKcS1_S1_S1_ called 0 returned 0% blocks executed 0%
    #####: 1801:AssertionResult IsSubstring(
        -: 1802:    const char* needle_expr, const char* haystack_expr,
        -: 1803:    const char* needle, const char* haystack) {
    #####: 1804:  return IsSubstringImpl(true, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1804-block  0
call    0 never executed
        -: 1805:}
        -: 1806:
function _ZN7testing11IsSubstringEPKcS1_PKwS3_ called 0 returned 0% blocks executed 0%
    #####: 1807:AssertionResult IsSubstring(
        -: 1808:    const char* needle_expr, const char* haystack_expr,
        -: 1809:    const wchar_t* needle, const wchar_t* haystack) {
    #####: 1810:  return IsSubstringImpl(true, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1810-block  0
call    0 never executed
        -: 1811:}
        -: 1812:
function _ZN7testing14IsNotSubstringEPKcS1_S1_S1_ called 0 returned 0% blocks executed 0%
    #####: 1813:AssertionResult IsNotSubstring(
        -: 1814:    const char* needle_expr, const char* haystack_expr,
        -: 1815:    const char* needle, const char* haystack) {
    #####: 1816:  return IsSubstringImpl(false, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1816-block  0
call    0 never executed
        -: 1817:}
        -: 1818:
function _ZN7testing14IsNotSubstringEPKcS1_PKwS3_ called 0 returned 0% blocks executed 0%
    #####: 1819:AssertionResult IsNotSubstring(
        -: 1820:    const char* needle_expr, const char* haystack_expr,
        -: 1821:    const wchar_t* needle, const wchar_t* haystack) {
    #####: 1822:  return IsSubstringImpl(false, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1822-block  0
call    0 never executed
        -: 1823:}
        -: 1824:
function _ZN7testing11IsSubstringEPKcS1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_ called 0 returned 0% blocks executed 0%
    #####: 1825:AssertionResult IsSubstring(
        -: 1826:    const char* needle_expr, const char* haystack_expr,
        -: 1827:    const ::std::string& needle, const ::std::string& haystack) {
    #####: 1828:  return IsSubstringImpl(true, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1828-block  0
call    0 never executed
        -: 1829:}
        -: 1830:
function _ZN7testing14IsNotSubstringEPKcS1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_ called 0 returned 0% blocks executed 0%
    #####: 1831:AssertionResult IsNotSubstring(
        -: 1832:    const char* needle_expr, const char* haystack_expr,
        -: 1833:    const ::std::string& needle, const ::std::string& haystack) {
    #####: 1834:  return IsSubstringImpl(false, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1834-block  0
call    0 never executed
        -: 1835:}
        -: 1836:
        -: 1837:#if GTEST_HAS_STD_WSTRING
function _ZN7testing11IsSubstringEPKcS1_RKNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEES9_ called 0 returned 0% blocks executed 0%
    #####: 1838:AssertionResult IsSubstring(
        -: 1839:    const char* needle_expr, const char* haystack_expr,
        -: 1840:    const ::std::wstring& needle, const ::std::wstring& haystack) {
    #####: 1841:  return IsSubstringImpl(true, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1841-block  0
call    0 never executed
        -: 1842:}
        -: 1843:
function _ZN7testing14IsNotSubstringEPKcS1_RKNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEES9_ called 0 returned 0% blocks executed 0%
    #####: 1844:AssertionResult IsNotSubstring(
        -: 1845:    const char* needle_expr, const char* haystack_expr,
        -: 1846:    const ::std::wstring& needle, const ::std::wstring& haystack) {
    #####: 1847:  return IsSubstringImpl(false, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1847-block  0
call    0 never executed
        -: 1848:}
        -: 1849:#endif  // GTEST_HAS_STD_WSTRING
        -: 1850:
        -: 1851:namespace internal {
        -: 1852:
        -: 1853:#if GTEST_OS_WINDOWS
        -: 1854:
        -: 1855:namespace {
        -: 1856:
        -: 1857:// Helper function for IsHRESULT{SuccessFailure} predicates
function _ZN7testing8internal12_GLOBAL__N_120HRESULTFailureHelperEPKcS3_l called 0 returned 0% blocks executed 0%
    #####: 1858:AssertionResult HRESULTFailureHelper(const char* expr,
        -: 1859:                                     const char* expected,
        -: 1860:                                     long hr) {  // NOLINT
        -: 1861:# if GTEST_OS_WINDOWS_MOBILE || GTEST_OS_WINDOWS_TV_TITLE
        -: 1862:
        -: 1863:  // Windows CE doesn't support FormatMessage.
        -: 1864:  const char error_text[] = "";
        -: 1865:
        -: 1866:# else
        -: 1867:
        -: 1868:  // Looks up the human-readable system message for the HRESULT code
        -: 1869:  // and since we're not passing any params to FormatMessage, we don't
        -: 1870:  // want inserts expanded.
    #####: 1871:  const DWORD kFlags = FORMAT_MESSAGE_FROM_SYSTEM |
        -: 1872:                       FORMAT_MESSAGE_IGNORE_INSERTS;
    #####: 1873:  const DWORD kBufSize = 4096;
        -: 1874:  // Gets the system's human readable message string for this HRESULT.
    #####: 1875:  char error_text[kBufSize] = { '\0' };
    #####: 1876:  DWORD message_length = ::FormatMessageA(kFlags,
    %%%%%: 1876-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1876-block  1
        -: 1877:                                          0,   // no source, we're asking system
        -: 1878:                                          static_cast<DWORD>(hr),  // the error
        -: 1879:                                          0,   // no line width restrictions
        -: 1880:                                          error_text,  // output buffer
        -: 1881:                                          kBufSize,    // buf size
        -: 1882:                                          nullptr);  // no arguments for inserts
        -: 1883:  // Trims tailing white space (FormatMessage leaves a trailing CR-LF)
    #####: 1884:  for (; message_length && IsSpace(error_text[message_length - 1]);
    %%%%%: 1884-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1884-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 1884-block  2
    %%%%%: 1884-block  3
    %%%%%: 1884-block  4
branch  5 never executed
branch  6 never executed
        -: 1885:          --message_length) {
    #####: 1886:    error_text[message_length - 1] = '\0';
    %%%%%: 1886-block  0
        -: 1887:  }
        -: 1888:
        -: 1889:# endif  // GTEST_OS_WINDOWS_MOBILE
        -: 1890:
    #####: 1891:  const std::string error_hex("0x" + String::FormatHexInt(hr));
    %%%%%: 1891-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1891-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 1891-block  2
    $$$$$: 1891-block  3
call    6 never executed
    #####: 1892:  return ::testing::AssertionFailure()
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1892-block  0
call    3 never executed
call    4 never executed
    $$$$$: 1892-block  1
call    5 never executed
    $$$$$: 1892-block  2
    #####: 1893:      << "Expected: " << expr << " " << expected << ".\n"
    %%%%%: 1893-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1893-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1893-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1893-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1893-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    #####: 1894:      << "  Actual: " << error_hex << " " << error_text << "\n";
    %%%%%: 1894-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1894-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1894-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1894-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1894-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 1894-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%: 1894-block  6
    %%%%%: 1894-block  7
        -: 1895:}
        -: 1896:
        -: 1897:}  // namespace
        -: 1898:
function _ZN7testing8internal16IsHRESULTSuccessEPKcl called 0 returned 0% blocks executed 0%
    #####: 1899:AssertionResult IsHRESULTSuccess(const char* expr, long hr) {  // NOLINT
    #####: 1900:  if (SUCCEEDED(hr)) {
    %%%%%: 1900-block  0
branch  0 never executed
branch  1 never executed
    #####: 1901:    return AssertionSuccess();
    %%%%%: 1901-block  0
call    0 never executed
        -: 1902:  }
    #####: 1903:  return HRESULTFailureHelper(expr, "succeeds", hr);
    %%%%%: 1903-block  0
call    0 never executed
        -: 1904:}
        -: 1905:
function _ZN7testing8internal16IsHRESULTFailureEPKcl called 0 returned 0% blocks executed 0%
    #####: 1906:AssertionResult IsHRESULTFailure(const char* expr, long hr) {  // NOLINT
    #####: 1907:  if (FAILED(hr)) {
    %%%%%: 1907-block  0
branch  0 never executed
branch  1 never executed
    #####: 1908:    return AssertionSuccess();
    %%%%%: 1908-block  0
call    0 never executed
        -: 1909:  }
    #####: 1910:  return HRESULTFailureHelper(expr, "fails", hr);
    %%%%%: 1910-block  0
call    0 never executed
        -: 1911:}
        -: 1912:
        -: 1913:#endif  // GTEST_OS_WINDOWS
        -: 1914:
        -: 1915:// Utility functions for encoding Unicode text (wide strings) in
        -: 1916:// UTF-8.
        -: 1917:
        -: 1918:// A Unicode code-point can have up to 21 bits, and is encoded in UTF-8
        -: 1919:// like this:
        -: 1920://
        -: 1921:// Code-point length   Encoding
        -: 1922://   0 -  7 bits       0xxxxxxx
        -: 1923://   8 - 11 bits       110xxxxx 10xxxxxx
        -: 1924://  12 - 16 bits       1110xxxx 10xxxxxx 10xxxxxx
        -: 1925://  17 - 21 bits       11110xxx 10xxxxxx 10xxxxxx 10xxxxxx
        -: 1926:
        -: 1927:// The maximum code-point a one-byte UTF-8 sequence can represent.
        -: 1928:constexpr uint32_t kMaxCodePoint1 = (static_cast<uint32_t>(1) <<  7) - 1;
        -: 1929:
        -: 1930:// The maximum code-point a two-byte UTF-8 sequence can represent.
        -: 1931:constexpr uint32_t kMaxCodePoint2 = (static_cast<uint32_t>(1) << (5 + 6)) - 1;
        -: 1932:
        -: 1933:// The maximum code-point a three-byte UTF-8 sequence can represent.
        -: 1934:constexpr uint32_t kMaxCodePoint3 = (static_cast<uint32_t>(1) << (4 + 2*6)) - 1;
        -: 1935:
        -: 1936:// The maximum code-point a four-byte UTF-8 sequence can represent.
        -: 1937:constexpr uint32_t kMaxCodePoint4 = (static_cast<uint32_t>(1) << (3 + 3*6)) - 1;
        -: 1938:
        -: 1939:// Chops off the n lowest bits from a bit pattern.  Returns the n
        -: 1940:// lowest bits.  As a side effect, the original bit pattern will be
        -: 1941:// shifted to the right by n bits.
function _ZN7testing8internal11ChopLowBitsEPji called 0 returned 0% blocks executed 0%
    #####: 1942:inline uint32_t ChopLowBits(uint32_t* bits, int n) {
    #####: 1943:  const uint32_t low_bits = *bits & ((static_cast<uint32_t>(1) << n) - 1);
    #####: 1944:  *bits >>= n;
    #####: 1945:  return low_bits;
    %%%%%: 1945-block  0
        -: 1946:}
        -: 1947:
        -: 1948:// Converts a Unicode code point to a narrow string in UTF-8 encoding.
        -: 1949:// code_point parameter is of type uint32_t because wchar_t may not be
        -: 1950:// wide enough to contain a code point.
        -: 1951:// If the code_point is not a valid Unicode code point
        -: 1952:// (i.e. outside of Unicode range U+0 to U+10FFFF) it will be converted
        -: 1953:// to "(Invalid Unicode 0xXXXXXXXX)".
function _ZN7testing8internal15CodePointToUtf8B5cxx11Ej called 0 returned 0% blocks executed 0%
    #####: 1954:std::string CodePointToUtf8(uint32_t code_point) {
    #####: 1955:  if (code_point > kMaxCodePoint4) {
    %%%%%: 1955-block  0
branch  0 never executed
branch  1 never executed
    #####: 1956:    return "(Invalid Unicode 0x" + String::FormatHexUInt32(code_point) + ")";
    %%%%%: 1956-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1956-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1956-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1956-block  3
    %%%%%: 1956-block  4
call    9 never executed
call   10 never executed
    $$$$$: 1956-block  5
call   11 never executed
    $$$$$: 1956-block  6
    $$$$$: 1956-block  7
call   12 never executed
    $$$$$: 1956-block  8
        -: 1957:  }
        -: 1958:
        -: 1959:  char str[5];  // Big enough for the largest valid code point.
    #####: 1960:  if (code_point <= kMaxCodePoint1) {
    %%%%%: 1960-block  0
branch  0 never executed
branch  1 never executed
    #####: 1961:    str[1] = '\0';
    #####: 1962:    str[0] = static_cast<char>(code_point);                          // 0xxxxxxx
    %%%%%: 1962-block  0
    #####: 1963:  } else if (code_point <= kMaxCodePoint2) {
    %%%%%: 1963-block  0
branch  0 never executed
branch  1 never executed
    #####: 1964:    str[2] = '\0';
    #####: 1965:    str[1] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
    %%%%%: 1965-block  0
call    0 never executed
    #####: 1966:    str[0] = static_cast<char>(0xC0 | code_point);                   // 110xxxxx
    #####: 1967:  } else if (code_point <= kMaxCodePoint3) {
    %%%%%: 1967-block  0
branch  0 never executed
branch  1 never executed
    #####: 1968:    str[3] = '\0';
    #####: 1969:    str[2] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
    %%%%%: 1969-block  0
call    0 never executed
    #####: 1970:    str[1] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
call    0 never executed
    #####: 1971:    str[0] = static_cast<char>(0xE0 | code_point);                   // 1110xxxx
        -: 1972:  } else {  // code_point <= kMaxCodePoint4
    #####: 1973:    str[4] = '\0';
    #####: 1974:    str[3] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
    %%%%%: 1974-block  0
call    0 never executed
    #####: 1975:    str[2] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
call    0 never executed
    #####: 1976:    str[1] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
call    0 never executed
    #####: 1977:    str[0] = static_cast<char>(0xF0 | code_point);                   // 11110xxx
        -: 1978:  }
    #####: 1979:  return str;
    %%%%%: 1979-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1979-block  1
call    4 never executed
    $$$$$: 1979-block  2
call    5 never executed
    $$$$$: 1979-block  3
        -: 1980:}
        -: 1981:
        -: 1982:// The following two functions only make sense if the system
        -: 1983:// uses UTF-16 for wide string encoding. All supported systems
        -: 1984:// with 16 bit wchar_t (Windows, Cygwin) do use UTF-16.
        -: 1985:
        -: 1986:// Determines if the arguments constitute UTF-16 surrogate pair
        -: 1987:// and thus should be combined into a single Unicode code point
        -: 1988:// using CreateCodePointFromUtf16SurrogatePair.
function _ZN7testing8internal20IsUtf16SurrogatePairEww called 0 returned 0% blocks executed 0%
    #####: 1989:inline bool IsUtf16SurrogatePair(wchar_t first, wchar_t second) {
        -: 1990:  return sizeof(wchar_t) == 2 &&
    #####: 1991:      (first & 0xFC00) == 0xD800 && (second & 0xFC00) == 0xDC00;
    %%%%%: 1991-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1991-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 1991-block  2
    %%%%%: 1991-block  3
    %%%%%: 1991-block  4
        -: 1992:}
        -: 1993:
        -: 1994:// Creates a Unicode code point from UTF16 surrogate pair.
function _ZN7testing8internal37CreateCodePointFromUtf16SurrogatePairEww called 0 returned 0% blocks executed 0%
    #####: 1995:inline uint32_t CreateCodePointFromUtf16SurrogatePair(wchar_t first,
        -: 1996:                                                      wchar_t second) {
    #####: 1997:  const auto first_u = static_cast<uint32_t>(first);
    #####: 1998:  const auto second_u = static_cast<uint32_t>(second);
    #####: 1999:  const uint32_t mask = (1 << 10) - 1;
        -: 2000:  return (sizeof(wchar_t) == 2)
    #####: 2001:             ? (((first_u & mask) << 10) | (second_u & mask)) + 0x10000
        -: 2002:             :
        -: 2003:             // This function should not be called when the condition is
        -: 2004:             // false, but we provide a sensible default in case it is.
    #####: 2005:             first_u;
    %%%%%: 2005-block  0
        -: 2006:}
        -: 2007:
        -: 2008:// Converts a wide string to a narrow string in UTF-8 encoding.
        -: 2009:// The wide string is assumed to have the following encoding:
        -: 2010://   UTF-16 if sizeof(wchar_t) == 2 (on Windows, Cygwin)
        -: 2011://   UTF-32 if sizeof(wchar_t) == 4 (on Linux)
        -: 2012:// Parameter str points to a null-terminated wide string.
        -: 2013:// Parameter num_chars may additionally limit the number
        -: 2014:// of wchar_t characters processed. -1 is used when the entire string
        -: 2015:// should be processed.
        -: 2016:// If the string contains code points that are not valid Unicode code points
        -: 2017:// (i.e. outside of Unicode range U+0 to U+10FFFF) they will be output
        -: 2018:// as '(Invalid Unicode 0xXXXXXXXX)'. If the string is in UTF16 encoding
        -: 2019:// and contains invalid UTF-16 surrogate pairs, values in those pairs
        -: 2020:// will be encoded as individual Unicode characters from Basic Normal Plane.
function _ZN7testing8internal16WideStringToUtf8B5cxx11EPKwi called 0 returned 0% blocks executed 0%
    #####: 2021:std::string WideStringToUtf8(const wchar_t* str, int num_chars) {
    #####: 2022:  if (num_chars == -1)
    %%%%%: 2022-block  0
branch  0 never executed
branch  1 never executed
    #####: 2023:    num_chars = static_cast<int>(wcslen(str));
    %%%%%: 2023-block  0
call    0 never executed
        -: 2024:
    #####: 2025:  ::std::stringstream stream;
    %%%%%: 2025-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2025-block  1
call    4 never executed
    $$$$$: 2025-block  2
call    5 never executed
    #####: 2026:  for (int i = 0; i < num_chars; ++i) {
    %%%%%: 2026-block  0
    %%%%%: 2026-block  1
branch  0 never executed
branch  1 never executed
        -: 2027:    uint32_t unicode_code_point;
        -: 2028:
    #####: 2029:    if (str[i] == L'\0') {
    %%%%%: 2029-block  0
branch  0 never executed
branch  1 never executed
    #####: 2030:      break;
    %%%%%: 2030-block  0
    #####: 2031:    } else if (i + 1 < num_chars && IsUtf16SurrogatePair(str[i], str[i + 1])) {
    %%%%%: 2031-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2031-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2031-block  2
    %%%%%: 2031-block  3
    %%%%%: 2031-block  4
branch  5 never executed
branch  6 never executed
    #####: 2032:      unicode_code_point = CreateCodePointFromUtf16SurrogatePair(str[i],
    #####: 2033:                                                                 str[i + 1]);
    %%%%%: 2033-block  0
call    0 never executed
    #####: 2034:      i++;
        -: 2035:    } else {
    #####: 2036:      unicode_code_point = static_cast<uint32_t>(str[i]);
    %%%%%: 2036-block  0
        -: 2037:    }
        -: 2038:
    #####: 2039:    stream << CodePointToUtf8(unicode_code_point);
    %%%%%: 2039-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2039-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2039-block  2
call    6 never executed
    $$$$$: 2039-block  3
call    7 never executed
    $$$$$: 2039-block  4
        -: 2040:  }
    #####: 2041:  return StringStreamToString(&stream);
    %%%%%: 2041-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2041-block  1
    %%%%%: 2041-block  2
        -: 2042:}
        -: 2043:
        -: 2044:// Converts a wide C string to an std::string using the UTF-8 encoding.
        -: 2045:// NULL will be converted to "(null)".
function _ZN7testing8internal6String15ShowWideCStringB5cxx11EPKw called 0 returned 0% blocks executed 0%
    #####: 2046:std::string String::ShowWideCString(const wchar_t * wide_c_str) {
    #####: 2047:  if (wide_c_str == nullptr) return "(null)";
    %%%%%: 2047-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2047-block  1
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2047-block  2
call    6 never executed
    $$$$$: 2047-block  3
call    7 never executed
        -: 2048:
    #####: 2049:  return internal::WideStringToUtf8(wide_c_str, -1);
    %%%%%: 2049-block  0
call    0 never executed
        -: 2050:}
        -: 2051:
        -: 2052:// Compares two wide C strings.  Returns true if and only if they have the
        -: 2053:// same content.
        -: 2054://
        -: 2055:// Unlike wcscmp(), this function can handle NULL argument(s).  A NULL
        -: 2056:// C string is considered different to any non-NULL C string,
        -: 2057:// including the empty string.
function _ZN7testing8internal6String17WideCStringEqualsEPKwS3_ called 0 returned 0% blocks executed 0%
    #####: 2058:bool String::WideCStringEquals(const wchar_t * lhs, const wchar_t * rhs) {
    #####: 2059:  if (lhs == nullptr) return rhs == nullptr;
    %%%%%: 2059-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2059-block  1
        -: 2060:
    #####: 2061:  if (rhs == nullptr) return false;
    %%%%%: 2061-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2061-block  1
        -: 2062:
    #####: 2063:  return wcscmp(lhs, rhs) == 0;
    %%%%%: 2063-block  0
call    0 never executed
        -: 2064:}
        -: 2065:
        -: 2066:// Helper function for *_STREQ on wide strings.
function _ZN7testing8internal14CmpHelperSTREQEPKcS2_PKwS4_ called 0 returned 0% blocks executed 0%
    #####: 2067:AssertionResult CmpHelperSTREQ(const char* lhs_expression,
        -: 2068:                               const char* rhs_expression,
        -: 2069:                               const wchar_t* lhs,
        -: 2070:                               const wchar_t* rhs) {
    #####: 2071:  if (String::WideCStringEquals(lhs, rhs)) {
    %%%%%: 2071-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2072:    return AssertionSuccess();
    %%%%%: 2072-block  0
call    0 never executed
        -: 2073:  }
        -: 2074:
        -: 2075:  return EqFailure(lhs_expression,
        -: 2076:                   rhs_expression,
    #####: 2077:                   PrintToString(lhs),
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2077-block  0
call    3 never executed
    $$$$$: 2077-block  1
call    4 never executed
    $$$$$: 2077-block  2
    #####: 2078:                   PrintToString(rhs),
    %%%%%: 2078-block  0
call    0 never executed
call    1 never executed
    $$$$$: 2078-block  1
call    2 never executed
    #####: 2079:                   false);
    %%%%%: 2079-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2079-block  1
        -: 2080:}
        -: 2081:
        -: 2082:// Helper function for *_STRNE on wide strings.
function _ZN7testing8internal14CmpHelperSTRNEEPKcS2_PKwS4_ called 0 returned 0% blocks executed 0%
    #####: 2083:AssertionResult CmpHelperSTRNE(const char* s1_expression,
        -: 2084:                               const char* s2_expression,
        -: 2085:                               const wchar_t* s1,
        -: 2086:                               const wchar_t* s2) {
    #####: 2087:  if (!String::WideCStringEquals(s1, s2)) {
    %%%%%: 2087-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2088:    return AssertionSuccess();
    %%%%%: 2088-block  0
call    0 never executed
        -: 2089:  }
        -: 2090:
    #####: 2091:  return AssertionFailure() << "Expected: (" << s1_expression << ") != ("
    %%%%%: 2091-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2091-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 2091-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    $$$$$: 2091-block  3
call   10 never executed
    #####: 2092:                            << s2_expression << "), actual: "
    %%%%%: 2092-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2092-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2093:                            << PrintToString(s1)
    %%%%%: 2093-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2093-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 2093-block  2
call    7 never executed
    $$$$$: 2093-block  3
    #####: 2094:                            << " vs " << PrintToString(s2);
    %%%%%: 2094-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2094-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2094-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 2094-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 2094-block  4
    %%%%%: 2094-block  5
call   12 never executed
call   13 never executed
    $$$$$: 2094-block  6
call   14 never executed
    $$$$$: 2094-block  7
        -: 2095:}
        -: 2096:
        -: 2097:// Compares two C strings, ignoring case.  Returns true if and only if they have
        -: 2098:// the same content.
        -: 2099://
        -: 2100:// Unlike strcasecmp(), this function can handle NULL argument(s).  A
        -: 2101:// NULL C string is considered different to any non-NULL C string,
        -: 2102:// including the empty string.
function _ZN7testing8internal6String28CaseInsensitiveCStringEqualsEPKcS3_ called 4 returned 100% blocks executed 71%
        4: 2103:bool String::CaseInsensitiveCStringEquals(const char * lhs, const char * rhs) {
       4*: 2104:  if (lhs == nullptr) return rhs == nullptr;
        4: 2104-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    %%%%%: 2104-block  1
       4*: 2105:  if (rhs == nullptr) return false;
        4: 2105-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    %%%%%: 2105-block  1
        4: 2106:  return posix::StrCaseCmp(lhs, rhs) == 0;
        4: 2106-block  0
call    0 returned 4
        -: 2107:}
        -: 2108:
        -: 2109:// Compares two wide C strings, ignoring case.  Returns true if and only if they
        -: 2110:// have the same content.
        -: 2111://
        -: 2112:// Unlike wcscasecmp(), this function can handle NULL argument(s).
        -: 2113:// A NULL C string is considered different to any non-NULL wide C string,
        -: 2114:// including the empty string.
        -: 2115:// NB: The implementations on different platforms slightly differ.
        -: 2116:// On windows, this method uses _wcsicmp which compares according to LC_CTYPE
        -: 2117:// environment variable. On GNU platform this method uses wcscasecmp
        -: 2118:// which compares according to LC_CTYPE category of the current locale.
        -: 2119:// On MacOS X, it uses towlower, which also uses LC_CTYPE category of the
        -: 2120:// current locale.
function _ZN7testing8internal6String32CaseInsensitiveWideCStringEqualsEPKwS3_ called 0 returned 0% blocks executed 0%
    #####: 2121:bool String::CaseInsensitiveWideCStringEquals(const wchar_t* lhs,
        -: 2122:                                              const wchar_t* rhs) {
    #####: 2123:  if (lhs == nullptr) return rhs == nullptr;
    %%%%%: 2123-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2123-block  1
        -: 2124:
    #####: 2125:  if (rhs == nullptr) return false;
    %%%%%: 2125-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2125-block  1
        -: 2126:
        -: 2127:#if GTEST_OS_WINDOWS
    #####: 2128:  return _wcsicmp(lhs, rhs) == 0;
    %%%%%: 2128-block  0
call    0 never executed
        -: 2129:#elif GTEST_OS_LINUX && !GTEST_OS_LINUX_ANDROID
        -: 2130:  return wcscasecmp(lhs, rhs) == 0;
        -: 2131:#else
        -: 2132:  // Android, Mac OS X and Cygwin don't define wcscasecmp.
        -: 2133:  // Other unknown OSes may not define it either.
        -: 2134:  wint_t left, right;
        -: 2135:  do {
        -: 2136:    left = towlower(static_cast<wint_t>(*lhs++));
        -: 2137:    right = towlower(static_cast<wint_t>(*rhs++));
        -: 2138:  } while (left && left == right);
        -: 2139:  return left == right;
        -: 2140:#endif  // OS selector
        -: 2141:}
        -: 2142:
        -: 2143:// Returns true if and only if str ends with the given suffix, ignoring case.
        -: 2144:// Any string is considered to end with an empty suffix.
function _ZN7testing8internal6String23EndsWithCaseInsensitiveERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_ called 0 returned 0% blocks executed 0%
    #####: 2145:bool String::EndsWithCaseInsensitive(
        -: 2146:    const std::string& str, const std::string& suffix) {
    #####: 2147:  const size_t str_len = str.length();
    %%%%%: 2147-block  0
call    0 never executed
    #####: 2148:  const size_t suffix_len = suffix.length();
call    0 never executed
    #####: 2149:  return (str_len >= suffix_len) &&
branch  0 never executed
branch  1 never executed
    %%%%%: 2149-block  0
    %%%%%: 2149-block  1
    #####: 2150:         CaseInsensitiveCStringEquals(str.c_str() + str_len - suffix_len,
    %%%%%: 2150-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2151:                                      suffix.c_str());
    %%%%%: 2151-block  0
        -: 2152:}
        -: 2153:
        -: 2154:// Formats an int value as "%02d".
function _ZN7testing8internal6String15FormatIntWidth2B5cxx11Ei called 0 returned 0% blocks executed 0%
    #####: 2155:std::string String::FormatIntWidth2(int value) {
    #####: 2156:  return FormatIntWidthN(value, 2);
    %%%%%: 2156-block  0
call    0 never executed
        -: 2157:}
        -: 2158:
        -: 2159:// Formats an int value to given width with leading zeros.
function _ZN7testing8internal6String15FormatIntWidthNB5cxx11Eii called 0 returned 0% blocks executed 0%
    #####: 2160:std::string String::FormatIntWidthN(int value, int width) {
    #####: 2161:  std::stringstream ss;
    %%%%%: 2161-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2161-block  1
call    4 never executed
    $$$$$: 2161-block  2
call    5 never executed
    #####: 2162:  ss << std::setfill('0') << std::setw(width) << value;
    %%%%%: 2162-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2162-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 2162-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    #####: 2163:  return ss.str();
    %%%%%: 2163-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2163-block  1
    %%%%%: 2163-block  2
        -: 2164:}
        -: 2165:
        -: 2166:// Formats an int value as "%X".
function _ZN7testing8internal6String15FormatHexUInt32B5cxx11Ej called 0 returned 0% blocks executed 0%
    #####: 2167:std::string String::FormatHexUInt32(uint32_t value) {
    #####: 2168:  std::stringstream ss;
    %%%%%: 2168-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2168-block  1
call    4 never executed
    $$$$$: 2168-block  2
call    5 never executed
    #####: 2169:  ss << std::hex << std::uppercase << value;
    %%%%%: 2169-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2169-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2169-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 2170:  return ss.str();
    %%%%%: 2170-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2170-block  1
    %%%%%: 2170-block  2
        -: 2171:}
        -: 2172:
        -: 2173:// Formats an int value as "%X".
function _ZN7testing8internal6String12FormatHexIntB5cxx11Ei called 0 returned 0% blocks executed 0%
    #####: 2174:std::string String::FormatHexInt(int value) {
    #####: 2175:  return FormatHexUInt32(static_cast<uint32_t>(value));
    %%%%%: 2175-block  0
call    0 never executed
        -: 2176:}
        -: 2177:
        -: 2178:// Formats a byte as "%02X".
function _ZN7testing8internal6String10FormatByteB5cxx11Eh called 0 returned 0% blocks executed 0%
    #####: 2179:std::string String::FormatByte(unsigned char value) {
    #####: 2180:  std::stringstream ss;
    %%%%%: 2180-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2180-block  1
call    4 never executed
    $$$$$: 2180-block  2
call    5 never executed
    #####: 2181:  ss << std::setfill('0') << std::setw(2) << std::hex << std::uppercase
    %%%%%: 2181-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2181-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 2181-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 2181-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    #####: 2182:     << static_cast<unsigned int>(value);
    %%%%%: 2182-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2183:  return ss.str();
    %%%%%: 2183-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2183-block  1
    %%%%%: 2183-block  2
        -: 2184:}
        -: 2185:
        -: 2186:// Converts the buffer in a stringstream to an std::string, converting NUL
        -: 2187:// bytes to "\\0" along the way.
function _ZN7testing8internal20StringStreamToStringEPNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEE called 143 returned 100% blocks executed 74%
      143: 2188:std::string StringStreamToString(::std::stringstream* ss) {
      286: 2189:  const ::std::string& str = ss->str();
      143: 2189-block  0
call    0 returned 143
      143: 2189-block  1
call    1 returned 143
    $$$$$: 2189-block  2
call    2 never executed
      143: 2190:  const char* const start = str.c_str();
call    0 returned 143
      143: 2191:  const char* const end = start + str.length();
call    0 returned 143
        -: 2192:
      143: 2193:  std::string result;
call    0 returned 143
      143: 2194:  result.reserve(static_cast<size_t>(2 * (end - start)));
call    0 returned 143
branch  1 taken 143 (fallthrough)
branch  2 taken 0 (throw)
     1231: 2195:  for (const char* ch = start; ch != end; ++ch) {
      143: 2195-block  0
     1231: 2195-block  1
branch  0 taken 1088 (fallthrough)
branch  1 taken 143
     1088: 2195-block  2
     1088: 2196:    if (*ch == '\0') {
     1088: 2196-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1088
    #####: 2197:      result += "\\0";  // Replaces NUL with "\\0";
    %%%%%: 2197-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2198:    } else {
     1088: 2199:      result += *ch;
     1088: 2199-block  0
call    0 returned 1088
branch  1 taken 1088 (fallthrough)
branch  2 taken 0 (throw)
        -: 2200:    }
        -: 2201:  }
        -: 2202:
      286: 2203:  return result;
      143: 2203-block  0
        -: 2204:}
        -: 2205:
        -: 2206:// Appends the user-supplied message to the Google-Test-generated message.
function _ZN7testing8internal17AppendUserMessageERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_7MessageE called 0 returned 0% blocks executed 0%
    #####: 2207:std::string AppendUserMessage(const std::string& gtest_msg,
        -: 2208:                              const Message& user_msg) {
        -: 2209:  // Appends the user message if it's non-empty.
    #####: 2210:  const std::string user_msg_string = user_msg.GetString();
    %%%%%: 2210-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2210-block  1
call    3 never executed
    $$$$$: 2210-block  2
call    4 never executed
    #####: 2211:  if (user_msg_string.empty()) {
    %%%%%: 2211-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2212:    return gtest_msg;
    %%%%%: 2212-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2212-block  1
        -: 2213:  }
    #####: 2214:  if (gtest_msg.empty()) {
    %%%%%: 2214-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2215:    return user_msg_string;
    %%%%%: 2215-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2215-block  1
        -: 2216:  }
    #####: 2217:  return gtest_msg + "\n" + user_msg_string;
    %%%%%: 2217-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2217-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2217-block  2
    %%%%%: 2217-block  3
call    6 never executed
    $$$$$: 2217-block  4
call    7 never executed
    $$$$$: 2217-block  5
        -: 2218:}
        -: 2219:
        -: 2220:}  // namespace internal
        -: 2221:
        -: 2222:// class TestResult
        -: 2223:
        -: 2224:// Creates an empty TestResult.
function _ZN7testing10TestResultC2Ev called 47 returned 100% blocks executed 100%
       47: 2225:TestResult::TestResult()
       47: 2226:    : death_test_count_(0), start_timestamp_(0), elapsed_time_(0) {}
       47: 2226-block  0
call    0 returned 47
call    1 returned 47
call    2 returned 47
        -: 2227:
        -: 2228:// D'tor.
function _ZN7testing10TestResultD2Ev called 0 returned 0% blocks executed 0%
    #####: 2229:TestResult::~TestResult() {
    %%%%%: 2229-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 2230:}
        -: 2231:
        -: 2232:// Returns the i-th test part result among all the results. i can
        -: 2233:// range from 0 to total_part_count() - 1. If i is not in that range,
        -: 2234:// aborts the program.
function _ZNK7testing10TestResult17GetTestPartResultEi called 0 returned 0% blocks executed 0%
    #####: 2235:const TestPartResult& TestResult::GetTestPartResult(int i) const {
    #####: 2236:  if (i < 0 || i >= total_part_count())
    %%%%%: 2236-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2236-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2236-block  2
    %%%%%: 2236-block  3
    %%%%%: 2236-block  4
branch  5 never executed
branch  6 never executed
    #####: 2237:    internal::posix::Abort();
    %%%%%: 2237-block  0
call    0 never executed
    #####: 2238:  return test_part_results_.at(static_cast<size_t>(i));
    %%%%%: 2238-block  0
call    0 never executed
        -: 2239:}
        -: 2240:
        -: 2241:// Returns the i-th test property. i can range from 0 to
        -: 2242:// test_property_count() - 1. If i is not in that range, aborts the
        -: 2243:// program.
function _ZNK7testing10TestResult15GetTestPropertyEi called 0 returned 0% blocks executed 0%
    #####: 2244:const TestProperty& TestResult::GetTestProperty(int i) const {
    #####: 2245:  if (i < 0 || i >= test_property_count())
    %%%%%: 2245-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2245-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2245-block  2
    %%%%%: 2245-block  3
    %%%%%: 2245-block  4
branch  5 never executed
branch  6 never executed
    #####: 2246:    internal::posix::Abort();
    %%%%%: 2246-block  0
call    0 never executed
    #####: 2247:  return test_properties_.at(static_cast<size_t>(i));
    %%%%%: 2247-block  0
call    0 never executed
        -: 2248:}
        -: 2249:
        -: 2250:// Clears the test part results.
function _ZN7testing10TestResult20ClearTestPartResultsEv called 0 returned 0% blocks executed 0%
    #####: 2251:void TestResult::ClearTestPartResults() {
    #####: 2252:  test_part_results_.clear();
    %%%%%: 2252-block  0
call    0 never executed
    #####: 2253:}
        -: 2254:
        -: 2255:// Adds a test part result to the list.
function _ZN7testing10TestResult17AddTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 2256:void TestResult::AddTestPartResult(const TestPartResult& test_part_result) {
    #####: 2257:  test_part_results_.push_back(test_part_result);
    %%%%%: 2257-block  0
call    0 never executed
    #####: 2258:}
        -: 2259:
        -: 2260:// Adds a test property to the list. If a property with the same key as the
        -: 2261:// supplied property is already represented, the value of this test_property
        -: 2262:// replaces the old value for that key.
function _ZN7testing10TestResult14RecordPropertyERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_12TestPropertyE called 0 returned 0% blocks executed 0%
    #####: 2263:void TestResult::RecordProperty(const std::string& xml_element,
        -: 2264:                                const TestProperty& test_property) {
    #####: 2265:  if (!ValidateTestProperty(xml_element, test_property)) {
    %%%%%: 2265-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2265-block  1
branch  3 never executed
branch  4 never executed
    #####: 2266:    return;
    %%%%%: 2266-block  0
    %%%%%: 2266-block  1
        -: 2267:  }
    #####: 2268:  internal::MutexLock lock(&test_properties_mutex_);
    %%%%%: 2268-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2268-block  1
call    3 never executed
        -: 2269:  const std::vector<TestProperty>::iterator property_with_matching_key =
        -: 2270:      std::find_if(test_properties_.begin(), test_properties_.end(),
    #####: 2271:                   internal::TestPropertyKeyIs(test_property.key()));
    %%%%%: 2271-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2271-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 2271-block  2
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 2271-block  3
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 2271-block  4
call   16 never executed
    $$$$$: 2271-block  5
    $$$$$: 2271-block  6
call   17 never executed
    $$$$$: 2271-block  7
    $$$$$: 2271-block  8
call   18 never executed
    $$$$$: 2271-block  9
    #####: 2272:  if (property_with_matching_key == test_properties_.end()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2273:    test_properties_.push_back(test_property);
    %%%%%: 2273-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2274:    return;
    %%%%%: 2274-block  0
        -: 2275:  }
    #####: 2276:  property_with_matching_key->SetValue(test_property.value());
    %%%%%: 2276-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2276-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 2276-block  2
call    9 never executed
call   10 never executed
    $$$$$: 2276-block  3
call   11 never executed
    $$$$$: 2276-block  4
    $$$$$: 2276-block  5
call   12 never executed
    $$$$$: 2276-block  6
        -: 2277:}
        -: 2278:
        -: 2279:// The list of reserved attributes used in the <testsuites> element of XML
        -: 2280:// output.
        -: 2281:static const char* const kReservedTestSuitesAttributes[] = {
        -: 2282:  "disabled",
        -: 2283:  "errors",
        -: 2284:  "failures",
        -: 2285:  "name",
        -: 2286:  "random_seed",
        -: 2287:  "tests",
        -: 2288:  "time",
        -: 2289:  "timestamp"
        -: 2290:};
        -: 2291:
        -: 2292:// The list of reserved attributes used in the <testsuite> element of XML
        -: 2293:// output.
        -: 2294:static const char* const kReservedTestSuiteAttributes[] = {
        -: 2295:    "disabled", "errors", "failures",  "name",
        -: 2296:    "tests",    "time",   "timestamp", "skipped"};
        -: 2297:
        -: 2298:// The list of reserved attributes used in the <testcase> element of XML output.
        -: 2299:static const char* const kReservedTestCaseAttributes[] = {
        -: 2300:    "classname",   "name", "status", "time",  "type_param",
        -: 2301:    "value_param", "file", "line"};
        -: 2302:
        -: 2303:// Use a slightly different set for allowed output to ensure existing tests can
        -: 2304:// still RecordProperty("result") or "RecordProperty(timestamp")
        -: 2305:static const char* const kReservedOutputTestCaseAttributes[] = {
        -: 2306:    "classname",   "name", "status", "time",   "type_param",
        -: 2307:    "value_param", "file", "line",   "result", "timestamp"};
        -: 2308:
        -: 2309:template <size_t kSize>
    #####: 2310:std::vector<std::string> ArrayAsVector(const char* const (&array)[kSize]) {
    #####: 2311:  return std::vector<std::string>(array, array + kSize);
        -: 2312:}
------------------
_ZN7testing13ArrayAsVectorILj10EEESt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERAT__KPKc:
function _ZN7testing13ArrayAsVectorILj10EEESt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERAT__KPKc called 0 returned 0% blocks executed 0%
    #####: 2310:std::vector<std::string> ArrayAsVector(const char* const (&array)[kSize]) {
    #####: 2311:  return std::vector<std::string>(array, array + kSize);
    %%%%%: 2311-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2311-block  1
call    4 never executed
    %%%%%: 2311-block  2
    $$$$$: 2311-block  3
call    5 never executed
        -: 2312:}
------------------
_ZN7testing13ArrayAsVectorILj8EEESt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERAT__KPKc:
function _ZN7testing13ArrayAsVectorILj8EEESt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERAT__KPKc called 0 returned 0% blocks executed 0%
    #####: 2310:std::vector<std::string> ArrayAsVector(const char* const (&array)[kSize]) {
    #####: 2311:  return std::vector<std::string>(array, array + kSize);
    %%%%%: 2311-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2311-block  1
call    4 never executed
    %%%%%: 2311-block  2
    $$$$$: 2311-block  3
call    5 never executed
        -: 2312:}
------------------
        -: 2313:
function _ZN7testingL31GetReservedAttributesForElementERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 2314:static std::vector<std::string> GetReservedAttributesForElement(
        -: 2315:    const std::string& xml_element) {
    #####: 2316:  if (xml_element == "testsuites") {
    %%%%%: 2316-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2317:    return ArrayAsVector(kReservedTestSuitesAttributes);
    %%%%%: 2317-block  0
call    0 never executed
    #####: 2318:  } else if (xml_element == "testsuite") {
    %%%%%: 2318-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2319:    return ArrayAsVector(kReservedTestSuiteAttributes);
    %%%%%: 2319-block  0
call    0 never executed
    #####: 2320:  } else if (xml_element == "testcase") {
    %%%%%: 2320-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2321:    return ArrayAsVector(kReservedTestCaseAttributes);
    %%%%%: 2321-block  0
call    0 never executed
        -: 2322:  } else {
    #####: 2323:    GTEST_CHECK_(false) << "Unrecognized xml_element provided: " << xml_element;
    %%%%%: 2323-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2323-block  1
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 2323-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 2323-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 2323-block  4
call   14 never executed
    $$$$$: 2323-block  5
call   15 never executed
        -: 2324:  }
        -: 2325:  // This code is unreachable but some compilers may not realizes that.
    #####: 2326:  return std::vector<std::string>();
    %%%%%: 2326-block  0
call    0 never executed
        -: 2327:}
        -: 2328:
        -: 2329:// TODO(jdesprez): Merge the two getReserved attributes once skip is improved
function _ZN7testingL37GetReservedOutputAttributesForElementERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 2330:static std::vector<std::string> GetReservedOutputAttributesForElement(
        -: 2331:    const std::string& xml_element) {
    #####: 2332:  if (xml_element == "testsuites") {
    %%%%%: 2332-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2333:    return ArrayAsVector(kReservedTestSuitesAttributes);
    %%%%%: 2333-block  0
call    0 never executed
    #####: 2334:  } else if (xml_element == "testsuite") {
    %%%%%: 2334-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2335:    return ArrayAsVector(kReservedTestSuiteAttributes);
    %%%%%: 2335-block  0
call    0 never executed
    #####: 2336:  } else if (xml_element == "testcase") {
    %%%%%: 2336-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2337:    return ArrayAsVector(kReservedOutputTestCaseAttributes);
    %%%%%: 2337-block  0
call    0 never executed
        -: 2338:  } else {
    #####: 2339:    GTEST_CHECK_(false) << "Unrecognized xml_element provided: " << xml_element;
    %%%%%: 2339-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2339-block  1
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 2339-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 2339-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 2339-block  4
call   14 never executed
    $$$$$: 2339-block  5
call   15 never executed
        -: 2340:  }
        -: 2341:  // This code is unreachable but some compilers may not realizes that.
    #####: 2342:  return std::vector<std::string>();
    %%%%%: 2342-block  0
call    0 never executed
        -: 2343:}
        -: 2344:
function _ZN7testingL14FormatWordListERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS6_EE called 0 returned 0% blocks executed 0%
    #####: 2345:static std::string FormatWordList(const std::vector<std::string>& words) {
    #####: 2346:  Message word_list;
    %%%%%: 2346-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2346-block  1
call    3 never executed
    $$$$$: 2346-block  2
call    4 never executed
    #####: 2347:  for (size_t i = 0; i < words.size(); ++i) {
    %%%%%: 2347-block  0
    %%%%%: 2347-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2347-block  2
    #####: 2348:    if (i > 0 && words.size() > 2) {
    %%%%%: 2348-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2348-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2348-block  2
    %%%%%: 2348-block  3
    %%%%%: 2348-block  4
branch  5 never executed
branch  6 never executed
    #####: 2349:      word_list << ", ";
    %%%%%: 2349-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2350:    }
    #####: 2351:    if (i == words.size() - 1) {
    %%%%%: 2351-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2352:      word_list << "and ";
    %%%%%: 2352-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2353:    }
    #####: 2354:    word_list << "'" << words[i] << "'";
    %%%%%: 2354-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2354-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 2354-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
        -: 2355:  }
    #####: 2356:  return word_list.GetString();
    %%%%%: 2356-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2356-block  1
    %%%%%: 2356-block  2
        -: 2357:}
        -: 2358:
function _ZN7testingL24ValidateTestPropertyNameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIS5_SaIS5_EE called 0 returned 0% blocks executed 0%
    #####: 2359:static bool ValidateTestPropertyName(
        -: 2360:    const std::string& property_name,
        -: 2361:    const std::vector<std::string>& reserved_names) {
    #####: 2362:  if (std::find(reserved_names.begin(), reserved_names.end(), property_name) !=
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2362-block  0
call    5 never executed
    #####: 2363:          reserved_names.end()) {
    %%%%%: 2363-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2363-block  1
call    3 never executed
    #####: 2364:    ADD_FAILURE() << "Reserved key used in RecordProperty(): " << property_name
    %%%%%: 2364-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2364-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 2364-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 2364-block  3
call   10 never executed
    $$$$$: 2364-block  4
call   11 never executed
    $$$$$: 2364-block  5
    $$$$$: 2364-block  6
call   12 never executed
    #####: 2365:                  << " (" << FormatWordList(reserved_names)
    %%%%%: 2365-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2365-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2365-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
    $$$$$: 2365-block  3
call   11 never executed
    $$$$$: 2365-block  4
    #####: 2366:                  << " are reserved by " << GTEST_NAME_ << ")";
    %%%%%: 2366-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2366-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2366-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 2366-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 2367:    return false;
        -: 2368:  }
    #####: 2369:  return true;
    %%%%%: 2369-block  0
        -: 2370:}
        -: 2371:
        -: 2372:// Adds a failure if the key is a reserved attribute of the element named
        -: 2373:// xml_element.  Returns true if the property is valid.
function _ZN7testing10TestResult20ValidateTestPropertyERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_12TestPropertyE called 0 returned 0% blocks executed 0%
    #####: 2374:bool TestResult::ValidateTestProperty(const std::string& xml_element,
        -: 2375:                                      const TestProperty& test_property) {
    #####: 2376:  return ValidateTestPropertyName(test_property.key(),
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2376-block  0
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 2376-block  1
call    8 never executed
call    9 never executed
    $$$$$: 2376-block  2
call   10 never executed
    $$$$$: 2376-block  3
    $$$$$: 2376-block  4
call   11 never executed
    $$$$$: 2376-block  5
    #####: 2377:                                  GetReservedAttributesForElement(xml_element));
    %%%%%: 2377-block  0
call    0 never executed
    %%%%%: 2377-block  1
call    1 never executed
    %%%%%: 2377-block  2
    $$$$$: 2377-block  3
call    2 never executed
        -: 2378:}
        -: 2379:
        -: 2380:// Clears the object.
function _ZN7testing10TestResult5ClearEv called 46 returned 100% blocks executed 100%
       46: 2381:void TestResult::Clear() {
       46: 2382:  test_part_results_.clear();
       46: 2382-block  0
call    0 returned 46
       46: 2383:  test_properties_.clear();
call    0 returned 46
       46: 2384:  death_test_count_ = 0;
       46: 2385:  elapsed_time_ = 0;
       46: 2386:}
        -: 2387:
        -: 2388:// Returns true off the test part was skipped.
function _ZN7testingL15TestPartSkippedERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 2389:static bool TestPartSkipped(const TestPartResult& result) {
    #####: 2390:  return result.skipped();
    %%%%%: 2390-block  0
call    0 never executed
        -: 2391:}
        -: 2392:
        -: 2393:// Returns true if and only if the test was skipped.
function _ZNK7testing10TestResult7SkippedEv called 116 returned 100% blocks executed 88%
      116: 2394:bool TestResult::Skipped() const {
     116*: 2395:  return !Failed() && CountIf(test_part_results_, TestPartSkipped) > 0;
      116: 2395-block  0
call    0 returned 116
branch  1 taken 116 (fallthrough)
branch  2 taken 0
      116: 2395-block  1
call    3 returned 116
branch  4 taken 0 (fallthrough)
branch  5 taken 116
    %%%%%: 2395-block  2
      116: 2395-block  3
      116: 2395-block  4
        -: 2396:}
        -: 2397:
        -: 2398:// Returns true if and only if the test failed.
function _ZNK7testing10TestResult6FailedEv called 302 returned 100% blocks executed 50%
      302: 2399:bool TestResult::Failed() const {
     302*: 2400:  for (int i = 0; i < total_part_count(); ++i) {
      302: 2400-block  0
      302: 2400-block  1
call    0 returned 302
branch  1 taken 0 (fallthrough)
branch  2 taken 302
    %%%%%: 2400-block  2
    #####: 2401:    if (GetTestPartResult(i).failed())
    %%%%%: 2401-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2402:      return true;
    %%%%%: 2402-block  0
        -: 2403:  }
      302: 2404:  return false;
      302: 2404-block  0
        -: 2405:}
        -: 2406:
        -: 2407:// Returns true if and only if the test part fatally failed.
function _ZN7testingL21TestPartFatallyFailedERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 2408:static bool TestPartFatallyFailed(const TestPartResult& result) {
    #####: 2409:  return result.fatally_failed();
    %%%%%: 2409-block  0
call    0 never executed
        -: 2410:}
        -: 2411:
        -: 2412:// Returns true if and only if the test fatally failed.
function _ZNK7testing10TestResult15HasFatalFailureEv called 47 returned 100% blocks executed 100%
       47: 2413:bool TestResult::HasFatalFailure() const {
       47: 2414:  return CountIf(test_part_results_, TestPartFatallyFailed) > 0;
       47: 2414-block  0
call    0 returned 47
        -: 2415:}
        -: 2416:
        -: 2417:// Returns true if and only if the test part non-fatally failed.
function _ZN7testingL24TestPartNonfatallyFailedERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 2418:static bool TestPartNonfatallyFailed(const TestPartResult& result) {
    #####: 2419:  return result.nonfatally_failed();
    %%%%%: 2419-block  0
call    0 never executed
        -: 2420:}
        -: 2421:
        -: 2422:// Returns true if and only if the test has a non-fatal failure.
function _ZNK7testing10TestResult18HasNonfatalFailureEv called 0 returned 0% blocks executed 0%
    #####: 2423:bool TestResult::HasNonfatalFailure() const {
    #####: 2424:  return CountIf(test_part_results_, TestPartNonfatallyFailed) > 0;
    %%%%%: 2424-block  0
call    0 never executed
        -: 2425:}
        -: 2426:
        -: 2427:// Gets the number of all test parts.  This is the sum of the number
        -: 2428:// of successful test parts and the number of failed test parts.
function _ZNK7testing10TestResult16total_part_countEv called 302 returned 100% blocks executed 100%
      302: 2429:int TestResult::total_part_count() const {
      302: 2430:  return static_cast<int>(test_part_results_.size());
      302: 2430-block  0
call    0 returned 302
        -: 2431:}
        -: 2432:
        -: 2433:// Returns the number of the test properties.
function _ZNK7testing10TestResult19test_property_countEv called 0 returned 0% blocks executed 0%
    #####: 2434:int TestResult::test_property_count() const {
    #####: 2435:  return static_cast<int>(test_properties_.size());
    %%%%%: 2435-block  0
call    0 never executed
        -: 2436:}
        -: 2437:
        -: 2438:// class Test
        -: 2439:
        -: 2440:// Creates a Test object.
        -: 2441:
        -: 2442:// The c'tor saves the states of all flags.
function _ZN7testing4TestC2Ev called 23 returned 100% blocks executed 83%
       23: 2443:Test::Test()
       23: 2444:    : gtest_flag_saver_(new GTEST_FLAG_SAVER_) {
       23: 2444-block  0
call    0 returned 23
call    1 returned 23
branch  2 taken 23 (fallthrough)
branch  3 taken 0 (throw)
       23: 2444-block  1
call    4 returned 23
    $$$$$: 2444-block  2
call    5 never executed
       23: 2445:}
        -: 2446:
        -: 2447:// The d'tor restores the states of all flags.  The actual work is
        -: 2448:// done by the d'tor of the gtest_flag_saver_ field, and thus not
        -: 2449:// visible here.
      23*: 2450:Test::~Test() {
      23*: 2451:}
------------------
_ZN7testing4TestD0Ev:
function _ZN7testing4TestD0Ev called 0 returned 0% blocks executed 0%
    #####: 2450:Test::~Test() {
    #####: 2451:}
    %%%%%: 2451-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7testing4TestD2Ev:
function _ZN7testing4TestD2Ev called 23 returned 100% blocks executed 100%
       23: 2450:Test::~Test() {
       23: 2450-block  0
call    0 returned 23
       23: 2451:}
------------------
        -: 2452:
        -: 2453:// Sets up the test fixture.
        -: 2454://
        -: 2455:// A sub-class may override this.
function _ZN7testing4Test5SetUpEv called 23 returned 100% blocks executed 100%
       23: 2456:void Test::SetUp() {
       23: 2457:}
        -: 2458:
        -: 2459:// Tears down the test fixture.
        -: 2460://
        -: 2461:// A sub-class may override this.
function _ZN7testing4Test8TearDownEv called 23 returned 100% blocks executed 100%
       23: 2462:void Test::TearDown() {
       23: 2463:}
        -: 2464:
        -: 2465:// Allows user supplied key value pairs to be recorded for later output.
function _ZN7testing4Test14RecordPropertyERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_ called 0 returned 0% blocks executed 0%
    #####: 2466:void Test::RecordProperty(const std::string& key, const std::string& value) {
    #####: 2467:  UnitTest::GetInstance()->RecordProperty(key, value);
    %%%%%: 2467-block  0
call    0 never executed
call    1 never executed
    #####: 2468:}
        -: 2469:
        -: 2470:// Allows user supplied key value pairs to be recorded for later output.
function _ZN7testing4Test14RecordPropertyERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi called 0 returned 0% blocks executed 0%
    #####: 2471:void Test::RecordProperty(const std::string& key, int value) {
    #####: 2472:  Message value_message;
    %%%%%: 2472-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2472-block  1
call    3 never executed
    #####: 2473:  value_message << value;
    %%%%%: 2473-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2474:  RecordProperty(key, value_message.GetString().c_str());
    %%%%%: 2474-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2474-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 2474-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 2474-block  3
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 2474-block  4
call   15 never executed
    $$$$$: 2474-block  5
    $$$$$: 2474-block  6
call   16 never executed
    $$$$$: 2474-block  7
    $$$$$: 2474-block  8
call   17 never executed
    $$$$$: 2474-block  9
    #####: 2475:}
        -: 2476:
        -: 2477:namespace internal {
        -: 2478:
function _ZN7testing8internal30ReportFailureInUnknownLocationENS_14TestPartResult4TypeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 2479:void ReportFailureInUnknownLocation(TestPartResult::Type result_type,
        -: 2480:                                    const std::string& message) {
        -: 2481:  // This function is a friend of UnitTest and as such has access to
        -: 2482:  // AddTestPartResult.
    #####: 2483:  UnitTest::GetInstance()->AddTestPartResult(
    %%%%%: 2483-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2483-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 2483-block  2
call    8 never executed
call    9 never executed
    $$$$$: 2483-block  3
call   10 never executed
    $$$$$: 2483-block  4
    $$$$$: 2483-block  5
call   11 never executed
        -: 2484:      result_type,
        -: 2485:      nullptr,  // No info about the source file where the exception occurred.
        -: 2486:      -1,       // We have no info on which line caused the exception.
        -: 2487:      message,
        -: 2488:      "");  // No stack trace, either.
    #####: 2489:}
        -: 2490:
        -: 2491:}  // namespace internal
        -: 2492:
        -: 2493:// Google Test requires all tests in the same test suite to use the same test
        -: 2494:// fixture class.  This function checks if the current test has the
        -: 2495:// same fixture class as the first test in the current test suite.  If
        -: 2496:// yes, it returns true; otherwise it generates a Google Test failure and
        -: 2497:// returns false.
function _ZN7testing4Test19HasSameFixtureClassEv called 23 returned 100% blocks executed 15%
       23: 2498:bool Test::HasSameFixtureClass() {
       23: 2499:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
       23: 2499-block  0
call    0 returned 23
branch  1 taken 23 (fallthrough)
branch  2 taken 0 (throw)
       23: 2500:  const TestSuite* const test_suite = impl->current_test_suite();
       23: 2500-block  0
call    0 returned 23
        -: 2501:
        -: 2502:  // Info about the first test in the current test suite.
       23: 2503:  const TestInfo* const first_test_info = test_suite->test_info_list()[0];
call    0 returned 23
call    1 returned 23
       23: 2504:  const internal::TypeId first_fixture_id = first_test_info->fixture_class_id_;
       23: 2505:  const char* const first_test_name = first_test_info->name();
call    0 returned 23
        -: 2506:
        -: 2507:  // Info about the current test.
       23: 2508:  const TestInfo* const this_test_info = impl->current_test_info();
call    0 returned 23
       23: 2509:  const internal::TypeId this_fixture_id = this_test_info->fixture_class_id_;
       23: 2510:  const char* const this_test_name = this_test_info->name();
call    0 returned 23
        -: 2511:
       23: 2512:  if (this_fixture_id != first_fixture_id) {
branch  0 taken 0 (fallthrough)
branch  1 taken 23
        -: 2513:    // Is the first test defined using TEST?
    #####: 2514:    const bool first_is_TEST = first_fixture_id == internal::GetTestTypeId();
    %%%%%: 2514-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2515:    // Is this test defined using TEST?
    #####: 2516:    const bool this_is_TEST = this_fixture_id == internal::GetTestTypeId();
    %%%%%: 2516-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2517:
    #####: 2518:    if (first_is_TEST || this_is_TEST) {
    %%%%%: 2518-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2518-block  1
branch  2 never executed
branch  3 never executed
        -: 2519:      // Both TEST and TEST_F appear in same test suite, which is incorrect.
        -: 2520:      // Tell the user how to fix this.
        -: 2521:
        -: 2522:      // Gets the name of the TEST and the name of the TEST_F.  Note
        -: 2523:      // that first_is_TEST and this_is_TEST cannot both be true, as
        -: 2524:      // the fixture IDs are different for the two tests.
    #####: 2525:      const char* const TEST_name =
    %%%%%: 2525-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2525-block  1
    %%%%%: 2525-block  2
        -: 2526:          first_is_TEST ? first_test_name : this_test_name;
    #####: 2527:      const char* const TEST_F_name =
    %%%%%: 2527-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2527-block  1
    %%%%%: 2527-block  2
        -: 2528:          first_is_TEST ? this_test_name : first_test_name;
        -: 2529:
    #####: 2530:      ADD_FAILURE()
    %%%%%: 2530-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2530-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2530-block  2
call    6 never executed
    $$$$$: 2530-block  3
call    7 never executed
    $$$$$: 2530-block  4
    $$$$$: 2530-block  5
call    8 never executed
    $$$$$: 2530-block  6
    #####: 2531:          << "All tests in the same test suite must use the same test fixture\n"
    %%%%%: 2531-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2532:          << "class, so mixing TEST_F and TEST in the same test suite is\n"
    %%%%%: 2532-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2533:          << "illegal.  In test suite " << this_test_info->test_suite_name()
    %%%%%: 2533-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2533-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    $$$$$: 2533-block  2
    #####: 2534:          << ",\n"
    %%%%%: 2534-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2535:          << "test " << TEST_F_name << " is defined using TEST_F but\n"
    %%%%%: 2535-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2535-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2535-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 2536:          << "test " << TEST_name << " is defined using TEST.  You probably\n"
    %%%%%: 2536-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2536-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2536-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 2537:          << "want to change the TEST to TEST_F or move it to another test\n"
    %%%%%: 2537-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2538:          << "case.";
    %%%%%: 2538-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2538-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 2539:    } else {
        -: 2540:      // Two fixture classes with the same name appear in two different
        -: 2541:      // namespaces, which is not allowed. Tell the user how to fix this.
    #####: 2542:      ADD_FAILURE()
    %%%%%: 2542-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2542-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2542-block  2
call    6 never executed
    $$$$$: 2542-block  3
call    7 never executed
    $$$$$: 2542-block  4
    $$$$$: 2542-block  5
call    8 never executed
    $$$$$: 2542-block  6
    #####: 2543:          << "All tests in the same test suite must use the same test fixture\n"
    %%%%%: 2543-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2544:          << "class.  However, in test suite "
    %%%%%: 2544-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2545:          << this_test_info->test_suite_name() << ",\n"
    %%%%%: 2545-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2545-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    $$$$$: 2545-block  2
    #####: 2546:          << "you defined test " << first_test_name << " and test "
    %%%%%: 2546-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2546-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2546-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 2547:          << this_test_name << "\n"
    %%%%%: 2547-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2547-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2548:          << "using two different test fixture classes.  This can happen if\n"
    %%%%%: 2548-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2549:          << "the two classes are from different namespaces or translation\n"
    %%%%%: 2549-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2550:          << "units and have the same name.  You should probably rename one\n"
    %%%%%: 2550-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2551:          << "of the classes to put the tests into different test suites.";
    %%%%%: 2551-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2551-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 2552:    }
    #####: 2553:    return false;
    %%%%%: 2553-block  0
        -: 2554:  }
        -: 2555:
       23: 2556:  return true;
       23: 2556-block  0
        -: 2557:}
        -: 2558:
        -: 2559:#if GTEST_HAS_SEH
        -: 2560:
        -: 2561:// Adds an "exception thrown" fatal failure to the current test.  This
        -: 2562:// function returns its result via an output parameter pointer because VC++
        -: 2563:// prohibits creation of objects with destructors on stack in functions
        -: 2564:// using __try (see error C2712).
        -: 2565:static std::string* FormatSehExceptionMessage(DWORD exception_code,
        -: 2566:                                              const char* location) {
        -: 2567:  Message message;
        -: 2568:  message << "SEH exception with code 0x" << std::setbase(16) <<
        -: 2569:    exception_code << std::setbase(10) << " thrown in " << location << ".";
        -: 2570:
        -: 2571:  return new std::string(message.GetString());
        -: 2572:}
        -: 2573:
        -: 2574:#endif  // GTEST_HAS_SEH
        -: 2575:
        -: 2576:namespace internal {
        -: 2577:
        -: 2578:#if GTEST_HAS_EXCEPTIONS
        -: 2579:
        -: 2580:// Adds an "exception thrown" fatal failure to the current test.
function _ZN7testing8internalL25FormatCxxExceptionMessageEPKcS2_ called 0 returned 0% blocks executed 0%
    #####: 2581:static std::string FormatCxxExceptionMessage(const char* description,
        -: 2582:                                             const char* location) {
    #####: 2583:  Message message;
    %%%%%: 2583-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2583-block  1
call    3 never executed
    $$$$$: 2583-block  2
call    4 never executed
    #####: 2584:  if (description != nullptr) {
    %%%%%: 2584-block  0
branch  0 never executed
branch  1 never executed
    #####: 2585:    message << "C++ exception with description \"" << description << "\"";
    %%%%%: 2585-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2585-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2585-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 2586:  } else {
    #####: 2587:    message << "Unknown C++ exception";
    %%%%%: 2587-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2588:  }
    #####: 2589:  message << " thrown in " << location << ".";
    %%%%%: 2589-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2589-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2589-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 2590:
    #####: 2591:  return message.GetString();
    %%%%%: 2591-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2591-block  1
    %%%%%: 2591-block  2
        -: 2592:}
        -: 2593:
        -: 2594:static std::string PrintTestPartResultToString(
        -: 2595:    const TestPartResult& test_part_result);
        -: 2596:
function _ZN7testing8internal26GoogleTestFailureExceptionC2ERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 2597:GoogleTestFailureException::GoogleTestFailureException(
    #####: 2598:    const TestPartResult& failure)
    #####: 2599:    : ::std::runtime_error(PrintTestPartResultToString(failure).c_str()) {}
    %%%%%: 2599-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2599-block  1
call    5 never executed
    $$$$$: 2599-block  2
call    6 never executed
        -: 2600:
        -: 2601:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2602:
        -: 2603:// We put these helper functions in the internal namespace as IBM's xlC
        -: 2604:// compiler rejects the code if they were declared static.
        -: 2605:
        -: 2606:// Runs the given method and handles SEH exceptions it throws, when
        -: 2607:// SEH is supported; returns the 0-value for type Result in case of an
        -: 2608:// SEH exception.  (Microsoft compilers cannot handle SEH and C++
        -: 2609:// exceptions in the same function.  Therefore, we provide a separate
        -: 2610:// wrapper function for handling SEH exceptions.)
        -: 2611:template <class T, typename Result>
      162: 2612:Result HandleSehExceptionsInMethodIfSupported(
        -: 2613:    T* object, Result (T::*method)(), const char* location) {
        -: 2614:#if GTEST_HAS_SEH
        -: 2615:  __try {
        -: 2616:    return (object->*method)();
        -: 2617:  } __except (internal::UnitTestOptions::GTestShouldProcessSEH(  // NOLINT
        -: 2618:      GetExceptionCode())) {
        -: 2619:    // We create the exception message on the heap because VC++ prohibits
        -: 2620:    // creation of objects with destructors on stack in functions using __try
        -: 2621:    // (see error C2712).
        -: 2622:    std::string* exception_message = FormatSehExceptionMessage(
        -: 2623:        GetExceptionCode(), location);
        -: 2624:    internal::ReportFailureInUnknownLocation(TestPartResult::kFatalFailure,
        -: 2625:                                             *exception_message);
        -: 2626:    delete exception_message;
        -: 2627:    return static_cast<Result>(0);
        -: 2628:  }
        -: 2629:#else
        -: 2630:  (void)location;
     162*: 2631:  return (object->*method)();
        -: 2632:#endif  // GTEST_HAS_SEH
        -: 2633:}
------------------
_ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS0_12UnitTestImplEbEET0_PT_MS4_FS3_vEPKc:
function _ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS0_12UnitTestImplEbEET0_PT_MS4_FS3_vEPKc called 1 returned 100% blocks executed 83%
        1: 2612:Result HandleSehExceptionsInMethodIfSupported(
        -: 2613:    T* object, Result (T::*method)(), const char* location) {
        -: 2614:#if GTEST_HAS_SEH
        -: 2615:  __try {
        -: 2616:    return (object->*method)();
        -: 2617:  } __except (internal::UnitTestOptions::GTestShouldProcessSEH(  // NOLINT
        -: 2618:      GetExceptionCode())) {
        -: 2619:    // We create the exception message on the heap because VC++ prohibits
        -: 2620:    // creation of objects with destructors on stack in functions using __try
        -: 2621:    // (see error C2712).
        -: 2622:    std::string* exception_message = FormatSehExceptionMessage(
        -: 2623:        GetExceptionCode(), location);
        -: 2624:    internal::ReportFailureInUnknownLocation(TestPartResult::kFatalFailure,
        -: 2625:                                             *exception_message);
        -: 2626:    delete exception_message;
        -: 2627:    return static_cast<Result>(0);
        -: 2628:  }
        -: 2629:#else
        -: 2630:  (void)location;
       1*: 2631:  return (object->*method)();
        1: 2631-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 2631-block  1
        1: 2631-block  2
        1: 2631-block  3
call    2 returned 1
        -: 2632:#endif  // GTEST_HAS_SEH
        -: 2633:}
------------------
_ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS_9TestSuiteEvEET0_PT_MS4_FS3_vEPKc:
function _ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS_9TestSuiteEvEET0_PT_MS4_FS3_vEPKc called 46 returned 100% blocks executed 80%
       46: 2612:Result HandleSehExceptionsInMethodIfSupported(
        -: 2613:    T* object, Result (T::*method)(), const char* location) {
        -: 2614:#if GTEST_HAS_SEH
        -: 2615:  __try {
        -: 2616:    return (object->*method)();
        -: 2617:  } __except (internal::UnitTestOptions::GTestShouldProcessSEH(  // NOLINT
        -: 2618:      GetExceptionCode())) {
        -: 2619:    // We create the exception message on the heap because VC++ prohibits
        -: 2620:    // creation of objects with destructors on stack in functions using __try
        -: 2621:    // (see error C2712).
        -: 2622:    std::string* exception_message = FormatSehExceptionMessage(
        -: 2623:        GetExceptionCode(), location);
        -: 2624:    internal::ReportFailureInUnknownLocation(TestPartResult::kFatalFailure,
        -: 2625:                                             *exception_message);
        -: 2626:    delete exception_message;
        -: 2627:    return static_cast<Result>(0);
        -: 2628:  }
        -: 2629:#else
        -: 2630:  (void)location;
      46*: 2631:  return (object->*method)();
       46: 2631-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 46
    %%%%%: 2631-block  1
       46: 2631-block  2
       46: 2631-block  3
call    2 returned 46
        -: 2632:#endif  // GTEST_HAS_SEH
        -: 2633:}
------------------
_ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS0_15TestFactoryBaseEPNS_4TestEEET0_PT_MS6_FS5_vEPKc:
function _ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS0_15TestFactoryBaseEPNS_4TestEEET0_PT_MS6_FS5_vEPKc called 23 returned 100% blocks executed 83%
       23: 2612:Result HandleSehExceptionsInMethodIfSupported(
        -: 2613:    T* object, Result (T::*method)(), const char* location) {
        -: 2614:#if GTEST_HAS_SEH
        -: 2615:  __try {
        -: 2616:    return (object->*method)();
        -: 2617:  } __except (internal::UnitTestOptions::GTestShouldProcessSEH(  // NOLINT
        -: 2618:      GetExceptionCode())) {
        -: 2619:    // We create the exception message on the heap because VC++ prohibits
        -: 2620:    // creation of objects with destructors on stack in functions using __try
        -: 2621:    // (see error C2712).
        -: 2622:    std::string* exception_message = FormatSehExceptionMessage(
        -: 2623:        GetExceptionCode(), location);
        -: 2624:    internal::ReportFailureInUnknownLocation(TestPartResult::kFatalFailure,
        -: 2625:                                             *exception_message);
        -: 2626:    delete exception_message;
        -: 2627:    return static_cast<Result>(0);
        -: 2628:  }
        -: 2629:#else
        -: 2630:  (void)location;
      23*: 2631:  return (object->*method)();
       23: 2631-block  0
branch  0 taken 23 (fallthrough)
branch  1 taken 0
       23: 2631-block  1
    %%%%%: 2631-block  2
       23: 2631-block  3
call    2 returned 23
        -: 2632:#endif  // GTEST_HAS_SEH
        -: 2633:}
------------------
_ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS_4TestEvEET0_PT_MS4_FS3_vEPKc:
function _ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS_4TestEvEET0_PT_MS4_FS3_vEPKc called 92 returned 100% blocks executed 100%
       92: 2612:Result HandleSehExceptionsInMethodIfSupported(
        -: 2613:    T* object, Result (T::*method)(), const char* location) {
        -: 2614:#if GTEST_HAS_SEH
        -: 2615:  __try {
        -: 2616:    return (object->*method)();
        -: 2617:  } __except (internal::UnitTestOptions::GTestShouldProcessSEH(  // NOLINT
        -: 2618:      GetExceptionCode())) {
        -: 2619:    // We create the exception message on the heap because VC++ prohibits
        -: 2620:    // creation of objects with destructors on stack in functions using __try
        -: 2621:    // (see error C2712).
        -: 2622:    std::string* exception_message = FormatSehExceptionMessage(
        -: 2623:        GetExceptionCode(), location);
        -: 2624:    internal::ReportFailureInUnknownLocation(TestPartResult::kFatalFailure,
        -: 2625:                                             *exception_message);
        -: 2626:    delete exception_message;
        -: 2627:    return static_cast<Result>(0);
        -: 2628:  }
        -: 2629:#else
        -: 2630:  (void)location;
       92: 2631:  return (object->*method)();
       92: 2631-block  0
branch  0 taken 69 (fallthrough)
branch  1 taken 23
       69: 2631-block  1
       23: 2631-block  2
       92: 2631-block  3
call    2 returned 92
        -: 2632:#endif  // GTEST_HAS_SEH
        -: 2633:}
------------------
        -: 2634:
        -: 2635:// Runs the given method and catches and reports C++ and/or SEH-style
        -: 2636:// exceptions, if they are supported; returns the 0-value for type
        -: 2637:// Result in case of an SEH exception.
        -: 2638:template <class T, typename Result>
      162: 2639:Result HandleExceptionsInMethodIfSupported(
        -: 2640:    T* object, Result (T::*method)(), const char* location) {
        -: 2641:  // NOTE: The user code can affect the way in which Google Test handles
        -: 2642:  // exceptions by setting GTEST_FLAG(catch_exceptions), but only before
        -: 2643:  // RUN_ALL_TESTS() starts. It is technically possible to check the flag
        -: 2644:  // after the exception is caught and either report or re-throw the
        -: 2645:  // exception based on the flag's value:
        -: 2646:  //
        -: 2647:  // try {
        -: 2648:  //   // Perform the test method.
        -: 2649:  // } catch (...) {
        -: 2650:  //   if (GTEST_FLAG_GET(catch_exceptions))
        -: 2651:  //     // Report the exception as failure.
        -: 2652:  //   else
        -: 2653:  //     throw;  // Re-throws the original exception.
        -: 2654:  // }
        -: 2655:  //
        -: 2656:  // However, the purpose of this flag is to allow the program to drop into
        -: 2657:  // the debugger when the exception is thrown. On most platforms, once the
        -: 2658:  // control enters the catch block, the exception origin information is
        -: 2659:  // lost and the debugger will stop the program at the point of the
        -: 2660:  // re-throw in this function -- instead of at the point of the original
        -: 2661:  // throw statement in the code under test.  For this reason, we perform
        -: 2662:  // the check early, sacrificing the ability to affect Google Test's
        -: 2663:  // exception handling in the method where the exception is thrown.
      162: 2664:  if (internal::GetUnitTestImpl()->catch_exceptions()) {
        -: 2665:#if GTEST_HAS_EXCEPTIONS
        -: 2666:    try {
      162: 2667:      return HandleSehExceptionsInMethodIfSupported(object, method, location);
    =====: 2668:    } catch (const AssertionException&) {  // NOLINT
        -: 2669:      // This failure was reported already.
    =====: 2670:    } catch (const internal::GoogleTestFailureException&) {  // NOLINT
        -: 2671:      // This exception type can only be thrown by a failed Google
        -: 2672:      // Test assertion with the intention of letting another testing
        -: 2673:      // framework catch it.  Therefore we just re-throw it.
    =====: 2674:      throw;
    =====: 2675:    } catch (const std::exception& e) {  // NOLINT
    =====: 2676:      internal::ReportFailureInUnknownLocation(
        -: 2677:          TestPartResult::kFatalFailure,
    =====: 2678:          FormatCxxExceptionMessage(e.what(), location));
    =====: 2679:    } catch (...) {  // NOLINT
    =====: 2680:      internal::ReportFailureInUnknownLocation(
        -: 2681:          TestPartResult::kFatalFailure,
        -: 2682:          FormatCxxExceptionMessage(nullptr, location));
        -: 2683:    }
    =====: 2684:    return static_cast<Result>(0);
        -: 2685:#else
        -: 2686:    return HandleSehExceptionsInMethodIfSupported(object, method, location);
        -: 2687:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2688:  } else {
    #####: 2689:    return (object->*method)();
        -: 2690:  }
        -: 2691:}
------------------
_ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS0_12UnitTestImplEbEET0_PT_MS4_FS3_vEPKc:
function _ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS0_12UnitTestImplEbEET0_PT_MS4_FS3_vEPKc called 1 returned 100% blocks executed 18%
        1: 2639:Result HandleExceptionsInMethodIfSupported(
        -: 2640:    T* object, Result (T::*method)(), const char* location) {
        -: 2641:  // NOTE: The user code can affect the way in which Google Test handles
        -: 2642:  // exceptions by setting GTEST_FLAG(catch_exceptions), but only before
        -: 2643:  // RUN_ALL_TESTS() starts. It is technically possible to check the flag
        -: 2644:  // after the exception is caught and either report or re-throw the
        -: 2645:  // exception based on the flag's value:
        -: 2646:  //
        -: 2647:  // try {
        -: 2648:  //   // Perform the test method.
        -: 2649:  // } catch (...) {
        -: 2650:  //   if (GTEST_FLAG_GET(catch_exceptions))
        -: 2651:  //     // Report the exception as failure.
        -: 2652:  //   else
        -: 2653:  //     throw;  // Re-throws the original exception.
        -: 2654:  // }
        -: 2655:  //
        -: 2656:  // However, the purpose of this flag is to allow the program to drop into
        -: 2657:  // the debugger when the exception is thrown. On most platforms, once the
        -: 2658:  // control enters the catch block, the exception origin information is
        -: 2659:  // lost and the debugger will stop the program at the point of the
        -: 2660:  // re-throw in this function -- instead of at the point of the original
        -: 2661:  // throw statement in the code under test.  For this reason, we perform
        -: 2662:  // the check early, sacrificing the ability to affect Google Test's
        -: 2663:  // exception handling in the method where the exception is thrown.
        1: 2664:  if (internal::GetUnitTestImpl()->catch_exceptions()) {
        1: 2664-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        -: 2665:#if GTEST_HAS_EXCEPTIONS
        -: 2666:    try {
        1: 2667:      return HandleSehExceptionsInMethodIfSupported(object, method, location);
        1: 2667-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 2667-block  1
    =====: 2668:    } catch (const AssertionException&) {  // NOLINT
    $$$$$: 2668-block  0
call    0 never executed
call    1 never executed
        -: 2669:      // This failure was reported already.
    =====: 2670:    } catch (const internal::GoogleTestFailureException&) {  // NOLINT
    $$$$$: 2670-block  0
call    0 never executed
    $$$$$: 2670-block  1
call    1 never executed
        -: 2671:      // This exception type can only be thrown by a failed Google
        -: 2672:      // Test assertion with the intention of letting another testing
        -: 2673:      // framework catch it.  Therefore we just re-throw it.
    =====: 2674:      throw;
call    0 never executed
    =====: 2675:    } catch (const std::exception& e) {  // NOLINT
    $$$$$: 2675-block  0
call    0 never executed
    $$$$$: 2675-block  1
call    1 never executed
    =====: 2676:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2676-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 2676-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2676-block  2
call    8 never executed
    $$$$$: 2676-block  3
        -: 2677:          TestPartResult::kFatalFailure,
    =====: 2678:          FormatCxxExceptionMessage(e.what(), location));
call    0 never executed
    =====: 2679:    } catch (...) {  // NOLINT
    $$$$$: 2679-block  0
call    0 never executed
    $$$$$: 2679-block  1
call    1 never executed
    =====: 2680:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2680-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 2680-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2680-block  2
call    8 never executed
    $$$$$: 2680-block  3
        -: 2681:          TestPartResult::kFatalFailure,
        -: 2682:          FormatCxxExceptionMessage(nullptr, location));
        -: 2683:    }
    =====: 2684:    return static_cast<Result>(0);
    $$$$$: 2684-block  0
        -: 2685:#else
        -: 2686:    return HandleSehExceptionsInMethodIfSupported(object, method, location);
        -: 2687:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2688:  } else {
    #####: 2689:    return (object->*method)();
    %%%%%: 2689-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2689-block  1
    %%%%%: 2689-block  2
    %%%%%: 2689-block  3
call    2 never executed
        -: 2690:  }
        -: 2691:}
------------------
_ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS_9TestSuiteEvEET0_PT_MS4_FS3_vEPKc:
function _ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS_9TestSuiteEvEET0_PT_MS4_FS3_vEPKc called 46 returned 100% blocks executed 18%
       46: 2639:Result HandleExceptionsInMethodIfSupported(
        -: 2640:    T* object, Result (T::*method)(), const char* location) {
        -: 2641:  // NOTE: The user code can affect the way in which Google Test handles
        -: 2642:  // exceptions by setting GTEST_FLAG(catch_exceptions), but only before
        -: 2643:  // RUN_ALL_TESTS() starts. It is technically possible to check the flag
        -: 2644:  // after the exception is caught and either report or re-throw the
        -: 2645:  // exception based on the flag's value:
        -: 2646:  //
        -: 2647:  // try {
        -: 2648:  //   // Perform the test method.
        -: 2649:  // } catch (...) {
        -: 2650:  //   if (GTEST_FLAG_GET(catch_exceptions))
        -: 2651:  //     // Report the exception as failure.
        -: 2652:  //   else
        -: 2653:  //     throw;  // Re-throws the original exception.
        -: 2654:  // }
        -: 2655:  //
        -: 2656:  // However, the purpose of this flag is to allow the program to drop into
        -: 2657:  // the debugger when the exception is thrown. On most platforms, once the
        -: 2658:  // control enters the catch block, the exception origin information is
        -: 2659:  // lost and the debugger will stop the program at the point of the
        -: 2660:  // re-throw in this function -- instead of at the point of the original
        -: 2661:  // throw statement in the code under test.  For this reason, we perform
        -: 2662:  // the check early, sacrificing the ability to affect Google Test's
        -: 2663:  // exception handling in the method where the exception is thrown.
       46: 2664:  if (internal::GetUnitTestImpl()->catch_exceptions()) {
       46: 2664-block  0
call    0 returned 46
call    1 returned 46
branch  2 taken 46 (fallthrough)
branch  3 taken 0
        -: 2665:#if GTEST_HAS_EXCEPTIONS
        -: 2666:    try {
       46: 2667:      return HandleSehExceptionsInMethodIfSupported(object, method, location);
       46: 2667-block  0
call    0 returned 46
branch  1 taken 46 (fallthrough)
branch  2 taken 0 (throw)
       46: 2667-block  1
    =====: 2668:    } catch (const AssertionException&) {  // NOLINT
    $$$$$: 2668-block  0
call    0 never executed
call    1 never executed
        -: 2669:      // This failure was reported already.
    =====: 2670:    } catch (const internal::GoogleTestFailureException&) {  // NOLINT
    $$$$$: 2670-block  0
call    0 never executed
    $$$$$: 2670-block  1
call    1 never executed
        -: 2671:      // This exception type can only be thrown by a failed Google
        -: 2672:      // Test assertion with the intention of letting another testing
        -: 2673:      // framework catch it.  Therefore we just re-throw it.
    =====: 2674:      throw;
call    0 never executed
    =====: 2675:    } catch (const std::exception& e) {  // NOLINT
    $$$$$: 2675-block  0
call    0 never executed
    $$$$$: 2675-block  1
call    1 never executed
    =====: 2676:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2676-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 2676-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2676-block  2
call    8 never executed
    $$$$$: 2676-block  3
        -: 2677:          TestPartResult::kFatalFailure,
    =====: 2678:          FormatCxxExceptionMessage(e.what(), location));
call    0 never executed
    =====: 2679:    } catch (...) {  // NOLINT
    $$$$$: 2679-block  0
call    0 never executed
    $$$$$: 2679-block  1
call    1 never executed
    =====: 2680:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2680-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 2680-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2680-block  2
call    8 never executed
    $$$$$: 2680-block  3
        -: 2681:          TestPartResult::kFatalFailure,
        -: 2682:          FormatCxxExceptionMessage(nullptr, location));
        -: 2683:    }
    =====: 2684:    return static_cast<Result>(0);
    $$$$$: 2684-block  0
        -: 2685:#else
        -: 2686:    return HandleSehExceptionsInMethodIfSupported(object, method, location);
        -: 2687:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2688:  } else {
    #####: 2689:    return (object->*method)();
    %%%%%: 2689-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2689-block  1
    %%%%%: 2689-block  2
    %%%%%: 2689-block  3
call    2 never executed
        -: 2690:  }
        -: 2691:}
------------------
_ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS0_15TestFactoryBaseEPNS_4TestEEET0_PT_MS6_FS5_vEPKc:
function _ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS0_15TestFactoryBaseEPNS_4TestEEET0_PT_MS6_FS5_vEPKc called 23 returned 100% blocks executed 18%
       23: 2639:Result HandleExceptionsInMethodIfSupported(
        -: 2640:    T* object, Result (T::*method)(), const char* location) {
        -: 2641:  // NOTE: The user code can affect the way in which Google Test handles
        -: 2642:  // exceptions by setting GTEST_FLAG(catch_exceptions), but only before
        -: 2643:  // RUN_ALL_TESTS() starts. It is technically possible to check the flag
        -: 2644:  // after the exception is caught and either report or re-throw the
        -: 2645:  // exception based on the flag's value:
        -: 2646:  //
        -: 2647:  // try {
        -: 2648:  //   // Perform the test method.
        -: 2649:  // } catch (...) {
        -: 2650:  //   if (GTEST_FLAG_GET(catch_exceptions))
        -: 2651:  //     // Report the exception as failure.
        -: 2652:  //   else
        -: 2653:  //     throw;  // Re-throws the original exception.
        -: 2654:  // }
        -: 2655:  //
        -: 2656:  // However, the purpose of this flag is to allow the program to drop into
        -: 2657:  // the debugger when the exception is thrown. On most platforms, once the
        -: 2658:  // control enters the catch block, the exception origin information is
        -: 2659:  // lost and the debugger will stop the program at the point of the
        -: 2660:  // re-throw in this function -- instead of at the point of the original
        -: 2661:  // throw statement in the code under test.  For this reason, we perform
        -: 2662:  // the check early, sacrificing the ability to affect Google Test's
        -: 2663:  // exception handling in the method where the exception is thrown.
       23: 2664:  if (internal::GetUnitTestImpl()->catch_exceptions()) {
       23: 2664-block  0
call    0 returned 23
call    1 returned 23
branch  2 taken 23 (fallthrough)
branch  3 taken 0
        -: 2665:#if GTEST_HAS_EXCEPTIONS
        -: 2666:    try {
       23: 2667:      return HandleSehExceptionsInMethodIfSupported(object, method, location);
       23: 2667-block  0
call    0 returned 23
branch  1 taken 23 (fallthrough)
branch  2 taken 0 (throw)
       23: 2667-block  1
    =====: 2668:    } catch (const AssertionException&) {  // NOLINT
    $$$$$: 2668-block  0
call    0 never executed
call    1 never executed
        -: 2669:      // This failure was reported already.
    =====: 2670:    } catch (const internal::GoogleTestFailureException&) {  // NOLINT
    $$$$$: 2670-block  0
call    0 never executed
    $$$$$: 2670-block  1
call    1 never executed
        -: 2671:      // This exception type can only be thrown by a failed Google
        -: 2672:      // Test assertion with the intention of letting another testing
        -: 2673:      // framework catch it.  Therefore we just re-throw it.
    =====: 2674:      throw;
call    0 never executed
    =====: 2675:    } catch (const std::exception& e) {  // NOLINT
    $$$$$: 2675-block  0
call    0 never executed
    $$$$$: 2675-block  1
call    1 never executed
    =====: 2676:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2676-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 2676-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2676-block  2
call    8 never executed
    $$$$$: 2676-block  3
        -: 2677:          TestPartResult::kFatalFailure,
    =====: 2678:          FormatCxxExceptionMessage(e.what(), location));
call    0 never executed
    =====: 2679:    } catch (...) {  // NOLINT
    $$$$$: 2679-block  0
call    0 never executed
    $$$$$: 2679-block  1
call    1 never executed
    =====: 2680:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2680-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 2680-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2680-block  2
call    8 never executed
    $$$$$: 2680-block  3
        -: 2681:          TestPartResult::kFatalFailure,
        -: 2682:          FormatCxxExceptionMessage(nullptr, location));
        -: 2683:    }
    =====: 2684:    return static_cast<Result>(0);
    $$$$$: 2684-block  0
        -: 2685:#else
        -: 2686:    return HandleSehExceptionsInMethodIfSupported(object, method, location);
        -: 2687:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2688:  } else {
    #####: 2689:    return (object->*method)();
    %%%%%: 2689-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2689-block  1
    %%%%%: 2689-block  2
    %%%%%: 2689-block  3
call    2 never executed
        -: 2690:  }
        -: 2691:}
------------------
_ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS_4TestEvEET0_PT_MS4_FS3_vEPKc:
function _ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS_4TestEvEET0_PT_MS4_FS3_vEPKc called 92 returned 100% blocks executed 18%
       92: 2639:Result HandleExceptionsInMethodIfSupported(
        -: 2640:    T* object, Result (T::*method)(), const char* location) {
        -: 2641:  // NOTE: The user code can affect the way in which Google Test handles
        -: 2642:  // exceptions by setting GTEST_FLAG(catch_exceptions), but only before
        -: 2643:  // RUN_ALL_TESTS() starts. It is technically possible to check the flag
        -: 2644:  // after the exception is caught and either report or re-throw the
        -: 2645:  // exception based on the flag's value:
        -: 2646:  //
        -: 2647:  // try {
        -: 2648:  //   // Perform the test method.
        -: 2649:  // } catch (...) {
        -: 2650:  //   if (GTEST_FLAG_GET(catch_exceptions))
        -: 2651:  //     // Report the exception as failure.
        -: 2652:  //   else
        -: 2653:  //     throw;  // Re-throws the original exception.
        -: 2654:  // }
        -: 2655:  //
        -: 2656:  // However, the purpose of this flag is to allow the program to drop into
        -: 2657:  // the debugger when the exception is thrown. On most platforms, once the
        -: 2658:  // control enters the catch block, the exception origin information is
        -: 2659:  // lost and the debugger will stop the program at the point of the
        -: 2660:  // re-throw in this function -- instead of at the point of the original
        -: 2661:  // throw statement in the code under test.  For this reason, we perform
        -: 2662:  // the check early, sacrificing the ability to affect Google Test's
        -: 2663:  // exception handling in the method where the exception is thrown.
       92: 2664:  if (internal::GetUnitTestImpl()->catch_exceptions()) {
       92: 2664-block  0
call    0 returned 92
call    1 returned 92
branch  2 taken 92 (fallthrough)
branch  3 taken 0
        -: 2665:#if GTEST_HAS_EXCEPTIONS
        -: 2666:    try {
       92: 2667:      return HandleSehExceptionsInMethodIfSupported(object, method, location);
       92: 2667-block  0
call    0 returned 92
branch  1 taken 92 (fallthrough)
branch  2 taken 0 (throw)
       92: 2667-block  1
    =====: 2668:    } catch (const AssertionException&) {  // NOLINT
    $$$$$: 2668-block  0
call    0 never executed
call    1 never executed
        -: 2669:      // This failure was reported already.
    =====: 2670:    } catch (const internal::GoogleTestFailureException&) {  // NOLINT
    $$$$$: 2670-block  0
call    0 never executed
    $$$$$: 2670-block  1
call    1 never executed
        -: 2671:      // This exception type can only be thrown by a failed Google
        -: 2672:      // Test assertion with the intention of letting another testing
        -: 2673:      // framework catch it.  Therefore we just re-throw it.
    =====: 2674:      throw;
call    0 never executed
    =====: 2675:    } catch (const std::exception& e) {  // NOLINT
    $$$$$: 2675-block  0
call    0 never executed
    $$$$$: 2675-block  1
call    1 never executed
    =====: 2676:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2676-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 2676-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2676-block  2
call    8 never executed
    $$$$$: 2676-block  3
        -: 2677:          TestPartResult::kFatalFailure,
    =====: 2678:          FormatCxxExceptionMessage(e.what(), location));
call    0 never executed
    =====: 2679:    } catch (...) {  // NOLINT
    $$$$$: 2679-block  0
call    0 never executed
    $$$$$: 2679-block  1
call    1 never executed
    =====: 2680:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2680-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 2680-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2680-block  2
call    8 never executed
    $$$$$: 2680-block  3
        -: 2681:          TestPartResult::kFatalFailure,
        -: 2682:          FormatCxxExceptionMessage(nullptr, location));
        -: 2683:    }
    =====: 2684:    return static_cast<Result>(0);
    $$$$$: 2684-block  0
        -: 2685:#else
        -: 2686:    return HandleSehExceptionsInMethodIfSupported(object, method, location);
        -: 2687:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2688:  } else {
    #####: 2689:    return (object->*method)();
    %%%%%: 2689-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2689-block  1
    %%%%%: 2689-block  2
    %%%%%: 2689-block  3
call    2 never executed
        -: 2690:  }
        -: 2691:}
------------------
        -: 2692:
        -: 2693:}  // namespace internal
        -: 2694:
        -: 2695:// Runs the test and updates the test result.
function _ZN7testing4Test3RunEv called 23 returned 100% blocks executed 90%
       23: 2696:void Test::Run() {
      23*: 2697:  if (!HasSameFixtureClass()) return;
       23: 2697-block  0
call    0 returned 23
branch  1 taken 0 (fallthrough)
branch  2 taken 23
    %%%%%: 2697-block  1
        -: 2698:
       23: 2699:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
       23: 2699-block  0
call    0 returned 23
       23: 2700:  impl->os_stack_trace_getter()->UponLeavingGTest();
call    0 returned 23
call    1 returned 23
       23: 2701:  internal::HandleExceptionsInMethodIfSupported(this, &Test::SetUp, "SetUp()");
call    0 returned 23
        -: 2702:  // We will run the test only if SetUp() was successful and didn't call
        -: 2703:  // GTEST_SKIP().
      23*: 2704:  if (!HasFatalFailure() && !IsSkipped()) {
call    0 returned 23
branch  1 taken 23 (fallthrough)
branch  2 taken 0
       23: 2704-block  0
call    3 returned 23
branch  4 taken 23 (fallthrough)
branch  5 taken 0
       23: 2704-block  1
    %%%%%: 2704-block  2
       23: 2704-block  3
branch  6 taken 23 (fallthrough)
branch  7 taken 0
       23: 2705:    impl->os_stack_trace_getter()->UponLeavingGTest();
       23: 2705-block  0
call    0 returned 23
call    1 returned 23
       23: 2706:    internal::HandleExceptionsInMethodIfSupported(
call    0 returned 23
        -: 2707:        this, &Test::TestBody, "the test body");
        -: 2708:  }
        -: 2709:
        -: 2710:  // However, we want to clean up as much as possible.  Hence we will
        -: 2711:  // always call TearDown(), even if SetUp() or the test body has
        -: 2712:  // failed.
       23: 2713:  impl->os_stack_trace_getter()->UponLeavingGTest();
       23: 2713-block  0
call    0 returned 23
call    1 returned 23
       23: 2714:  internal::HandleExceptionsInMethodIfSupported(
call    0 returned 23
        -: 2715:      this, &Test::TearDown, "TearDown()");
        -: 2716:}
        -: 2717:
        -: 2718:// Returns true if and only if the current test has a fatal failure.
function _ZN7testing4Test15HasFatalFailureEv called 47 returned 100% blocks executed 100%
       47: 2719:bool Test::HasFatalFailure() {
       47: 2720:  return internal::GetUnitTestImpl()->current_test_result()->HasFatalFailure();
       47: 2720-block  0
call    0 returned 47
call    1 returned 47
call    2 returned 47
        -: 2721:}
        -: 2722:
        -: 2723:// Returns true if and only if the current test has a non-fatal failure.
function _ZN7testing4Test18HasNonfatalFailureEv called 0 returned 0% blocks executed 0%
    #####: 2724:bool Test::HasNonfatalFailure() {
        -: 2725:  return internal::GetUnitTestImpl()->current_test_result()->
    #####: 2726:      HasNonfatalFailure();
    %%%%%: 2726-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -: 2727:}
        -: 2728:
        -: 2729:// Returns true if and only if the current test was skipped.
function _ZN7testing4Test9IsSkippedEv called 47 returned 100% blocks executed 100%
       47: 2730:bool Test::IsSkipped() {
       47: 2731:  return internal::GetUnitTestImpl()->current_test_result()->Skipped();
       47: 2731-block  0
call    0 returned 47
call    1 returned 47
call    2 returned 47
        -: 2732:}
        -: 2733:
        -: 2734:// class TestInfo
        -: 2735:
        -: 2736:// Constructs a TestInfo object. It assumes ownership of the test factory
        -: 2737:// object.
function _ZN7testing8TestInfoC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_PKcSA_NS_8internal12CodeLocationEPKvPNSB_15TestFactoryBaseE called 23 returned 100% blocks executed 31%
       23: 2738:TestInfo::TestInfo(const std::string& a_test_suite_name,
        -: 2739:                   const std::string& a_name, const char* a_type_param,
        -: 2740:                   const char* a_value_param,
        -: 2741:                   internal::CodeLocation a_code_location,
        -: 2742:                   internal::TypeId fixture_class_id,
       23: 2743:                   internal::TestFactoryBase* factory)
        -: 2744:    : test_suite_name_(a_test_suite_name),
        -: 2745:      name_(a_name),
    #####: 2746:      type_param_(a_type_param ? new std::string(a_type_param) : nullptr),
    %%%%%: 2746-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2746-block  1
call    3 never executed
    #####: 2747:      value_param_(a_value_param ? new std::string(a_value_param) : nullptr),
    %%%%%: 2747-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2747-block  1
call    3 never executed
        -: 2748:      location_(a_code_location),
        -: 2749:      fixture_class_id_(fixture_class_id),
        -: 2750:      should_run_(false),
        -: 2751:      is_disabled_(false),
        -: 2752:      matches_filter_(false),
        -: 2753:      is_in_another_shard_(false),
        -: 2754:      factory_(factory),
      23*: 2755:      result_() {}
       23: 2755-block  0
call    0 returned 23
call    1 returned 23
branch  2 taken 23 (fallthrough)
branch  3 taken 0 (throw)
       23: 2755-block  1
branch  4 taken 0 (fallthrough)
branch  5 taken 23
    %%%%%: 2755-block  2
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 2755-block  3
       23: 2755-block  4
       23: 2755-block  5
call   10 returned 23
branch 11 taken 0 (fallthrough)
branch 12 taken 23
    %%%%%: 2755-block  6
call   13 never executed
       23: 2755-block  7
branch 14 taken 0 (fallthrough)
branch 15 taken 23
    %%%%%: 2755-block  8
call   16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
    %%%%%: 2755-block  9
       23: 2755-block 10
       23: 2755-block 11
call   20 returned 23
branch 21 taken 0 (fallthrough)
branch 22 taken 23
    %%%%%: 2755-block 12
call   23 never executed
       23: 2755-block 13
call   24 returned 23
branch 25 taken 23 (fallthrough)
branch 26 taken 0 (throw)
       23: 2755-block 14
call   27 returned 23
branch 28 taken 23 (fallthrough)
branch 29 taken 0 (throw)
       23: 2755-block 15
    $$$$$: 2755-block 16
branch 30 never executed
branch 31 never executed
    $$$$$: 2755-block 17
call   32 never executed
    $$$$$: 2755-block 18
    $$$$$: 2755-block 19
branch 33 never executed
branch 34 never executed
    $$$$$: 2755-block 20
call   35 never executed
    $$$$$: 2755-block 21
    $$$$$: 2755-block 22
call   36 never executed
    $$$$$: 2755-block 23
call   37 never executed
    $$$$$: 2755-block 24
call   38 never executed
    $$$$$: 2755-block 25
call   39 never executed
    $$$$$: 2755-block 26
call   40 never executed
        -: 2756:
        -: 2757:// Destructs a TestInfo object.
function _ZN7testing8TestInfoD2Ev called 0 returned 0% blocks executed 0%
    #####: 2758:TestInfo::~TestInfo() { delete factory_; }
    %%%%%: 2758-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2758-block  1
call    2 never executed
    %%%%%: 2758-block  2
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
        -: 2759:
        -: 2760:namespace internal {
        -: 2761:
        -: 2762:// Creates a new TestInfo object and registers it with Google Test;
        -: 2763:// returns the created object.
        -: 2764://
        -: 2765:// Arguments:
        -: 2766://
        -: 2767://   test_suite_name:  name of the test suite
        -: 2768://   name:             name of the test
        -: 2769://   type_param:       the name of the test's type parameter, or NULL if
        -: 2770://                     this is not a typed or a type-parameterized test.
        -: 2771://   value_param:      text representation of the test's value parameter,
        -: 2772://                     or NULL if this is not a value-parameterized test.
        -: 2773://   code_location:    code location where the test is defined
        -: 2774://   fixture_class_id: ID of the test fixture class
        -: 2775://   set_up_tc:        pointer to the function that sets up the test suite
        -: 2776://   tear_down_tc:     pointer to the function that tears down the test suite
        -: 2777://   factory:          pointer to the factory that creates a test object.
        -: 2778://                     The newly created TestInfo instance will assume
        -: 2779://                     ownership of the factory object.
function _ZN7testing8internal23MakeAndRegisterTestInfoEPKcS2_S2_S2_NS0_12CodeLocationEPKvPFvvES7_PNS0_15TestFactoryBaseE called 23 returned 100% blocks executed 52%
       23: 2780:TestInfo* MakeAndRegisterTestInfo(
        -: 2781:    const char* test_suite_name, const char* name, const char* type_param,
        -: 2782:    const char* value_param, CodeLocation code_location,
        -: 2783:    TypeId fixture_class_id, SetUpTestSuiteFunc set_up_tc,
        -: 2784:    TearDownTestSuiteFunc tear_down_tc, TestFactoryBase* factory) {
        -: 2785:  TestInfo* const test_info =
        -: 2786:      new TestInfo(test_suite_name, name, type_param, value_param,
       23: 2787:                   code_location, fixture_class_id, factory);
       23: 2787-block  0
call    0 returned 23
call    1 returned 23
branch  2 taken 23 (fallthrough)
branch  3 taken 0 (throw)
       23: 2787-block  1
call    4 returned 23
call    5 returned 23
branch  6 taken 23 (fallthrough)
branch  7 taken 0 (throw)
       23: 2787-block  2
call    8 returned 23
branch  9 taken 23 (fallthrough)
branch 10 taken 0 (throw)
       23: 2787-block  3
call   11 returned 23
branch 12 taken 23 (fallthrough)
branch 13 taken 0 (throw)
       23: 2787-block  4
call   14 returned 23
branch 15 taken 23 (fallthrough)
branch 16 taken 0 (throw)
       23: 2787-block  5
call   17 returned 23
call   18 returned 23
call   19 returned 23
call   20 returned 23
call   21 returned 23
    $$$$$: 2787-block  6
call   22 never executed
    $$$$$: 2787-block  7
call   23 never executed
    $$$$$: 2787-block  8
    $$$$$: 2787-block  9
call   24 never executed
    $$$$$: 2787-block 10
    $$$$$: 2787-block 11
call   25 never executed
    $$$$$: 2787-block 12
    $$$$$: 2787-block 13
call   26 never executed
    $$$$$: 2787-block 14
    $$$$$: 2787-block 15
call   27 never executed
       23: 2788:  GetUnitTestImpl()->AddTestInfo(set_up_tc, tear_down_tc, test_info);
call    0 returned 23
call    1 returned 23
       23: 2789:  return test_info;
       23: 2789-block  0
        -: 2790:}
        -: 2791:
function _ZN7testing8internal26ReportInvalidTestSuiteTypeEPKcNS0_12CodeLocationE called 0 returned 0% blocks executed 0%
    #####: 2792:void ReportInvalidTestSuiteType(const char* test_suite_name,
        -: 2793:                                CodeLocation code_location) {
    #####: 2794:  Message errors;
    %%%%%: 2794-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2794-block  1
call    3 never executed
        -: 2795:  errors
    #####: 2796:      << "Attempted redefinition of test suite " << test_suite_name << ".\n"
    %%%%%: 2796-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2796-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2796-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 2797:      << "All tests in the same test suite must use the same test fixture\n"
    %%%%%: 2797-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2798:      << "class.  However, in test suite " << test_suite_name << ", you tried\n"
    %%%%%: 2798-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2798-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2798-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 2799:      << "to define a test using a fixture class different from the one\n"
    %%%%%: 2799-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2800:      << "used earlier. This can happen if the two fixture classes are\n"
    %%%%%: 2800-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2801:      << "from different namespaces and have the same name. You should\n"
    %%%%%: 2801-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2802:      << "probably rename one of the classes to put the tests into different\n"
    %%%%%: 2802-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2803:      << "test suites.";
    %%%%%: 2803-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2804:
    #####: 2805:  GTEST_LOG_(ERROR) << FormatFileLocation(code_location.file.c_str(),
    %%%%%: 2805-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2805-block  1
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
    $$$$$: 2805-block  2
call   10 never executed
    $$$$$: 2805-block  3
    $$$$$: 2805-block  4
call   11 never executed
    $$$$$: 2805-block  5
        -: 2806:                                          code_location.line)
    #####: 2807:                    << " " << errors.GetString();
    %%%%%: 2807-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2807-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2807-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 2807-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 2807-block  4
call   12 never executed
call   13 never executed
    $$$$$: 2807-block  5
call   14 never executed
    $$$$$: 2807-block  6
    #####: 2808:}
        -: 2809:}  // namespace internal
        -: 2810:
        -: 2811:namespace {
        -: 2812:
        -: 2813:// A predicate that checks the test name of a TestInfo against a known
        -: 2814:// value.
        -: 2815://
        -: 2816:// This is used for implementation of the TestSuite class only.  We put
        -: 2817:// it in the anonymous namespace to prevent polluting the outer
        -: 2818:// namespace.
        -: 2819://
        -: 2820:// TestNameIs is copyable.
        -: 2821:class TestNameIs {
        -: 2822: public:
        -: 2823:  // Constructor.
        -: 2824:  //
        -: 2825:  // TestNameIs has NO default constructor.
        -: 2826:  explicit TestNameIs(const char* name)
        -: 2827:      : name_(name) {}
        -: 2828:
        -: 2829:  // Returns true if and only if the test name of test_info matches name_.
        -: 2830:  bool operator()(const TestInfo * test_info) const {
        -: 2831:    return test_info && test_info->name() == name_;
        -: 2832:  }
        -: 2833:
        -: 2834: private:
        -: 2835:  std::string name_;
        -: 2836:};
        -: 2837:
        -: 2838:}  // namespace
        -: 2839:
        -: 2840:namespace internal {
        -: 2841:
        -: 2842:// This method expands all parameterized tests registered with macros TEST_P
        -: 2843:// and INSTANTIATE_TEST_SUITE_P into regular tests and registers those.
        -: 2844:// This will be done just once during the program runtime.
function _ZN7testing8internal12UnitTestImpl26RegisterParameterizedTestsEv called 1 returned 100% blocks executed 100%
        1: 2845:void UnitTestImpl::RegisterParameterizedTests() {
        1: 2846:  if (!parameterized_tests_registered_) {
        1: 2846-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 2847:    parameterized_test_registry_.RegisterTests();
        1: 2847-block  0
call    0 returned 1
        1: 2848:    type_parameterized_test_registry_.CheckForInstantiations();
call    0 returned 1
        1: 2849:    parameterized_tests_registered_ = true;
        -: 2850:  }
        1: 2851:}
        -: 2852:
        -: 2853:}  // namespace internal
        -: 2854:
        -: 2855:// Creates the test object, runs it, records its result, and then
        -: 2856:// deletes it.
function _ZN7testing8TestInfo3RunEv called 23 returned 100% blocks executed 87%
       23: 2857:void TestInfo::Run() {
       23: 2858:  TestEventListener* repeater = UnitTest::GetInstance()->listeners().repeater();
       23: 2858-block  0
call    0 returned 23
branch  1 taken 23 (fallthrough)
branch  2 taken 0 (throw)
       23: 2858-block  1
call    3 returned 23
call    4 returned 23
       23: 2859:  if (!should_run_) {
branch  0 taken 0 (fallthrough)
branch  1 taken 23
    #####: 2860:    if (is_disabled_) repeater->OnTestDisabled(*this);
    %%%%%: 2860-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2860-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2861:    return;
    %%%%%: 2861-block  0
        -: 2862:  }
        -: 2863:
        -: 2864:  // Tells UnitTest where to store test result.
       23: 2865:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
       23: 2865-block  0
call    0 returned 23
branch  1 taken 23 (fallthrough)
branch  2 taken 0 (throw)
       23: 2866:  impl->set_current_test_info(this);
       23: 2866-block  0
call    0 returned 23
        -: 2867:
        -: 2868:  // Notifies the unit test event listeners that a test is about to start.
       23: 2869:  repeater->OnTestStart(*this);
call    0 returned 23
branch  1 taken 23 (fallthrough)
branch  2 taken 0 (throw)
       23: 2870:  result_.set_start_timestamp(internal::GetTimeInMillis());
       23: 2870-block  0
call    0 returned 23
branch  1 taken 23 (fallthrough)
branch  2 taken 0 (throw)
       23: 2870-block  1
call    3 returned 23
       23: 2871:  internal::Timer timer;
call    0 returned 23
       23: 2872:  impl->os_stack_trace_getter()->UponLeavingGTest();
call    0 returned 23
branch  1 taken 23 (fallthrough)
branch  2 taken 0 (throw)
       23: 2872-block  0
call    3 returned 23
branch  4 taken 23 (fallthrough)
branch  5 taken 0 (throw)
        -: 2873:
        -: 2874:  // Creates the test object.
       69: 2875:  Test* const test = internal::HandleExceptionsInMethodIfSupported(
       23: 2876:      factory_, &internal::TestFactoryBase::CreateTest,
       23: 2876-block  0
call    0 returned 23
branch  1 taken 23 (fallthrough)
branch  2 taken 0 (throw)
        -: 2877:      "the test fixture's constructor");
        -: 2878:
        -: 2879:  // Runs the test if the constructor didn't generate a fatal failure or invoke
        -: 2880:  // GTEST_SKIP().
        -: 2881:  // Note that the object will not be null
      23*: 2882:  if (!Test::HasFatalFailure() && !Test::IsSkipped()) {
       23: 2882-block  0
call    0 returned 23
branch  1 taken 23 (fallthrough)
branch  2 taken 0 (throw)
       23: 2882-block  1
branch  3 taken 23 (fallthrough)
branch  4 taken 0
       23: 2882-block  2
call    5 returned 23
branch  6 taken 23 (fallthrough)
branch  7 taken 0 (throw)
       23: 2882-block  3
branch  8 taken 23 (fallthrough)
branch  9 taken 0
       23: 2882-block  4
    %%%%%: 2882-block  5
       23: 2882-block  6
branch 10 taken 23 (fallthrough)
branch 11 taken 0
        -: 2883:    // This doesn't throw as all user code that can throw are wrapped into
        -: 2884:    // exception handling code.
       23: 2885:    test->Run();
       23: 2885-block  0
call    0 returned 23
branch  1 taken 23 (fallthrough)
branch  2 taken 0 (throw)
        -: 2886:  }
        -: 2887:
       23: 2888:  if (test != nullptr) {
       23: 2888-block  0
branch  0 taken 23 (fallthrough)
branch  1 taken 0
        -: 2889:    // Deletes the test object.
       23: 2890:    impl->os_stack_trace_getter()->UponLeavingGTest();
       23: 2890-block  0
call    0 returned 23
branch  1 taken 23 (fallthrough)
branch  2 taken 0 (throw)
       23: 2890-block  1
call    3 returned 23
branch  4 taken 23 (fallthrough)
branch  5 taken 0 (throw)
       23: 2891:    internal::HandleExceptionsInMethodIfSupported(
       23: 2891-block  0
call    0 returned 23
branch  1 taken 23 (fallthrough)
branch  2 taken 0 (throw)
        -: 2892:        test, &Test::DeleteSelf_, "the test fixture's destructor");
        -: 2893:  }
        -: 2894:
       23: 2895:  result_.set_elapsed_time(timer.Elapsed());
       23: 2895-block  0
call    0 returned 23
branch  1 taken 23 (fallthrough)
branch  2 taken 0 (throw)
       23: 2895-block  1
call    3 returned 23
        -: 2896:
        -: 2897:  // Notifies the unit test event listener that a test has just finished.
       23: 2898:  repeater->OnTestEnd(*this);
call    0 returned 23
branch  1 taken 23 (fallthrough)
branch  2 taken 0 (throw)
        -: 2899:
        -: 2900:  // Tells UnitTest to stop associating assertion results to this
        -: 2901:  // test.
       23: 2902:  impl->set_current_test_info(nullptr);
       23: 2902-block  0
call    0 returned 23
        -: 2903:}
        -: 2904:
        -: 2905:// Skip and records a skipped test result for this object.
function _ZN7testing8TestInfo4SkipEv called 0 returned 0% blocks executed 0%
    #####: 2906:void TestInfo::Skip() {
    #####: 2907:  if (!should_run_) return;
    %%%%%: 2907-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2907-block  1
        -: 2908:
    #####: 2909:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
    %%%%%: 2909-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2910:  impl->set_current_test_info(this);
    %%%%%: 2910-block  0
call    0 never executed
        -: 2911:
    #####: 2912:  TestEventListener* repeater = UnitTest::GetInstance()->listeners().repeater();
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2912-block  0
call    3 never executed
call    4 never executed
        -: 2913:
        -: 2914:  // Notifies the unit test event listeners that a test is about to start.
    #####: 2915:  repeater->OnTestStart(*this);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2916:
        -: 2917:  const TestPartResult test_part_result =
    #####: 2918:      TestPartResult(TestPartResult::kSkip, this->file(), this->line(), "");
    %%%%%: 2918-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    $$$$$: 2918-block  1
call    6 never executed
    #####: 2919:  impl->GetTestPartResultReporterForCurrentThread()->ReportTestPartResult(
    %%%%%: 2919-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2920:      test_part_result);
    %%%%%: 2920-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2921:
        -: 2922:  // Notifies the unit test event listener that a test has just finished.
    #####: 2923:  repeater->OnTestEnd(*this);
    %%%%%: 2923-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2924:  impl->set_current_test_info(nullptr);
    %%%%%: 2924-block  0
call    0 never executed
        -: 2925:}
        -: 2926:
        -: 2927:// class TestSuite
        -: 2928:
        -: 2929:// Gets the number of successful tests in this test suite.
function _ZNK7testing9TestSuite21successful_test_countEv called 23 returned 100% blocks executed 100%
       23: 2930:int TestSuite::successful_test_count() const {
       23: 2931:  return CountIf(test_info_list_, TestPassed);
       23: 2931-block  0
call    0 returned 23
        -: 2932:}
        -: 2933:
        -: 2934:// Gets the number of successful tests in this test suite.
function _ZNK7testing9TestSuite18skipped_test_countEv called 23 returned 100% blocks executed 100%
       23: 2935:int TestSuite::skipped_test_count() const {
       23: 2936:  return CountIf(test_info_list_, TestSkipped);
       23: 2936-block  0
call    0 returned 23
        -: 2937:}
        -: 2938:
        -: 2939:// Gets the number of failed tests in this test suite.
function _ZNK7testing9TestSuite17failed_test_countEv called 46 returned 100% blocks executed 100%
       46: 2940:int TestSuite::failed_test_count() const {
       46: 2941:  return CountIf(test_info_list_, TestFailed);
       46: 2941-block  0
call    0 returned 46
        -: 2942:}
        -: 2943:
        -: 2944:// Gets the number of disabled tests that will be reported in the XML report.
function _ZNK7testing9TestSuite30reportable_disabled_test_countEv called 23 returned 100% blocks executed 100%
       23: 2945:int TestSuite::reportable_disabled_test_count() const {
       23: 2946:  return CountIf(test_info_list_, TestReportableDisabled);
       23: 2946-block  0
call    0 returned 23
        -: 2947:}
        -: 2948:
        -: 2949:// Gets the number of disabled tests in this test suite.
function _ZNK7testing9TestSuite19disabled_test_countEv called 0 returned 0% blocks executed 0%
    #####: 2950:int TestSuite::disabled_test_count() const {
    #####: 2951:  return CountIf(test_info_list_, TestDisabled);
    %%%%%: 2951-block  0
call    0 never executed
        -: 2952:}
        -: 2953:
        -: 2954:// Gets the number of tests to be printed in the XML report.
function _ZNK7testing9TestSuite21reportable_test_countEv called 0 returned 0% blocks executed 0%
    #####: 2955:int TestSuite::reportable_test_count() const {
    #####: 2956:  return CountIf(test_info_list_, TestReportable);
    %%%%%: 2956-block  0
call    0 never executed
        -: 2957:}
        -: 2958:
        -: 2959:// Get the number of tests in this test suite that should run.
function _ZNK7testing9TestSuite17test_to_run_countEv called 92 returned 100% blocks executed 100%
       92: 2960:int TestSuite::test_to_run_count() const {
       92: 2961:  return CountIf(test_info_list_, ShouldRunTest);
       92: 2961-block  0
call    0 returned 92
        -: 2962:}
        -: 2963:
        -: 2964:// Gets the number of all tests.
function _ZNK7testing9TestSuite16total_test_countEv called 46 returned 100% blocks executed 100%
       46: 2965:int TestSuite::total_test_count() const {
       46: 2966:  return static_cast<int>(test_info_list_.size());
       46: 2966-block  0
call    0 returned 46
        -: 2967:}
        -: 2968:
        -: 2969:// Creates a TestSuite with the given name.
        -: 2970://
        -: 2971:// Arguments:
        -: 2972://
        -: 2973://   a_name:       name of the test suite
        -: 2974://   a_type_param: the name of the test suite's type parameter, or NULL if
        -: 2975://                 this is not a typed or a type-parameterized test suite.
        -: 2976://   set_up_tc:    pointer to the function that sets up the test suite
        -: 2977://   tear_down_tc: pointer to the function that tears down the test suite
function _ZN7testing9TestSuiteC2EPKcS2_PFvvES4_ called 23 returned 100% blocks executed 36%
       23: 2978:TestSuite::TestSuite(const char* a_name, const char* a_type_param,
        -: 2979:                     internal::SetUpTestSuiteFunc set_up_tc,
       23: 2980:                     internal::TearDownTestSuiteFunc tear_down_tc)
        -: 2981:    : name_(a_name),
    #####: 2982:      type_param_(a_type_param ? new std::string(a_type_param) : nullptr),
    %%%%%: 2982-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2982-block  1
call    3 never executed
        -: 2983:      set_up_tc_(set_up_tc),
        -: 2984:      tear_down_tc_(tear_down_tc),
        -: 2985:      should_run_(false),
        -: 2986:      start_timestamp_(0),
      23*: 2987:      elapsed_time_(0) {}
       23: 2987-block  0
call    0 returned 23
call    1 returned 23
branch  2 taken 23 (fallthrough)
branch  3 taken 0 (throw)
       23: 2987-block  1
call    4 returned 23
branch  5 taken 0 (fallthrough)
branch  6 taken 23
    %%%%%: 2987-block  2
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 2987-block  3
       23: 2987-block  4
       23: 2987-block  5
call   11 returned 23
branch 12 taken 0 (fallthrough)
branch 13 taken 23
    %%%%%: 2987-block  6
call   14 never executed
       23: 2987-block  7
call   15 returned 23
call   16 returned 23
call   17 returned 23
branch 18 taken 23 (fallthrough)
branch 19 taken 0 (throw)
       23: 2987-block  8
    $$$$$: 2987-block  9
call   20 never executed
    $$$$$: 2987-block 10
call   21 never executed
    $$$$$: 2987-block 11
branch 22 never executed
branch 23 never executed
    $$$$$: 2987-block 12
call   24 never executed
    $$$$$: 2987-block 13
    $$$$$: 2987-block 14
call   25 never executed
    $$$$$: 2987-block 15
call   26 never executed
    $$$$$: 2987-block 16
call   27 never executed
    $$$$$: 2987-block 17
call   28 never executed
        -: 2988:
        -: 2989:// Destructor of TestSuite.
    #####: 2990:TestSuite::~TestSuite() {
        -: 2991:  // Deletes every Test in the collection.
    #####: 2992:  ForEach(test_info_list_, internal::Delete<TestInfo>);
    #####: 2993:}
------------------
_ZN7testing9TestSuiteD0Ev:
function _ZN7testing9TestSuiteD0Ev called 0 returned 0% blocks executed 0%
    #####: 2990:TestSuite::~TestSuite() {
        -: 2991:  // Deletes every Test in the collection.
        -: 2992:  ForEach(test_info_list_, internal::Delete<TestInfo>);
    #####: 2993:}
    %%%%%: 2993-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7testing9TestSuiteD2Ev:
function _ZN7testing9TestSuiteD2Ev called 0 returned 0% blocks executed 0%
    #####: 2990:TestSuite::~TestSuite() {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
        -: 2991:  // Deletes every Test in the collection.
    #####: 2992:  ForEach(test_info_list_, internal::Delete<TestInfo>);
    %%%%%: 2992-block  0
call    0 never executed
    #####: 2993:}
------------------
        -: 2994:
        -: 2995:// Returns the i-th test among all the tests. i can range from 0 to
        -: 2996:// total_test_count() - 1. If i is not in that range, returns NULL.
function _ZNK7testing9TestSuite11GetTestInfoEi called 0 returned 0% blocks executed 0%
    #####: 2997:const TestInfo* TestSuite::GetTestInfo(int i) const {
    #####: 2998:  const int index = GetElementOr(test_indices_, i, -1);
    %%%%%: 2998-block  0
call    0 never executed
    #####: 2999:  return index < 0 ? nullptr : test_info_list_[static_cast<size_t>(index)];
branch  0 never executed
branch  1 never executed
    %%%%%: 2999-block  0
call    2 never executed
    %%%%%: 2999-block  1
    %%%%%: 2999-block  2
        -: 3000:}
        -: 3001:
        -: 3002:// Returns the i-th test among all the tests. i can range from 0 to
        -: 3003:// total_test_count() - 1. If i is not in that range, returns NULL.
function _ZN7testing9TestSuite18GetMutableTestInfoEi called 23 returned 100% blocks executed 86%
       23: 3004:TestInfo* TestSuite::GetMutableTestInfo(int i) {
       23: 3005:  const int index = GetElementOr(test_indices_, i, -1);
       23: 3005-block  0
call    0 returned 23
      23*: 3006:  return index < 0 ? nullptr : test_info_list_[static_cast<size_t>(index)];
branch  0 taken 23 (fallthrough)
branch  1 taken 0
       23: 3006-block  0
call    2 returned 23
    %%%%%: 3006-block  1
       23: 3006-block  2
        -: 3007:}
        -: 3008:
        -: 3009:// Adds a test to this test suite.  Will delete the test upon
        -: 3010:// destruction of the TestSuite object.
function _ZN7testing9TestSuite11AddTestInfoEPNS_8TestInfoE called 23 returned 100% blocks executed 100%
       23: 3011:void TestSuite::AddTestInfo(TestInfo* test_info) {
       23: 3012:  test_info_list_.push_back(test_info);
       23: 3012-block  0
call    0 returned 23
       23: 3013:  test_indices_.push_back(static_cast<int>(test_indices_.size()));
call    0 returned 23
call    1 returned 23
branch  2 taken 23 (fallthrough)
branch  3 taken 0 (throw)
       23: 3014:}
       23: 3014-block  0
        -: 3015:
        -: 3016:// Runs every test in this TestSuite.
function _ZN7testing9TestSuite3RunEv called 23 returned 100% blocks executed 69%
       23: 3017:void TestSuite::Run() {
      23*: 3018:  if (!should_run_) return;
       23: 3018-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 23
    %%%%%: 3018-block  1
        -: 3019:
       23: 3020:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
       23: 3020-block  0
call    0 returned 23
branch  1 taken 23 (fallthrough)
branch  2 taken 0 (throw)
       23: 3021:  impl->set_current_test_suite(this);
       23: 3021-block  0
call    0 returned 23
        -: 3022:
       23: 3023:  TestEventListener* repeater = UnitTest::GetInstance()->listeners().repeater();
call    0 returned 23
branch  1 taken 23 (fallthrough)
branch  2 taken 0 (throw)
       23: 3023-block  0
call    3 returned 23
call    4 returned 23
        -: 3024:
        -: 3025:  // Call both legacy and the new API
       23: 3026:  repeater->OnTestSuiteStart(*this);
call    0 returned 23
branch  1 taken 23 (fallthrough)
branch  2 taken 0 (throw)
        -: 3027://  Legacy API is deprecated but still available
        -: 3028:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
       23: 3029:  repeater->OnTestCaseStart(*this);
       23: 3029-block  0
call    0 returned 23
branch  1 taken 23 (fallthrough)
branch  2 taken 0 (throw)
        -: 3030:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3031:
       23: 3032:  impl->os_stack_trace_getter()->UponLeavingGTest();
       23: 3032-block  0
call    0 returned 23
branch  1 taken 23 (fallthrough)
branch  2 taken 0 (throw)
       23: 3032-block  1
call    3 returned 23
branch  4 taken 23 (fallthrough)
branch  5 taken 0 (throw)
       23: 3033:  internal::HandleExceptionsInMethodIfSupported(
       23: 3033-block  0
call    0 returned 23
branch  1 taken 23 (fallthrough)
branch  2 taken 0 (throw)
        -: 3034:      this, &TestSuite::RunSetUpTestSuite, "SetUpTestSuite()");
        -: 3035:
       23: 3036:  const bool skip_all = ad_hoc_test_result().Failed();
       23: 3036-block  0
call    0 returned 23
call    1 returned 23
branch  2 taken 23 (fallthrough)
branch  3 taken 0 (throw)
        -: 3037:
       23: 3038:  start_timestamp_ = internal::GetTimeInMillis();
       23: 3038-block  0
call    0 returned 23
branch  1 taken 23 (fallthrough)
branch  2 taken 0 (throw)
       23: 3039:  internal::Timer timer;
       23: 3039-block  0
call    0 returned 23
       46: 3040:  for (int i = 0; i < total_test_count(); i++) {
       46: 3040-block  0
call    0 returned 46
branch  1 taken 23 (fallthrough)
branch  2 taken 23
       23: 3040-block  1
       23: 3041:    if (skip_all) {
       23: 3041-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 23
    #####: 3042:      GetMutableTestInfo(i)->Skip();
    %%%%%: 3042-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3042-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 3043:    } else {
       23: 3044:      GetMutableTestInfo(i)->Run();
       23: 3044-block  0
call    0 returned 23
branch  1 taken 23 (fallthrough)
branch  2 taken 0 (throw)
       23: 3044-block  1
call    3 returned 23
branch  4 taken 23 (fallthrough)
branch  5 taken 0 (throw)
        -: 3045:    }
      23*: 3046:    if (GTEST_FLAG_GET(fail_fast) &&
       23: 3046-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 23
    %%%%%: 3046-block  1
       23: 3046-block  2
       23: 3046-block  3
branch  2 taken 0 (fallthrough)
branch  3 taken 23
    #####: 3047:        GetMutableTestInfo(i)->result()->Failed()) {
    %%%%%: 3047-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3047-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 3047-block  2
branch  7 never executed
branch  8 never executed
    #####: 3048:      for (int j = i + 1; j < total_test_count(); j++) {
    %%%%%: 3048-block  0
    %%%%%: 3048-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3048-block  2
    #####: 3049:        GetMutableTestInfo(j)->Skip();
    %%%%%: 3049-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3049-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 3050:      }
    #####: 3051:      break;
    %%%%%: 3051-block  0
        -: 3052:    }
        -: 3053:  }
       23: 3054:  elapsed_time_ = timer.Elapsed();
       23: 3054-block  0
call    0 returned 23
branch  1 taken 23 (fallthrough)
branch  2 taken 0 (throw)
        -: 3055:
       23: 3056:  impl->os_stack_trace_getter()->UponLeavingGTest();
       23: 3056-block  0
call    0 returned 23
branch  1 taken 23 (fallthrough)
branch  2 taken 0 (throw)
       23: 3056-block  1
call    3 returned 23
branch  4 taken 23 (fallthrough)
branch  5 taken 0 (throw)
       23: 3057:  internal::HandleExceptionsInMethodIfSupported(
       23: 3057-block  0
call    0 returned 23
branch  1 taken 23 (fallthrough)
branch  2 taken 0 (throw)
        -: 3058:      this, &TestSuite::RunTearDownTestSuite, "TearDownTestSuite()");
        -: 3059:
        -: 3060:  // Call both legacy and the new API
       23: 3061:  repeater->OnTestSuiteEnd(*this);
       23: 3061-block  0
call    0 returned 23
branch  1 taken 23 (fallthrough)
branch  2 taken 0 (throw)
        -: 3062://  Legacy API is deprecated but still available
        -: 3063:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
       23: 3064:  repeater->OnTestCaseEnd(*this);
       23: 3064-block  0
call    0 returned 23
branch  1 taken 23 (fallthrough)
branch  2 taken 0 (throw)
        -: 3065:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3066:
       23: 3067:  impl->set_current_test_suite(nullptr);
       23: 3067-block  0
call    0 returned 23
        -: 3068:}
        -: 3069:
        -: 3070:// Skips all tests under this TestSuite.
function _ZN7testing9TestSuite4SkipEv called 0 returned 0% blocks executed 0%
    #####: 3071:void TestSuite::Skip() {
    #####: 3072:  if (!should_run_) return;
    %%%%%: 3072-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3072-block  1
        -: 3073:
    #####: 3074:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
    %%%%%: 3074-block  0
call    0 never executed
    #####: 3075:  impl->set_current_test_suite(this);
call    0 never executed
        -: 3076:
    #####: 3077:  TestEventListener* repeater = UnitTest::GetInstance()->listeners().repeater();
call    0 never executed
call    1 never executed
call    2 never executed
        -: 3078:
        -: 3079:  // Call both legacy and the new API
    #####: 3080:  repeater->OnTestSuiteStart(*this);
call    0 never executed
        -: 3081://  Legacy API is deprecated but still available
        -: 3082:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
    #####: 3083:  repeater->OnTestCaseStart(*this);
call    0 never executed
        -: 3084:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3085:
    #####: 3086:  for (int i = 0; i < total_test_count(); i++) {
    %%%%%: 3086-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3087:    GetMutableTestInfo(i)->Skip();
    %%%%%: 3087-block  0
call    0 never executed
call    1 never executed
        -: 3088:  }
        -: 3089:
        -: 3090:  // Call both legacy and the new API
    #####: 3091:  repeater->OnTestSuiteEnd(*this);
    %%%%%: 3091-block  0
call    0 never executed
        -: 3092:  // Legacy API is deprecated but still available
        -: 3093:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
    #####: 3094:  repeater->OnTestCaseEnd(*this);
call    0 never executed
        -: 3095:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3096:
    #####: 3097:  impl->set_current_test_suite(nullptr);
call    0 never executed
        -: 3098:}
        -: 3099:
        -: 3100:// Clears the results of all tests in this test suite.
function _ZN7testing9TestSuite11ClearResultEv called 23 returned 100% blocks executed 100%
       23: 3101:void TestSuite::ClearResult() {
       23: 3102:  ad_hoc_test_result_.Clear();
       23: 3102-block  0
call    0 returned 23
       23: 3103:  ForEach(test_info_list_, TestInfo::ClearTestResult);
call    0 returned 23
       23: 3104:}
        -: 3105:
        -: 3106:// Shuffles the tests in this test suite.
function _ZN7testing9TestSuite12ShuffleTestsEPNS_8internal6RandomE called 0 returned 0% blocks executed 0%
    #####: 3107:void TestSuite::ShuffleTests(internal::Random* random) {
    #####: 3108:  Shuffle(random, &test_indices_);
    %%%%%: 3108-block  0
call    0 never executed
    #####: 3109:}
        -: 3110:
        -: 3111:// Restores the test order to before the first shuffle.
function _ZN7testing9TestSuite14UnshuffleTestsEv called 23 returned 100% blocks executed 100%
       23: 3112:void TestSuite::UnshuffleTests() {
       46: 3113:  for (size_t i = 0; i < test_indices_.size(); i++) {
       23: 3113-block  0
       46: 3113-block  1
call    0 returned 46
branch  1 taken 23 (fallthrough)
branch  2 taken 23
       23: 3114:    test_indices_[i] = static_cast<int>(i);
       23: 3114-block  0
call    0 returned 23
        -: 3115:  }
       23: 3116:}
        -: 3117:
        -: 3118:// Formats a countable noun.  Depending on its quantity, either the
        -: 3119:// singular form or the plural form is used. e.g.
        -: 3120://
        -: 3121:// FormatCountableNoun(1, "formula", "formuli") returns "1 formula".
        -: 3122:// FormatCountableNoun(5, "book", "books") returns "5 books".
function _ZN7testingL19FormatCountableNounEiPKcS1_ called 51 returned 100% blocks executed 71%
       51: 3123:static std::string FormatCountableNoun(int count,
        -: 3124:                                       const char * singular_form,
        -: 3125:                                       const char * plural_form) {
      102: 3126:  return internal::StreamableToString(count) + " " +
       51: 3126-block  0
call    0 returned 51
call    1 returned 51
branch  2 taken 51 (fallthrough)
branch  3 taken 0 (throw)
       51: 3126-block  1
call    4 returned 51
call    5 returned 51
    $$$$$: 3126-block  2
call    6 never executed
    $$$$$: 3126-block  3
    $$$$$: 3126-block  4
call    7 never executed
      153: 3127:      (count == 1 ? singular_form : plural_form);
       51: 3127-block  0
branch  0 taken 46 (fallthrough)
branch  1 taken 5
       46: 3127-block  1
        5: 3127-block  2
       51: 3127-block  3
call    2 returned 51
branch  3 taken 51 (fallthrough)
branch  4 taken 0 (throw)
       51: 3127-block  4
       51: 3127-block  5
        -: 3128:}
        -: 3129:
        -: 3130:// Formats the count of tests.
function _ZN7testingL15FormatTestCountEi called 3 returned 100% blocks executed 100%
        3: 3131:static std::string FormatTestCount(int test_count) {
        3: 3132:  return FormatCountableNoun(test_count, "test", "tests");
        3: 3132-block  0
call    0 returned 3
        -: 3133:}
        -: 3134:
        -: 3135:// Formats the count of test suites.
function _ZN7testingL20FormatTestSuiteCountEi called 2 returned 100% blocks executed 100%
        2: 3136:static std::string FormatTestSuiteCount(int test_suite_count) {
        2: 3137:  return FormatCountableNoun(test_suite_count, "test suite", "test suites");
        2: 3137-block  0
call    0 returned 2
        -: 3138:}
        -: 3139:
        -: 3140:// Converts a TestPartResult::Type enum to human-friendly string
        -: 3141:// representation.  Both kNonFatalFailure and kFatalFailure are translated
        -: 3142:// to "Failure", as the user usually doesn't care about the difference
        -: 3143:// between the two when viewing the test result.
function _ZN7testingL26TestPartResultTypeToStringENS_14TestPartResult4TypeE called 0 returned 0% blocks executed 0%
    #####: 3144:static const char * TestPartResultTypeToString(TestPartResult::Type type) {
    #####: 3145:  switch (type) {
    %%%%%: 3145-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3146:    case TestPartResult::kSkip:
    #####: 3147:      return "Skipped\n";
    %%%%%: 3147-block  0
    #####: 3148:    case TestPartResult::kSuccess:
    #####: 3149:      return "Success";
    %%%%%: 3149-block  0
        -: 3150:
    #####: 3151:    case TestPartResult::kNonFatalFailure:
        -: 3152:    case TestPartResult::kFatalFailure:
        -: 3153:#ifdef _MSC_VER
        -: 3154:      return "error: ";
        -: 3155:#else
    #####: 3156:      return "Failure\n";
    %%%%%: 3156-block  0
        -: 3157:#endif
    #####: 3158:    default:
    #####: 3159:      return "Unknown result type";
    %%%%%: 3159-block  0
        -: 3160:  }
        -: 3161:}
        -: 3162:
        -: 3163:namespace internal {
        -: 3164:namespace {
        -: 3165:enum class GTestColor { kDefault, kRed, kGreen, kYellow };
        -: 3166:}  // namespace
        -: 3167:
        -: 3168:// Prints a TestPartResult to an std::string.
function _ZN7testing8internalL27PrintTestPartResultToStringERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 3169:static std::string PrintTestPartResultToString(
        -: 3170:    const TestPartResult& test_part_result) {
    #####: 3171:  return (Message()
    %%%%%: 3171-block  0
call    0 never executed
    $$$$$: 3171-block  1
call    1 never executed
    #####: 3172:          << internal::FormatFileLocation(test_part_result.file_name(),
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    $$$$$: 3172-block  0
call    6 never executed
    $$$$$: 3172-block  1
    #####: 3173:                                          test_part_result.line_number())
    %%%%%: 3173-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3174:          << " " << TestPartResultTypeToString(test_part_result.type())
    %%%%%: 3174-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3174-block  1
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    $$$$$: 3174-block  2
    #####: 3175:          << test_part_result.message()).GetString();
    %%%%%: 3175-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 3175-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 3175-block  2
    %%%%%: 3175-block  3
call    7 never executed
    %%%%%: 3175-block  4
    $$$$$: 3175-block  5
        -: 3176:}
        -: 3177:
        -: 3178:// Prints a TestPartResult.
function _ZN7testing8internalL19PrintTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 3179:static void PrintTestPartResult(const TestPartResult& test_part_result) {
        -: 3180:  const std::string& result =
    #####: 3181:      PrintTestPartResultToString(test_part_result);
    %%%%%: 3181-block  0
call    0 never executed
    %%%%%: 3181-block  1
call    1 never executed
    $$$$$: 3181-block  2
call    2 never executed
    #####: 3182:  printf("%s\n", result.c_str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3183:  fflush(stdout);
    %%%%%: 3183-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3183-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 3184:  // If the test program runs in Visual Studio or a debugger, the
        -: 3185:  // following statements add the test part result message to the Output
        -: 3186:  // window such that the user can double-click on it to jump to the
        -: 3187:  // corresponding source code location; otherwise they do nothing.
        -: 3188:#if GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MOBILE
        -: 3189:  // We don't call OutputDebugString*() on Windows Mobile, as printing
        -: 3190:  // to stdout is done by OutputDebugString() there already - we don't
        -: 3191:  // want the same message printed twice.
    #####: 3192:  ::OutputDebugStringA(result.c_str());
    %%%%%: 3192-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3193:  ::OutputDebugStringA("\n");
    %%%%%: 3193-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3194:#endif
    #####: 3195:}
        -: 3196:
        -: 3197:// class PrettyUnitTestResultPrinter
        -: 3198:#if GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MOBILE && \
        -: 3199:    !GTEST_OS_WINDOWS_PHONE && !GTEST_OS_WINDOWS_RT && !GTEST_OS_WINDOWS_MINGW
        -: 3200:
        -: 3201:// Returns the character attribute for the given color.
        -: 3202:static WORD GetColorAttribute(GTestColor color) {
        -: 3203:  switch (color) {
        -: 3204:    case GTestColor::kRed:
        -: 3205:      return FOREGROUND_RED;
        -: 3206:    case GTestColor::kGreen:
        -: 3207:      return FOREGROUND_GREEN;
        -: 3208:    case GTestColor::kYellow:
        -: 3209:      return FOREGROUND_RED | FOREGROUND_GREEN;
        -: 3210:    default:           return 0;
        -: 3211:  }
        -: 3212:}
        -: 3213:
        -: 3214:static int GetBitOffset(WORD color_mask) {
        -: 3215:  if (color_mask == 0) return 0;
        -: 3216:
        -: 3217:  int bitOffset = 0;
        -: 3218:  while ((color_mask & 1) == 0) {
        -: 3219:    color_mask >>= 1;
        -: 3220:    ++bitOffset;
        -: 3221:  }
        -: 3222:  return bitOffset;
        -: 3223:}
        -: 3224:
        -: 3225:static WORD GetNewColor(GTestColor color, WORD old_color_attrs) {
        -: 3226:  // Let's reuse the BG
        -: 3227:  static const WORD background_mask = BACKGROUND_BLUE | BACKGROUND_GREEN |
        -: 3228:                                      BACKGROUND_RED | BACKGROUND_INTENSITY;
        -: 3229:  static const WORD foreground_mask = FOREGROUND_BLUE | FOREGROUND_GREEN |
        -: 3230:                                      FOREGROUND_RED | FOREGROUND_INTENSITY;
        -: 3231:  const WORD existing_bg = old_color_attrs & background_mask;
        -: 3232:
        -: 3233:  WORD new_color =
        -: 3234:      GetColorAttribute(color) | existing_bg | FOREGROUND_INTENSITY;
        -: 3235:  static const int bg_bitOffset = GetBitOffset(background_mask);
        -: 3236:  static const int fg_bitOffset = GetBitOffset(foreground_mask);
        -: 3237:
        -: 3238:  if (((new_color & background_mask) >> bg_bitOffset) ==
        -: 3239:      ((new_color & foreground_mask) >> fg_bitOffset)) {
        -: 3240:    new_color ^= FOREGROUND_INTENSITY;  // invert intensity
        -: 3241:  }
        -: 3242:  return new_color;
        -: 3243:}
        -: 3244:
        -: 3245:#else
        -: 3246:
        -: 3247:// Returns the ANSI color code for the given color. GTestColor::kDefault is
        -: 3248:// an invalid input.
function _ZN7testing8internalL16GetAnsiColorCodeENS0_12_GLOBAL__N_110GTestColorE called 0 returned 0% blocks executed 0%
    #####: 3249:static const char* GetAnsiColorCode(GTestColor color) {
    #####: 3250:  switch (color) {
    %%%%%: 3250-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3251:    case GTestColor::kRed:
    #####: 3252:      return "1";
    %%%%%: 3252-block  0
    #####: 3253:    case GTestColor::kGreen:
    #####: 3254:      return "2";
    %%%%%: 3254-block  0
    #####: 3255:    case GTestColor::kYellow:
    #####: 3256:      return "3";
    %%%%%: 3256-block  0
    #####: 3257:    default:
    #####: 3258:      return nullptr;
    %%%%%: 3258-block  0
        -: 3259:  }
        -: 3260:}
        -: 3261:
        -: 3262:#endif  // GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MOBILE
        -: 3263:
        -: 3264:// Returns true if and only if Google Test should use colors in the output.
function _ZN7testing8internal14ShouldUseColorEb called 1 returned 100% blocks executed 35%
        1: 3265:bool ShouldUseColor(bool stdout_is_tty) {
        2: 3266:  std::string c = GTEST_FLAG_GET(color);
        1: 3266-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3266-block  1
call    3 returned 1
    $$$$$: 3266-block  2
call    4 never executed
        1: 3267:  const char* const gtest_color = c.c_str();
        1: 3267-block  0
call    0 returned 1
        -: 3268:
        1: 3269:  if (String::CaseInsensitiveCStringEquals(gtest_color, "auto")) {
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3269-block  0
branch  3 taken 0 (fallthrough)
branch  4 taken 1
        -: 3270:#if GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MINGW
        -: 3271:    // On Windows the TERM variable is usually not set, but the
        -: 3272:    // console there does support colors.
        -: 3273:    return stdout_is_tty;
        -: 3274:#else
        -: 3275:    // On non-Windows platforms, we rely on the TERM variable.
    #####: 3276:    const char* const term = posix::GetEnv("TERM");
    %%%%%: 3276-block  0
call    0 never executed
        -: 3277:    const bool term_supports_color =
    #####: 3278:        String::CStringEquals(term, "xterm") ||
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3279:        String::CStringEquals(term, "xterm-color") ||
    %%%%%: 3279-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3280:        String::CStringEquals(term, "xterm-256color") ||
    %%%%%: 3280-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3281:        String::CStringEquals(term, "screen") ||
    %%%%%: 3281-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3282:        String::CStringEquals(term, "screen-256color") ||
    %%%%%: 3282-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3283:        String::CStringEquals(term, "tmux") ||
    %%%%%: 3283-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3284:        String::CStringEquals(term, "tmux-256color") ||
    %%%%%: 3284-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3285:        String::CStringEquals(term, "rxvt-unicode") ||
    %%%%%: 3285-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3286:        String::CStringEquals(term, "rxvt-unicode-256color") ||
    %%%%%: 3286-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3287:        String::CStringEquals(term, "linux") ||
branch  0 never executed
branch  1 never executed
    %%%%%: 3287-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 3287-block  1
    %%%%%: 3287-block  2
    #####: 3288:        String::CStringEquals(term, "cygwin");
    %%%%%: 3288-block  0
call    0 never executed
    #####: 3289:    return stdout_is_tty && term_supports_color;
    %%%%%: 3289-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3289-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 3289-block  2
    %%%%%: 3289-block  3
    %%%%%: 3289-block  4
        -: 3290:#endif  // GTEST_OS_WINDOWS
        -: 3291:  }
        -: 3292:
        1: 3293:  return String::CaseInsensitiveCStringEquals(gtest_color, "yes") ||
        1: 3293-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3294:      String::CaseInsensitiveCStringEquals(gtest_color, "true") ||
        1: 3294-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3294-block  1
branch  3 taken 1 (fallthrough)
branch  4 taken 0
       3*: 3295:      String::CaseInsensitiveCStringEquals(gtest_color, "t") ||
        1: 3295-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3295-block  1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        1: 3295-block  2
branch  5 taken 1 (fallthrough)
branch  6 taken 0
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%: 3295-block  3
        1: 3295-block  4
        2: 3296:      String::CStringEquals(gtest_color, "1");
        1: 3296-block  0
call    0 returned 1
        1: 3296-block  1
        -: 3297:  // We take "yes", "true", "t", and "1" as meaning "yes".  If the
        -: 3298:  // value is neither one of these nor "auto", we treat it as "no" to
        -: 3299:  // be conservative.
        -: 3300:}
        -: 3301:
        -: 3302:// Helpers for printing colored strings to stdout. Note that on Windows, we
        -: 3303:// cannot simply emit special characters and have the terminal change colors.
        -: 3304:// This routine must actually emit the characters rather than return a string
        -: 3305:// that would be colored when printed, as can be done on Linux.
        -: 3306:
        -: 3307:GTEST_ATTRIBUTE_PRINTF_(2, 3)
function _ZN7testing8internalL13ColoredPrintfENS0_12_GLOBAL__N_110GTestColorEPKcz called 98 returned 100% blocks executed 60%
       98: 3308:static void ColoredPrintf(GTestColor color, const char *fmt, ...) {
        -: 3309:  va_list args;
       98: 3310:  va_start(args, fmt);
        -: 3311:
        -: 3312:#if GTEST_OS_WINDOWS_MOBILE || GTEST_OS_ZOS || GTEST_OS_IOS || \
        -: 3313:    GTEST_OS_WINDOWS_PHONE || GTEST_OS_WINDOWS_RT || defined(ESP_PLATFORM)
        -: 3314:  const bool use_color = AlwaysFalse();
        -: 3315:#else
        -: 3316:  static const bool in_color_mode =
       98: 3317:      ShouldUseColor(posix::IsATTY(posix::FileNo(stdout)) != 0);
       98: 3317-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 97
        1: 3317-block  1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0
        1: 3317-block  2
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1: 3317-block  3
call    8 returned 1
branch  9 taken 1 (fallthrough)
branch 10 taken 0 (throw)
        1: 3317-block  4
call   11 returned 1
branch 12 taken 1 (fallthrough)
branch 13 taken 0 (throw)
        1: 3317-block  5
call   14 returned 1
branch 15 taken 1 (fallthrough)
branch 16 taken 0 (throw)
        1: 3317-block  6
call   17 returned 1
    $$$$$: 3317-block  7
branch 18 never executed
branch 19 never executed
    $$$$$: 3317-block  8
call   20 never executed
      98*: 3318:  const bool use_color = in_color_mode && (color != GTestColor::kDefault);
       98: 3318-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 98
    %%%%%: 3318-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 3318-block  2
       98: 3318-block  3
        -: 3319:#endif  // GTEST_OS_WINDOWS_MOBILE || GTEST_OS_ZOS
        -: 3320:
       98: 3321:  if (!use_color) {
       98: 3321-block  0
branch  0 taken 98 (fallthrough)
branch  1 taken 0
       98: 3322:    vprintf(fmt, args);
       98: 3322-block  0
call    0 returned 98
branch  1 taken 98 (fallthrough)
branch  2 taken 0 (throw)
       98: 3323:    va_end(args);
       98: 3324:    return;
       98: 3324-block  0
        -: 3325:  }
        -: 3326:
        -: 3327:#if GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MOBILE && \
        -: 3328:    !GTEST_OS_WINDOWS_PHONE && !GTEST_OS_WINDOWS_RT && !GTEST_OS_WINDOWS_MINGW
        -: 3329:  const HANDLE stdout_handle = GetStdHandle(STD_OUTPUT_HANDLE);
        -: 3330:
        -: 3331:  // Gets the current text color.
        -: 3332:  CONSOLE_SCREEN_BUFFER_INFO buffer_info;
        -: 3333:  GetConsoleScreenBufferInfo(stdout_handle, &buffer_info);
        -: 3334:  const WORD old_color_attrs = buffer_info.wAttributes;
        -: 3335:  const WORD new_color = GetNewColor(color, old_color_attrs);
        -: 3336:
        -: 3337:  // We need to flush the stream buffers into the console before each
        -: 3338:  // SetConsoleTextAttribute call lest it affect the text that is already
        -: 3339:  // printed but has not yet reached the console.
        -: 3340:  fflush(stdout);
        -: 3341:  SetConsoleTextAttribute(stdout_handle, new_color);
        -: 3342:
        -: 3343:  vprintf(fmt, args);
        -: 3344:
        -: 3345:  fflush(stdout);
        -: 3346:  // Restores the text color.
        -: 3347:  SetConsoleTextAttribute(stdout_handle, old_color_attrs);
        -: 3348:#else
    #####: 3349:  printf("\033[0;3%sm", GetAnsiColorCode(color));
    %%%%%: 3349-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3350:  vprintf(fmt, args);
    %%%%%: 3350-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3351:  printf("\033[m");  // Resets the terminal to default.
    %%%%%: 3351-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3352:#endif  // GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MOBILE
    #####: 3353:  va_end(args);
    %%%%%: 3353-block  0
        -: 3354:}
        -: 3355:
        -: 3356:// Text printed in Google Test's text output and --gtest_list_tests
        -: 3357:// output to label the type parameter and value parameter for a test.
        -: 3358:static const char kTypeParamLabel[] = "TypeParam";
        -: 3359:static const char kValueParamLabel[] = "GetParam()";
        -: 3360:
function _ZN7testing8internalL29PrintFullTestCommentIfPresentERKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 3361:static void PrintFullTestCommentIfPresent(const TestInfo& test_info) {
    #####: 3362:  const char* const type_param = test_info.type_param();
    %%%%%: 3362-block  0
call    0 never executed
    #####: 3363:  const char* const value_param = test_info.value_param();
call    0 never executed
        -: 3364:
    #####: 3365:  if (type_param != nullptr || value_param != nullptr) {
branch  0 never executed
branch  1 never executed
    %%%%%: 3365-block  0
branch  2 never executed
branch  3 never executed
    #####: 3366:    printf(", where ");
    %%%%%: 3366-block  0
call    0 never executed
    #####: 3367:    if (type_param != nullptr) {
branch  0 never executed
branch  1 never executed
    #####: 3368:      printf("%s = %s", kTypeParamLabel, type_param);
    %%%%%: 3368-block  0
call    0 never executed
    #####: 3369:      if (value_param != nullptr) printf(" and ");
branch  0 never executed
branch  1 never executed
    %%%%%: 3369-block  0
call    2 never executed
        -: 3370:    }
    #####: 3371:    if (value_param != nullptr) {
    %%%%%: 3371-block  0
branch  0 never executed
branch  1 never executed
    #####: 3372:      printf("%s = %s", kValueParamLabel, value_param);
    %%%%%: 3372-block  0
call    0 never executed
        -: 3373:    }
        -: 3374:  }
    #####: 3375:}
        -: 3376:
        -: 3377:// This class implements the TestEventListener interface.
        -: 3378://
        -: 3379:// Class PrettyUnitTestResultPrinter is copyable.
        -: 3380:class PrettyUnitTestResultPrinter : public TestEventListener {
        -: 3381: public:
function _ZN7testing8internal27PrettyUnitTestResultPrinterC1Ev called 1 returned 100% blocks executed 100%
        1: 3382:  PrettyUnitTestResultPrinter() {}
        1: 3382-block  0
call    0 returned 1
function _ZN7testing8internal27PrettyUnitTestResultPrinter13PrintTestNameEPKcS3_ called 46 returned 100% blocks executed 100%
       46: 3383:  static void PrintTestName(const char* test_suite, const char* test) {
       46: 3384:    printf("%s.%s", test_suite, test);
       46: 3384-block  0
call    0 returned 46
       46: 3385:  }
        -: 3386:
        -: 3387:  // The following methods override what's in the TestEventListener class.
function _ZN7testing8internal27PrettyUnitTestResultPrinter18OnTestProgramStartERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        1: 3388:  void OnTestProgramStart(const UnitTest& /*unit_test*/) override {}
        -: 3389:  void OnTestIterationStart(const UnitTest& unit_test, int iteration) override;
        -: 3390:  void OnEnvironmentsSetUpStart(const UnitTest& unit_test) override;
function _ZN7testing8internal27PrettyUnitTestResultPrinter22OnEnvironmentsSetUpEndERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        1: 3391:  void OnEnvironmentsSetUpEnd(const UnitTest& /*unit_test*/) override {}
        -: 3392:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3393:  void OnTestCaseStart(const TestCase& test_case) override;
        -: 3394:#else
        -: 3395:  void OnTestSuiteStart(const TestSuite& test_suite) override;
        -: 3396:#endif  // OnTestCaseStart
        -: 3397:
        -: 3398:  void OnTestStart(const TestInfo& test_info) override;
        -: 3399:  void OnTestDisabled(const TestInfo& test_info) override;
        -: 3400:
        -: 3401:  void OnTestPartResult(const TestPartResult& result) override;
        -: 3402:  void OnTestEnd(const TestInfo& test_info) override;
        -: 3403:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3404:  void OnTestCaseEnd(const TestCase& test_case) override;
        -: 3405:#else
        -: 3406:  void OnTestSuiteEnd(const TestSuite& test_suite) override;
        -: 3407:#endif  // GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3408:
        -: 3409:  void OnEnvironmentsTearDownStart(const UnitTest& unit_test) override;
function _ZN7testing8internal27PrettyUnitTestResultPrinter25OnEnvironmentsTearDownEndERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        1: 3410:  void OnEnvironmentsTearDownEnd(const UnitTest& /*unit_test*/) override {}
        -: 3411:  void OnTestIterationEnd(const UnitTest& unit_test, int iteration) override;
function _ZN7testing8internal27PrettyUnitTestResultPrinter16OnTestProgramEndERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        1: 3412:  void OnTestProgramEnd(const UnitTest& /*unit_test*/) override {}
        -: 3413:
        -: 3414: private:
        -: 3415:  static void PrintFailedTests(const UnitTest& unit_test);
        -: 3416:  static void PrintFailedTestSuites(const UnitTest& unit_test);
        -: 3417:  static void PrintSkippedTests(const UnitTest& unit_test);
        -: 3418:};
        -: 3419:
        -: 3420:  // Fired before each iteration of tests starts.
function _ZN7testing8internal27PrettyUnitTestResultPrinter20OnTestIterationStartERKNS_8UnitTestEi called 1 returned 100% blocks executed 60%
        1: 3421:void PrettyUnitTestResultPrinter::OnTestIterationStart(
        -: 3422:    const UnitTest& unit_test, int iteration) {
        1: 3423:  if (GTEST_FLAG_GET(repeat) != 1)
        1: 3423-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 3424:    printf("\nRepeating all tests (iteration %d) . . .\n\n", iteration + 1);
    %%%%%: 3424-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3425:
        2: 3426:  std::string f = GTEST_FLAG_GET(filter);
        1: 3426-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3426-block  1
call    3 returned 1
    $$$$$: 3426-block  2
call    4 never executed
        1: 3427:  const char* const filter = f.c_str();
        1: 3427-block  0
call    0 returned 1
        -: 3428:
        -: 3429:  // Prints the filter if it's not *.  This reminds the user that some
        -: 3430:  // tests may be skipped.
        1: 3431:  if (!String::CStringEquals(filter, kUniversalFilter)) {
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1: 3432:    ColoredPrintf(GTestColor::kYellow, "Note: %s filter = %s\n", GTEST_NAME_,
        1: 3432-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 3433:                  filter);
        -: 3434:  }
        -: 3435:
        1: 3436:  if (internal::ShouldShard(kTestTotalShards, kTestShardIndex, false)) {
        1: 3436-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3436-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    #####: 3437:    const int32_t shard_index = Int32FromEnvOrDie(kTestShardIndex, -1);
    %%%%%: 3437-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3438:    ColoredPrintf(GTestColor::kYellow, "Note: This is test shard %d of %s.\n",
    %%%%%: 3438-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 3439:                  static_cast<int>(shard_index) + 1,
        -: 3440:                  internal::posix::GetEnv(kTestTotalShards));
        -: 3441:  }
        -: 3442:
        1: 3443:  if (GTEST_FLAG_GET(shuffle)) {
        1: 3443-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 3444:    ColoredPrintf(GTestColor::kYellow,
    %%%%%: 3444-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 3445:                  "Note: Randomizing tests' orders with a seed of %d .\n",
        -: 3446:                  unit_test.random_seed());
        -: 3447:  }
        -: 3448:
        1: 3449:  ColoredPrintf(GTestColor::kGreen, "[==========] ");
        1: 3449-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        2: 3450:  printf("Running %s from %s.\n",
        1: 3450-block  0
call    0 returned 1
        1: 3450-block  1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        2: 3451:         FormatTestCount(unit_test.test_to_run_count()).c_str(),
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3451-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 3451-block  1
call    6 returned 1
    $$$$$: 3451-block  2
call    7 never executed
    $$$$$: 3451-block  3
        2: 3452:         FormatTestSuiteCount(unit_test.test_suite_to_run_count()).c_str());
        1: 3452-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3452-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 1
    $$$$$: 3452-block  2
call    7 never executed
    $$$$$: 3452-block  3
        1: 3453:  fflush(stdout);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3453-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 3454:}
        -: 3455:
function _ZN7testing8internal27PrettyUnitTestResultPrinter24OnEnvironmentsSetUpStartERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        1: 3456:void PrettyUnitTestResultPrinter::OnEnvironmentsSetUpStart(
        -: 3457:    const UnitTest& /*unit_test*/) {
        1: 3458:  ColoredPrintf(GTestColor::kGreen, "[----------] ");
        1: 3458-block  0
call    0 returned 1
        1: 3459:  printf("Global test environment set-up.\n");
call    0 returned 1
        1: 3460:  fflush(stdout);
call    0 returned 1
call    1 returned 1
        1: 3461:}
        -: 3462:
        -: 3463:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal27PrettyUnitTestResultPrinter15OnTestCaseStartERKNS_9TestSuiteE called 23 returned 100% blocks executed 79%
       23: 3464:void PrettyUnitTestResultPrinter::OnTestCaseStart(const TestCase& test_case) {
        -: 3465:  const std::string counts =
       46: 3466:      FormatCountableNoun(test_case.test_to_run_count(), "test", "tests");
       23: 3466-block  0
call    0 returned 23
branch  1 taken 23 (fallthrough)
branch  2 taken 0 (throw)
       23: 3466-block  1
call    3 returned 23
branch  4 taken 23 (fallthrough)
branch  5 taken 0 (throw)
       23: 3466-block  2
call    6 returned 23
    $$$$$: 3466-block  3
call    7 never executed
       23: 3467:  ColoredPrintf(GTestColor::kGreen, "[----------] ");
       23: 3467-block  0
call    0 returned 23
branch  1 taken 23 (fallthrough)
branch  2 taken 0 (throw)
       23: 3468:  printf("%s from %s", counts.c_str(), test_case.name());
       23: 3468-block  0
call    0 returned 23
call    1 returned 23
call    2 returned 23
branch  3 taken 23 (fallthrough)
branch  4 taken 0 (throw)
       23: 3469:  if (test_case.type_param() == nullptr) {
       23: 3469-block  0
call    0 returned 23
branch  1 taken 23 (fallthrough)
branch  2 taken 0
       23: 3470:    printf("\n");
       23: 3470-block  0
call    0 returned 23
branch  1 taken 23 (fallthrough)
branch  2 taken 0 (throw)
        -: 3471:  } else {
    #####: 3472:    printf(", where %s = %s\n", kTypeParamLabel, test_case.type_param());
    %%%%%: 3472-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 3473:  }
       23: 3474:  fflush(stdout);
       23: 3474-block  0
call    0 returned 23
branch  1 taken 23 (fallthrough)
branch  2 taken 0 (throw)
       23: 3474-block  1
call    3 returned 23
branch  4 taken 23 (fallthrough)
branch  5 taken 0 (throw)
       23: 3475:}
        -: 3476:#else
        -: 3477:void PrettyUnitTestResultPrinter::OnTestSuiteStart(
        -: 3478:    const TestSuite& test_suite) {
        -: 3479:  const std::string counts =
        -: 3480:      FormatCountableNoun(test_suite.test_to_run_count(), "test", "tests");
        -: 3481:  ColoredPrintf(GTestColor::kGreen, "[----------] ");
        -: 3482:  printf("%s from %s", counts.c_str(), test_suite.name());
        -: 3483:  if (test_suite.type_param() == nullptr) {
        -: 3484:    printf("\n");
        -: 3485:  } else {
        -: 3486:    printf(", where %s = %s\n", kTypeParamLabel, test_suite.type_param());
        -: 3487:  }
        -: 3488:  fflush(stdout);
        -: 3489:}
        -: 3490:#endif  // GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3491:
function _ZN7testing8internal27PrettyUnitTestResultPrinter11OnTestStartERKNS_8TestInfoE called 23 returned 100% blocks executed 100%
       23: 3492:void PrettyUnitTestResultPrinter::OnTestStart(const TestInfo& test_info) {
       23: 3493:  ColoredPrintf(GTestColor::kGreen, "[ RUN      ] ");
       23: 3493-block  0
call    0 returned 23
       23: 3494:  PrintTestName(test_info.test_suite_name(), test_info.name());
call    0 returned 23
call    1 returned 23
call    2 returned 23
       23: 3495:  printf("\n");
call    0 returned 23
       23: 3496:  fflush(stdout);
call    0 returned 23
call    1 returned 23
       23: 3497:}
        -: 3498:
function _ZN7testing8internal27PrettyUnitTestResultPrinter14OnTestDisabledERKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 3499:void PrettyUnitTestResultPrinter::OnTestDisabled(const TestInfo& test_info) {
    #####: 3500:  ColoredPrintf(GTestColor::kYellow, "[ DISABLED ] ");
    %%%%%: 3500-block  0
call    0 never executed
    #####: 3501:  PrintTestName(test_info.test_suite_name(), test_info.name());
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 3502:  printf("\n");
call    0 never executed
    #####: 3503:  fflush(stdout);
call    0 never executed
call    1 never executed
    #####: 3504:}
        -: 3505:
        -: 3506:// Called after an assertion failure.
function _ZN7testing8internal27PrettyUnitTestResultPrinter16OnTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 3507:void PrettyUnitTestResultPrinter::OnTestPartResult(
        -: 3508:    const TestPartResult& result) {
    #####: 3509:  switch (result.type()) {
    %%%%%: 3509-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3510:    // If the test part succeeded, we don't need to do anything.
    #####: 3511:    case TestPartResult::kSuccess:
    #####: 3512:      return;
    %%%%%: 3512-block  0
    #####: 3513:    default:
        -: 3514:      // Print failure message from the assertion
        -: 3515:      // (e.g. expected this and got that).
    #####: 3516:      PrintTestPartResult(result);
    %%%%%: 3516-block  0
call    0 never executed
    #####: 3517:      fflush(stdout);
call    0 never executed
call    1 never executed
        -: 3518:  }
        -: 3519:}
        -: 3520:
function _ZN7testing8internal27PrettyUnitTestResultPrinter9OnTestEndERKNS_8TestInfoE called 23 returned 100% blocks executed 69%
       23: 3521:void PrettyUnitTestResultPrinter::OnTestEnd(const TestInfo& test_info) {
       23: 3522:  if (test_info.result()->Passed()) {
       23: 3522-block  0
call    0 returned 23
call    1 returned 23
branch  2 taken 23 (fallthrough)
branch  3 taken 0
       23: 3523:    ColoredPrintf(GTestColor::kGreen, "[       OK ] ");
       23: 3523-block  0
call    0 returned 23
    #####: 3524:  } else if (test_info.result()->Skipped()) {
    %%%%%: 3524-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3525:    ColoredPrintf(GTestColor::kGreen, "[  SKIPPED ] ");
    %%%%%: 3525-block  0
call    0 never executed
        -: 3526:  } else {
    #####: 3527:    ColoredPrintf(GTestColor::kRed, "[  FAILED  ] ");
    %%%%%: 3527-block  0
call    0 never executed
        -: 3528:  }
       23: 3529:  PrintTestName(test_info.test_suite_name(), test_info.name());
       23: 3529-block  0
call    0 returned 23
call    1 returned 23
call    2 returned 23
       23: 3530:  if (test_info.result()->Failed())
call    0 returned 23
call    1 returned 23
branch  2 taken 0 (fallthrough)
branch  3 taken 23
    #####: 3531:    PrintFullTestCommentIfPresent(test_info);
    %%%%%: 3531-block  0
call    0 never executed
        -: 3532:
       23: 3533:  if (GTEST_FLAG_GET(print_time)) {
       23: 3533-block  0
branch  0 taken 23 (fallthrough)
branch  1 taken 0
       23: 3534:    printf(" (%s ms)\n", internal::StreamableToString(
       23: 3534-block  0
call    0 returned 23
call    1 returned 23
branch  2 taken 23 (fallthrough)
branch  3 taken 0 (throw)
       23: 3534-block  1
call    4 returned 23
    $$$$$: 3534-block  2
call    5 never executed
    $$$$$: 3534-block  3
       46: 3535:           test_info.result()->elapsed_time()).c_str());
       23: 3535-block  0
call    0 returned 23
call    1 returned 23
call    2 returned 23
branch  3 taken 23 (fallthrough)
branch  4 taken 0 (throw)
        -: 3536:  } else {
    #####: 3537:    printf("\n");
    %%%%%: 3537-block  0
call    0 never executed
        -: 3538:  }
       23: 3539:  fflush(stdout);
       23: 3539-block  0
call    0 returned 23
call    1 returned 23
       23: 3540:}
        -: 3541:
        -: 3542:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal27PrettyUnitTestResultPrinter13OnTestCaseEndERKNS_9TestSuiteE called 23 returned 100% blocks executed 71%
       23: 3543:void PrettyUnitTestResultPrinter::OnTestCaseEnd(const TestCase& test_case) {
      23*: 3544:  if (!GTEST_FLAG_GET(print_time)) return;
       23: 3544-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 23
    %%%%%: 3544-block  1
        -: 3545:
        -: 3546:  const std::string counts =
       46: 3547:      FormatCountableNoun(test_case.test_to_run_count(), "test", "tests");
       23: 3547-block  0
call    0 returned 23
branch  1 taken 23 (fallthrough)
branch  2 taken 0 (throw)
       23: 3547-block  1
call    3 returned 23
branch  4 taken 23 (fallthrough)
branch  5 taken 0 (throw)
       23: 3547-block  2
call    6 returned 23
    $$$$$: 3547-block  3
call    7 never executed
       23: 3548:  ColoredPrintf(GTestColor::kGreen, "[----------] ");
       23: 3548-block  0
call    0 returned 23
branch  1 taken 23 (fallthrough)
branch  2 taken 0 (throw)
       23: 3549:  printf("%s from %s (%s ms total)\n\n", counts.c_str(), test_case.name(),
       23: 3549-block  0
call    0 returned 23
call    1 returned 23
call    2 returned 23
call    3 returned 23
branch  4 taken 23 (fallthrough)
branch  5 taken 0 (throw)
       46: 3550:         internal::StreamableToString(test_case.elapsed_time()).c_str());
       23: 3550-block  0
call    0 returned 23
call    1 returned 23
branch  2 taken 23 (fallthrough)
branch  3 taken 0 (throw)
       23: 3550-block  1
call    4 returned 23
    $$$$$: 3550-block  2
call    5 never executed
    $$$$$: 3550-block  3
    $$$$$: 3550-block  4
       23: 3551:  fflush(stdout);
call    0 returned 23
branch  1 taken 23 (fallthrough)
branch  2 taken 0 (throw)
       23: 3551-block  0
call    3 returned 23
branch  4 taken 23 (fallthrough)
branch  5 taken 0 (throw)
        -: 3552:}
        -: 3553:#else
        -: 3554:void PrettyUnitTestResultPrinter::OnTestSuiteEnd(const TestSuite& test_suite) {
        -: 3555:  if (!GTEST_FLAG_GET(print_time)) return;
        -: 3556:
        -: 3557:  const std::string counts =
        -: 3558:      FormatCountableNoun(test_suite.test_to_run_count(), "test", "tests");
        -: 3559:  ColoredPrintf(GTestColor::kGreen, "[----------] ");
        -: 3560:  printf("%s from %s (%s ms total)\n\n", counts.c_str(), test_suite.name(),
        -: 3561:         internal::StreamableToString(test_suite.elapsed_time()).c_str());
        -: 3562:  fflush(stdout);
        -: 3563:}
        -: 3564:#endif  // GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3565:
function _ZN7testing8internal27PrettyUnitTestResultPrinter27OnEnvironmentsTearDownStartERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        1: 3566:void PrettyUnitTestResultPrinter::OnEnvironmentsTearDownStart(
        -: 3567:    const UnitTest& /*unit_test*/) {
        1: 3568:  ColoredPrintf(GTestColor::kGreen, "[----------] ");
        1: 3568-block  0
call    0 returned 1
        1: 3569:  printf("Global test environment tear-down\n");
call    0 returned 1
        1: 3570:  fflush(stdout);
call    0 returned 1
call    1 returned 1
        1: 3571:}
        -: 3572:
        -: 3573:// Internal helper for printing the list of failed tests.
function _ZN7testing8internal27PrettyUnitTestResultPrinter16PrintFailedTestsERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3574:void PrettyUnitTestResultPrinter::PrintFailedTests(const UnitTest& unit_test) {
    #####: 3575:  const int failed_test_count = unit_test.failed_test_count();
    %%%%%: 3575-block  0
call    0 never executed
    #####: 3576:  ColoredPrintf(GTestColor::kRed, "[  FAILED  ] ");
call    0 never executed
    #####: 3577:  printf("%s, listed below:\n", FormatTestCount(failed_test_count).c_str());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 3577-block  0
call    5 never executed
    $$$$$: 3577-block  1
call    6 never executed
        -: 3578:
    #####: 3579:  for (int i = 0; i < unit_test.total_test_suite_count(); ++i) {
    %%%%%: 3579-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3579-block  1
    #####: 3580:    const TestSuite& test_suite = *unit_test.GetTestSuite(i);
    %%%%%: 3580-block  0
call    0 never executed
    #####: 3581:    if (!test_suite.should_run() || (test_suite.failed_test_count() == 0)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3581-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3581-block  1
    %%%%%: 3581-block  2
    %%%%%: 3581-block  3
branch  6 never executed
branch  7 never executed
    #####: 3582:      continue;
    %%%%%: 3582-block  0
        -: 3583:    }
    #####: 3584:    for (int j = 0; j < test_suite.total_test_count(); ++j) {
    %%%%%: 3584-block  0
    %%%%%: 3584-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3584-block  2
    #####: 3585:      const TestInfo& test_info = *test_suite.GetTestInfo(j);
    %%%%%: 3585-block  0
call    0 never executed
    #####: 3586:      if (!test_info.should_run() || !test_info.result()->Failed()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3586-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 3586-block  1
    %%%%%: 3586-block  2
    %%%%%: 3586-block  3
branch  7 never executed
branch  8 never executed
    #####: 3587:        continue;
    %%%%%: 3587-block  0
        -: 3588:      }
    #####: 3589:      ColoredPrintf(GTestColor::kRed, "[  FAILED  ] ");
    %%%%%: 3589-block  0
call    0 never executed
    #####: 3590:      printf("%s.%s", test_suite.name(), test_info.name());
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 3591:      PrintFullTestCommentIfPresent(test_info);
call    0 never executed
    #####: 3592:      printf("\n");
call    0 never executed
        -: 3593:    }
        -: 3594:  }
    #####: 3595:  printf("\n%2d FAILED %s\n", failed_test_count,
    %%%%%: 3595-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3595-block  1
    %%%%%: 3595-block  2
    %%%%%: 3595-block  3
call    2 never executed
        -: 3596:         failed_test_count == 1 ? "TEST" : "TESTS");
    #####: 3597:}
        -: 3598:
        -: 3599:// Internal helper for printing the list of test suite failures not covered by
        -: 3600:// PrintFailedTests.
function _ZN7testing8internal27PrettyUnitTestResultPrinter21PrintFailedTestSuitesERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3601:void PrettyUnitTestResultPrinter::PrintFailedTestSuites(
        -: 3602:    const UnitTest& unit_test) {
    #####: 3603:  int suite_failure_count = 0;
    #####: 3604:  for (int i = 0; i < unit_test.total_test_suite_count(); ++i) {
    %%%%%: 3604-block  0
    %%%%%: 3604-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3604-block  2
    #####: 3605:    const TestSuite& test_suite = *unit_test.GetTestSuite(i);
    %%%%%: 3605-block  0
call    0 never executed
    #####: 3606:    if (!test_suite.should_run()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3607:      continue;
    %%%%%: 3607-block  0
        -: 3608:    }
    #####: 3609:    if (test_suite.ad_hoc_test_result().Failed()) {
    %%%%%: 3609-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3610:      ColoredPrintf(GTestColor::kRed, "[  FAILED  ] ");
    %%%%%: 3610-block  0
call    0 never executed
    #####: 3611:      printf("%s: SetUpTestSuite or TearDownTestSuite\n", test_suite.name());
call    0 never executed
call    1 never executed
    #####: 3612:      ++suite_failure_count;
        -: 3613:    }
        -: 3614:  }
    #####: 3615:  if (suite_failure_count > 0) {
    %%%%%: 3615-block  0
branch  0 never executed
branch  1 never executed
    #####: 3616:    printf("\n%2d FAILED TEST %s\n", suite_failure_count,
    %%%%%: 3616-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3616-block  1
    %%%%%: 3616-block  2
    %%%%%: 3616-block  3
call    2 never executed
        -: 3617:           suite_failure_count == 1 ? "SUITE" : "SUITES");
        -: 3618:  }
    #####: 3619:}
        -: 3620:
        -: 3621:// Internal helper for printing the list of skipped tests.
function _ZN7testing8internal27PrettyUnitTestResultPrinter17PrintSkippedTestsERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3622:void PrettyUnitTestResultPrinter::PrintSkippedTests(const UnitTest& unit_test) {
    #####: 3623:  const int skipped_test_count = unit_test.skipped_test_count();
    %%%%%: 3623-block  0
call    0 never executed
    #####: 3624:  if (skipped_test_count == 0) {
branch  0 never executed
branch  1 never executed
    #####: 3625:    return;
    %%%%%: 3625-block  0
        -: 3626:  }
        -: 3627:
    #####: 3628:  for (int i = 0; i < unit_test.total_test_suite_count(); ++i) {
    %%%%%: 3628-block  0
    %%%%%: 3628-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3628-block  2
    #####: 3629:    const TestSuite& test_suite = *unit_test.GetTestSuite(i);
    %%%%%: 3629-block  0
call    0 never executed
    #####: 3630:    if (!test_suite.should_run() || (test_suite.skipped_test_count() == 0)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3630-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3630-block  1
    %%%%%: 3630-block  2
    %%%%%: 3630-block  3
branch  6 never executed
branch  7 never executed
    #####: 3631:      continue;
    %%%%%: 3631-block  0
        -: 3632:    }
    #####: 3633:    for (int j = 0; j < test_suite.total_test_count(); ++j) {
    %%%%%: 3633-block  0
    %%%%%: 3633-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3633-block  2
    #####: 3634:      const TestInfo& test_info = *test_suite.GetTestInfo(j);
    %%%%%: 3634-block  0
call    0 never executed
    #####: 3635:      if (!test_info.should_run() || !test_info.result()->Skipped()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3635-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 3635-block  1
    %%%%%: 3635-block  2
    %%%%%: 3635-block  3
branch  7 never executed
branch  8 never executed
    #####: 3636:        continue;
    %%%%%: 3636-block  0
        -: 3637:      }
    #####: 3638:      ColoredPrintf(GTestColor::kGreen, "[  SKIPPED ] ");
    %%%%%: 3638-block  0
call    0 never executed
    #####: 3639:      printf("%s.%s", test_suite.name(), test_info.name());
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 3640:      printf("\n");
call    0 never executed
        -: 3641:    }
        -: 3642:  }
        -: 3643:}
        -: 3644:
function _ZN7testing8internal27PrettyUnitTestResultPrinter18OnTestIterationEndERKNS_8UnitTestEi called 1 returned 100% blocks executed 52%
        1: 3645:void PrettyUnitTestResultPrinter::OnTestIterationEnd(const UnitTest& unit_test,
        -: 3646:                                                     int /*iteration*/) {
        1: 3647:  ColoredPrintf(GTestColor::kGreen, "[==========] ");
        1: 3647-block  0
call    0 returned 1
        2: 3648:  printf("%s from %s ran.",
call    0 returned 1
        1: 3648-block  0
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        2: 3649:         FormatTestCount(unit_test.test_to_run_count()).c_str(),
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3649-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 3649-block  1
call    6 returned 1
    $$$$$: 3649-block  2
call    7 never executed
    $$$$$: 3649-block  3
        2: 3650:         FormatTestSuiteCount(unit_test.test_suite_to_run_count()).c_str());
call    0 returned 1
call    1 returned 1
call    2 returned 1
    $$$$$: 3650-block  0
call    3 never executed
    $$$$$: 3650-block  1
call    4 never executed
        1: 3651:  if (GTEST_FLAG_GET(print_time)) {
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3652:    printf(" (%s ms total)",
        1: 3652-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        2: 3653:           internal::StreamableToString(unit_test.elapsed_time()).c_str());
        1: 3653-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 3653-block  1
call    4 returned 1
    $$$$$: 3653-block  2
call    5 never executed
    $$$$$: 3653-block  3
    $$$$$: 3653-block  4
call    6 never executed
        -: 3654:  }
        1: 3655:  printf("\n");
        1: 3655-block  0
call    0 returned 1
        1: 3656:  ColoredPrintf(GTestColor::kGreen, "[  PASSED  ] ");
call    0 returned 1
        1: 3657:  printf("%s.\n", FormatTestCount(unit_test.successful_test_count()).c_str());
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 3657-block  0
call    6 returned 1
    $$$$$: 3657-block  1
call    7 never executed
    $$$$$: 3657-block  2
call    8 never executed
        -: 3658:
        1: 3659:  const int skipped_test_count = unit_test.skipped_test_count();
call    0 returned 1
        1: 3660:  if (skipped_test_count > 0) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 3661:    ColoredPrintf(GTestColor::kGreen, "[  SKIPPED ] ");
    %%%%%: 3661-block  0
call    0 never executed
    #####: 3662:    printf("%s, listed below:\n", FormatTestCount(skipped_test_count).c_str());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 3662-block  0
call    5 never executed
    $$$$$: 3662-block  1
call    6 never executed
    #####: 3663:    PrintSkippedTests(unit_test);
call    0 never executed
        -: 3664:  }
        -: 3665:
        1: 3666:  if (!unit_test.Passed()) {
        1: 3666-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 3667:    PrintFailedTests(unit_test);
    %%%%%: 3667-block  0
call    0 never executed
    #####: 3668:    PrintFailedTestSuites(unit_test);
call    0 never executed
        -: 3669:  }
        -: 3670:
        1: 3671:  int num_disabled = unit_test.reportable_disabled_test_count();
        1: 3671-block  0
call    0 returned 1
       1*: 3672:  if (num_disabled && !GTEST_FLAG_GET(also_run_disabled_tests)) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 3672-block  0
branch  2 never executed
branch  3 never executed
    #####: 3673:    if (unit_test.Passed()) {
    %%%%%: 3673-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3674:      printf("\n");  // Add a spacer if no FAILURE banner is displayed.
    %%%%%: 3674-block  0
call    0 never executed
        -: 3675:    }
    #####: 3676:    ColoredPrintf(GTestColor::kYellow, "  YOU HAVE %d DISABLED %s\n\n",
    %%%%%: 3676-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3676-block  1
    %%%%%: 3676-block  2
    %%%%%: 3676-block  3
call    2 never executed
        -: 3677:                  num_disabled, num_disabled == 1 ? "TEST" : "TESTS");
        -: 3678:  }
        -: 3679:  // Ensure that Google Test output is printed before, e.g., heapchecker output.
        1: 3680:  fflush(stdout);
        1: 3680-block  0
call    0 returned 1
call    1 returned 1
        1: 3681:}
        -: 3682:
        -: 3683:// End PrettyUnitTestResultPrinter
        -: 3684:
        -: 3685:// This class implements the TestEventListener interface.
        -: 3686://
        -: 3687:// Class BriefUnitTestResultPrinter is copyable.
        -: 3688:class BriefUnitTestResultPrinter : public TestEventListener {
        -: 3689: public:
function _ZN7testing8internal26BriefUnitTestResultPrinterC1Ev called 0 returned 0% blocks executed 0%
    #####: 3690:  BriefUnitTestResultPrinter() {}
    %%%%%: 3690-block  0
call    0 never executed
function _ZN7testing8internal26BriefUnitTestResultPrinter13PrintTestNameEPKcS3_ called 0 returned 0% blocks executed 0%
    #####: 3691:  static void PrintTestName(const char* test_suite, const char* test) {
    #####: 3692:    printf("%s.%s", test_suite, test);
    %%%%%: 3692-block  0
call    0 never executed
    #####: 3693:  }
        -: 3694:
        -: 3695:  // The following methods override what's in the TestEventListener class.
function _ZN7testing8internal26BriefUnitTestResultPrinter18OnTestProgramStartERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3696:  void OnTestProgramStart(const UnitTest& /*unit_test*/) override {}
function _ZN7testing8internal26BriefUnitTestResultPrinter20OnTestIterationStartERKNS_8UnitTestEi called 0 returned 0% blocks executed 0%
    #####: 3697:  void OnTestIterationStart(const UnitTest& /*unit_test*/,
    #####: 3698:                            int /*iteration*/) override {}
function _ZN7testing8internal26BriefUnitTestResultPrinter24OnEnvironmentsSetUpStartERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3699:  void OnEnvironmentsSetUpStart(const UnitTest& /*unit_test*/) override {}
function _ZN7testing8internal26BriefUnitTestResultPrinter22OnEnvironmentsSetUpEndERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3700:  void OnEnvironmentsSetUpEnd(const UnitTest& /*unit_test*/) override {}
        -: 3701:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal26BriefUnitTestResultPrinter15OnTestCaseStartERKNS_9TestSuiteE called 0 returned 0% blocks executed 0%
    #####: 3702:  void OnTestCaseStart(const TestCase& /*test_case*/) override {}
        -: 3703:#else
        -: 3704:  void OnTestSuiteStart(const TestSuite& /*test_suite*/) override {}
        -: 3705:#endif  // OnTestCaseStart
        -: 3706:
function _ZN7testing8internal26BriefUnitTestResultPrinter11OnTestStartERKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 3707:  void OnTestStart(const TestInfo& /*test_info*/) override {}
function _ZN7testing8internal26BriefUnitTestResultPrinter14OnTestDisabledERKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 3708:  void OnTestDisabled(const TestInfo& /*test_info*/) override {}
        -: 3709:
        -: 3710:  void OnTestPartResult(const TestPartResult& result) override;
        -: 3711:  void OnTestEnd(const TestInfo& test_info) override;
        -: 3712:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal26BriefUnitTestResultPrinter13OnTestCaseEndERKNS_9TestSuiteE called 0 returned 0% blocks executed 0%
    #####: 3713:  void OnTestCaseEnd(const TestCase& /*test_case*/) override {}
        -: 3714:#else
        -: 3715:  void OnTestSuiteEnd(const TestSuite& /*test_suite*/) override {}
        -: 3716:#endif  // GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3717:
function _ZN7testing8internal26BriefUnitTestResultPrinter27OnEnvironmentsTearDownStartERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3718:  void OnEnvironmentsTearDownStart(const UnitTest& /*unit_test*/) override {}
function _ZN7testing8internal26BriefUnitTestResultPrinter25OnEnvironmentsTearDownEndERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3719:  void OnEnvironmentsTearDownEnd(const UnitTest& /*unit_test*/) override {}
        -: 3720:  void OnTestIterationEnd(const UnitTest& unit_test, int iteration) override;
function _ZN7testing8internal26BriefUnitTestResultPrinter16OnTestProgramEndERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3721:  void OnTestProgramEnd(const UnitTest& /*unit_test*/) override {}
        -: 3722:};
        -: 3723:
        -: 3724:// Called after an assertion failure.
function _ZN7testing8internal26BriefUnitTestResultPrinter16OnTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 3725:void BriefUnitTestResultPrinter::OnTestPartResult(
        -: 3726:    const TestPartResult& result) {
    #####: 3727:  switch (result.type()) {
    %%%%%: 3727-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3728:    // If the test part succeeded, we don't need to do anything.
    #####: 3729:    case TestPartResult::kSuccess:
    #####: 3730:      return;
    %%%%%: 3730-block  0
    #####: 3731:    default:
        -: 3732:      // Print failure message from the assertion
        -: 3733:      // (e.g. expected this and got that).
    #####: 3734:      PrintTestPartResult(result);
    %%%%%: 3734-block  0
call    0 never executed
    #####: 3735:      fflush(stdout);
call    0 never executed
call    1 never executed
        -: 3736:  }
        -: 3737:}
        -: 3738:
function _ZN7testing8internal26BriefUnitTestResultPrinter9OnTestEndERKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 3739:void BriefUnitTestResultPrinter::OnTestEnd(const TestInfo& test_info) {
    #####: 3740:  if (test_info.result()->Failed()) {
    %%%%%: 3740-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3741:    ColoredPrintf(GTestColor::kRed, "[  FAILED  ] ");
    %%%%%: 3741-block  0
call    0 never executed
    #####: 3742:    PrintTestName(test_info.test_suite_name(), test_info.name());
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 3743:    PrintFullTestCommentIfPresent(test_info);
call    0 never executed
        -: 3744:
    #####: 3745:    if (GTEST_FLAG_GET(print_time)) {
branch  0 never executed
branch  1 never executed
    #####: 3746:      printf(" (%s ms)\n",
    %%%%%: 3746-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3747:             internal::StreamableToString(test_info.result()->elapsed_time())
    %%%%%: 3747-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 3747-block  1
call    5 never executed
    $$$$$: 3747-block  2
call    6 never executed
    $$$$$: 3747-block  3
        -: 3748:                 .c_str());
        -: 3749:    } else {
    #####: 3750:      printf("\n");
    %%%%%: 3750-block  0
call    0 never executed
        -: 3751:    }
    #####: 3752:    fflush(stdout);
    %%%%%: 3752-block  0
call    0 never executed
call    1 never executed
        -: 3753:  }
    #####: 3754:}
    %%%%%: 3754-block  0
        -: 3755:
function _ZN7testing8internal26BriefUnitTestResultPrinter18OnTestIterationEndERKNS_8UnitTestEi called 0 returned 0% blocks executed 0%
    #####: 3756:void BriefUnitTestResultPrinter::OnTestIterationEnd(const UnitTest& unit_test,
        -: 3757:                                                    int /*iteration*/) {
    #####: 3758:  ColoredPrintf(GTestColor::kGreen, "[==========] ");
    %%%%%: 3758-block  0
call    0 never executed
    #####: 3759:  printf("%s from %s ran.",
call    0 never executed
    %%%%%: 3759-block  0
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 3760:         FormatTestCount(unit_test.test_to_run_count()).c_str(),
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3760-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3760-block  1
call    6 never executed
    $$$$$: 3760-block  2
call    7 never executed
    $$$$$: 3760-block  3
    #####: 3761:         FormatTestSuiteCount(unit_test.test_suite_to_run_count()).c_str());
call    0 never executed
call    1 never executed
call    2 never executed
    $$$$$: 3761-block  0
call    3 never executed
    $$$$$: 3761-block  1
call    4 never executed
    #####: 3762:  if (GTEST_FLAG_GET(print_time)) {
branch  0 never executed
branch  1 never executed
    #####: 3763:    printf(" (%s ms total)",
    %%%%%: 3763-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3764:           internal::StreamableToString(unit_test.elapsed_time()).c_str());
    %%%%%: 3764-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 3764-block  1
call    4 never executed
    $$$$$: 3764-block  2
call    5 never executed
    $$$$$: 3764-block  3
    $$$$$: 3764-block  4
call    6 never executed
        -: 3765:  }
    #####: 3766:  printf("\n");
    %%%%%: 3766-block  0
call    0 never executed
    #####: 3767:  ColoredPrintf(GTestColor::kGreen, "[  PASSED  ] ");
call    0 never executed
    #####: 3768:  printf("%s.\n", FormatTestCount(unit_test.successful_test_count()).c_str());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3768-block  0
call    6 never executed
    $$$$$: 3768-block  1
call    7 never executed
    $$$$$: 3768-block  2
call    8 never executed
        -: 3769:
    #####: 3770:  const int skipped_test_count = unit_test.skipped_test_count();
call    0 never executed
    #####: 3771:  if (skipped_test_count > 0) {
branch  0 never executed
branch  1 never executed
    #####: 3772:    ColoredPrintf(GTestColor::kGreen, "[  SKIPPED ] ");
    %%%%%: 3772-block  0
call    0 never executed
    #####: 3773:    printf("%s.\n", FormatTestCount(skipped_test_count).c_str());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 3773-block  0
call    5 never executed
    $$$$$: 3773-block  1
call    6 never executed
        -: 3774:  }
        -: 3775:
    #####: 3776:  int num_disabled = unit_test.reportable_disabled_test_count();
    %%%%%: 3776-block  0
call    0 never executed
    #####: 3777:  if (num_disabled && !GTEST_FLAG_GET(also_run_disabled_tests)) {
branch  0 never executed
branch  1 never executed
    %%%%%: 3777-block  0
branch  2 never executed
branch  3 never executed
    #####: 3778:    if (unit_test.Passed()) {
    %%%%%: 3778-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3779:      printf("\n");  // Add a spacer if no FAILURE banner is displayed.
    %%%%%: 3779-block  0
call    0 never executed
        -: 3780:    }
    #####: 3781:    ColoredPrintf(GTestColor::kYellow, "  YOU HAVE %d DISABLED %s\n\n",
    %%%%%: 3781-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3781-block  1
    %%%%%: 3781-block  2
    %%%%%: 3781-block  3
call    2 never executed
        -: 3782:                  num_disabled, num_disabled == 1 ? "TEST" : "TESTS");
        -: 3783:  }
        -: 3784:  // Ensure that Google Test output is printed before, e.g., heapchecker output.
    #####: 3785:  fflush(stdout);
    %%%%%: 3785-block  0
call    0 never executed
call    1 never executed
    #####: 3786:}
        -: 3787:
        -: 3788:// End BriefUnitTestResultPrinter
        -: 3789:
        -: 3790:// class TestEventRepeater
        -: 3791://
        -: 3792:// This class forwards events to other event listeners.
        -: 3793:class TestEventRepeater : public TestEventListener {
        -: 3794: public:
function _ZN7testing8internal17TestEventRepeaterC1Ev called 1 returned 100% blocks executed 100%
        1: 3795:  TestEventRepeater() : forwarding_enabled_(true) {}
        1: 3795-block  0
call    0 returned 1
call    1 returned 1
        -: 3796:  ~TestEventRepeater() override;
        -: 3797:  void Append(TestEventListener *listener);
        -: 3798:  TestEventListener* Release(TestEventListener* listener);
        -: 3799:
        -: 3800:  // Controls whether events will be forwarded to listeners_. Set to false
        -: 3801:  // in death test child processes.
function _ZNK7testing8internal17TestEventRepeater18forwarding_enabledEv called 0 returned 0% blocks executed 0%
    #####: 3802:  bool forwarding_enabled() const { return forwarding_enabled_; }
    %%%%%: 3802-block  0
function _ZN7testing8internal17TestEventRepeater22set_forwarding_enabledEb called 0 returned 0% blocks executed 0%
    #####: 3803:  void set_forwarding_enabled(bool enable) { forwarding_enabled_ = enable; }
        -: 3804:
        -: 3805:  void OnTestProgramStart(const UnitTest& unit_test) override;
        -: 3806:  void OnTestIterationStart(const UnitTest& unit_test, int iteration) override;
        -: 3807:  void OnEnvironmentsSetUpStart(const UnitTest& unit_test) override;
        -: 3808:  void OnEnvironmentsSetUpEnd(const UnitTest& unit_test) override;
        -: 3809://  Legacy API is deprecated but still available
        -: 3810:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3811:  void OnTestCaseStart(const TestSuite& parameter) override;
        -: 3812:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3813:  void OnTestSuiteStart(const TestSuite& parameter) override;
        -: 3814:  void OnTestStart(const TestInfo& test_info) override;
        -: 3815:  void OnTestDisabled(const TestInfo& test_info) override;
        -: 3816:  void OnTestPartResult(const TestPartResult& result) override;
        -: 3817:  void OnTestEnd(const TestInfo& test_info) override;
        -: 3818://  Legacy API is deprecated but still available
        -: 3819:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3820:  void OnTestCaseEnd(const TestCase& parameter) override;
        -: 3821:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3822:  void OnTestSuiteEnd(const TestSuite& parameter) override;
        -: 3823:  void OnEnvironmentsTearDownStart(const UnitTest& unit_test) override;
        -: 3824:  void OnEnvironmentsTearDownEnd(const UnitTest& unit_test) override;
        -: 3825:  void OnTestIterationEnd(const UnitTest& unit_test, int iteration) override;
        -: 3826:  void OnTestProgramEnd(const UnitTest& unit_test) override;
        -: 3827:
        -: 3828: private:
        -: 3829:  // Controls whether events will be forwarded to listeners_. Set to false
        -: 3830:  // in death test child processes.
        -: 3831:  bool forwarding_enabled_;
        -: 3832:  // The list of listeners that receive events.
        -: 3833:  std::vector<TestEventListener*> listeners_;
        -: 3834:
        -: 3835:  GTEST_DISALLOW_COPY_AND_ASSIGN_(TestEventRepeater);
        -: 3836:};
        -: 3837:
    #####: 3838:TestEventRepeater::~TestEventRepeater() {
    #####: 3839:  ForEach(listeners_, Delete<TestEventListener>);
    #####: 3840:}
------------------
_ZN7testing8internal17TestEventRepeaterD0Ev:
function _ZN7testing8internal17TestEventRepeaterD0Ev called 0 returned 0% blocks executed 0%
    #####: 3838:TestEventRepeater::~TestEventRepeater() {
        -: 3839:  ForEach(listeners_, Delete<TestEventListener>);
    #####: 3840:}
    %%%%%: 3840-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7testing8internal17TestEventRepeaterD2Ev:
function _ZN7testing8internal17TestEventRepeaterD2Ev called 0 returned 0% blocks executed 0%
    #####: 3838:TestEventRepeater::~TestEventRepeater() {
call    0 never executed
call    1 never executed
    #####: 3839:  ForEach(listeners_, Delete<TestEventListener>);
    %%%%%: 3839-block  0
call    0 never executed
    #####: 3840:}
------------------
        -: 3841:
function _ZN7testing8internal17TestEventRepeater6AppendEPNS_17TestEventListenerE called 1 returned 100% blocks executed 100%
        1: 3842:void TestEventRepeater::Append(TestEventListener *listener) {
        1: 3843:  listeners_.push_back(listener);
        1: 3843-block  0
call    0 returned 1
        1: 3844:}
        -: 3845:
function _ZN7testing8internal17TestEventRepeater7ReleaseEPNS_17TestEventListenerE called 1 returned 100% blocks executed 38%
        1: 3846:TestEventListener* TestEventRepeater::Release(TestEventListener *listener) {
       1*: 3847:  for (size_t i = 0; i < listeners_.size(); ++i) {
        1: 3847-block  0
        1: 3847-block  1
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%: 3847-block  2
    #####: 3848:    if (listeners_[i] == listener) {
    %%%%%: 3848-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3849:      listeners_.erase(listeners_.begin() + static_cast<int>(i));
    %%%%%: 3849-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 3849-block  1
    $$$$$: 3849-block  2
    #####: 3850:      return listener;
    %%%%%: 3850-block  0
        -: 3851:    }
        -: 3852:  }
        -: 3853:
        1: 3854:  return nullptr;
        1: 3854-block  0
        -: 3855:}
        -: 3856:
        -: 3857:// Since most methods are very similar, use macros to reduce boilerplate.
        -: 3858:// This defines a member that forwards the call to all listeners.
        -: 3859:#define GTEST_REPEATER_METHOD_(Name, Type) \
        -: 3860:void TestEventRepeater::Name(const Type& parameter) { \
        -: 3861:  if (forwarding_enabled_) { \
        -: 3862:    for (size_t i = 0; i < listeners_.size(); i++) { \
        -: 3863:      listeners_[i]->Name(parameter); \
        -: 3864:    } \
        -: 3865:  } \
        -: 3866:}
        -: 3867:// This defines a member that forwards the call to all listeners in reverse
        -: 3868:// order.
        -: 3869:#define GTEST_REVERSE_REPEATER_METHOD_(Name, Type)      \
        -: 3870:  void TestEventRepeater::Name(const Type& parameter) { \
        -: 3871:    if (forwarding_enabled_) {                          \
        -: 3872:      for (size_t i = listeners_.size(); i != 0; i--) { \
        -: 3873:        listeners_[i - 1]->Name(parameter);             \
        -: 3874:      }                                                 \
        -: 3875:    }                                                   \
        -: 3876:  }
        -: 3877:
function _ZN7testing8internal17TestEventRepeater18OnTestProgramStartERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        2: 3878:GTEST_REPEATER_METHOD_(OnTestProgramStart, UnitTest)
        1: 3878-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3878-block  1
        2: 3878-block  2
call    2 returned 2
branch  3 taken 1 (fallthrough)
branch  4 taken 1
        1: 3878-block  3
call    5 returned 1
call    6 returned 1
function _ZN7testing8internal17TestEventRepeater24OnEnvironmentsSetUpStartERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        2: 3879:GTEST_REPEATER_METHOD_(OnEnvironmentsSetUpStart, UnitTest)
        1: 3879-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3879-block  1
        2: 3879-block  2
call    2 returned 2
branch  3 taken 1 (fallthrough)
branch  4 taken 1
        1: 3879-block  3
call    5 returned 1
call    6 returned 1
        -: 3880://  Legacy API is deprecated but still available
        -: 3881:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal17TestEventRepeater15OnTestCaseStartERKNS_9TestSuiteE called 23 returned 100% blocks executed 100%
       46: 3882:GTEST_REPEATER_METHOD_(OnTestCaseStart, TestSuite)
       23: 3882-block  0
branch  0 taken 23 (fallthrough)
branch  1 taken 0
       23: 3882-block  1
       46: 3882-block  2
call    2 returned 46
branch  3 taken 23 (fallthrough)
branch  4 taken 23
       23: 3882-block  3
call    5 returned 23
call    6 returned 23
        -: 3883:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal17TestEventRepeater16OnTestSuiteStartERKNS_9TestSuiteE called 23 returned 100% blocks executed 100%
       46: 3884:GTEST_REPEATER_METHOD_(OnTestSuiteStart, TestSuite)
       23: 3884-block  0
branch  0 taken 23 (fallthrough)
branch  1 taken 0
       23: 3884-block  1
       46: 3884-block  2
call    2 returned 46
branch  3 taken 23 (fallthrough)
branch  4 taken 23
       23: 3884-block  3
call    5 returned 23
call    6 returned 23
function _ZN7testing8internal17TestEventRepeater11OnTestStartERKNS_8TestInfoE called 23 returned 100% blocks executed 100%
       46: 3885:GTEST_REPEATER_METHOD_(OnTestStart, TestInfo)
       23: 3885-block  0
branch  0 taken 23 (fallthrough)
branch  1 taken 0
       23: 3885-block  1
       46: 3885-block  2
call    2 returned 46
branch  3 taken 23 (fallthrough)
branch  4 taken 23
       23: 3885-block  3
call    5 returned 23
call    6 returned 23
function _ZN7testing8internal17TestEventRepeater14OnTestDisabledERKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 3886:GTEST_REPEATER_METHOD_(OnTestDisabled, TestInfo)
    %%%%%: 3886-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3886-block  1
    %%%%%: 3886-block  2
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 3886-block  3
call    5 never executed
call    6 never executed
function _ZN7testing8internal17TestEventRepeater16OnTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 3887:GTEST_REPEATER_METHOD_(OnTestPartResult, TestPartResult)
    %%%%%: 3887-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3887-block  1
    %%%%%: 3887-block  2
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 3887-block  3
call    5 never executed
call    6 never executed
function _ZN7testing8internal17TestEventRepeater27OnEnvironmentsTearDownStartERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        2: 3888:GTEST_REPEATER_METHOD_(OnEnvironmentsTearDownStart, UnitTest)
        1: 3888-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3888-block  1
        2: 3888-block  2
call    2 returned 2
branch  3 taken 1 (fallthrough)
branch  4 taken 1
        1: 3888-block  3
call    5 returned 1
call    6 returned 1
function _ZN7testing8internal17TestEventRepeater22OnEnvironmentsSetUpEndERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        2: 3889:GTEST_REVERSE_REPEATER_METHOD_(OnEnvironmentsSetUpEnd, UnitTest)
        1: 3889-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3889-block  1
call    2 returned 1
        2: 3889-block  2
branch  3 taken 1 (fallthrough)
branch  4 taken 1
        1: 3889-block  3
call    5 returned 1
call    6 returned 1
function _ZN7testing8internal17TestEventRepeater25OnEnvironmentsTearDownEndERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        2: 3890:GTEST_REVERSE_REPEATER_METHOD_(OnEnvironmentsTearDownEnd, UnitTest)
        1: 3890-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3890-block  1
call    2 returned 1
        2: 3890-block  2
branch  3 taken 1 (fallthrough)
branch  4 taken 1
        1: 3890-block  3
call    5 returned 1
call    6 returned 1
function _ZN7testing8internal17TestEventRepeater9OnTestEndERKNS_8TestInfoE called 23 returned 100% blocks executed 100%
       46: 3891:GTEST_REVERSE_REPEATER_METHOD_(OnTestEnd, TestInfo)
       23: 3891-block  0
branch  0 taken 23 (fallthrough)
branch  1 taken 0
       23: 3891-block  1
call    2 returned 23
       46: 3891-block  2
branch  3 taken 23 (fallthrough)
branch  4 taken 23
       23: 3891-block  3
call    5 returned 23
call    6 returned 23
        -: 3892://  Legacy API is deprecated but still available
        -: 3893:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal17TestEventRepeater13OnTestCaseEndERKNS_9TestSuiteE called 23 returned 100% blocks executed 100%
       46: 3894:GTEST_REVERSE_REPEATER_METHOD_(OnTestCaseEnd, TestSuite)
       23: 3894-block  0
branch  0 taken 23 (fallthrough)
branch  1 taken 0
       23: 3894-block  1
call    2 returned 23
       46: 3894-block  2
branch  3 taken 23 (fallthrough)
branch  4 taken 23
       23: 3894-block  3
call    5 returned 23
call    6 returned 23
        -: 3895:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal17TestEventRepeater14OnTestSuiteEndERKNS_9TestSuiteE called 23 returned 100% blocks executed 100%
       46: 3896:GTEST_REVERSE_REPEATER_METHOD_(OnTestSuiteEnd, TestSuite)
       23: 3896-block  0
branch  0 taken 23 (fallthrough)
branch  1 taken 0
       23: 3896-block  1
call    2 returned 23
       46: 3896-block  2
branch  3 taken 23 (fallthrough)
branch  4 taken 23
       23: 3896-block  3
call    5 returned 23
call    6 returned 23
function _ZN7testing8internal17TestEventRepeater16OnTestProgramEndERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        2: 3897:GTEST_REVERSE_REPEATER_METHOD_(OnTestProgramEnd, UnitTest)
        1: 3897-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3897-block  1
call    2 returned 1
        2: 3897-block  2
branch  3 taken 1 (fallthrough)
branch  4 taken 1
        1: 3897-block  3
call    5 returned 1
call    6 returned 1
        -: 3898:
        -: 3899:#undef GTEST_REPEATER_METHOD_
        -: 3900:#undef GTEST_REVERSE_REPEATER_METHOD_
        -: 3901:
function _ZN7testing8internal17TestEventRepeater20OnTestIterationStartERKNS_8UnitTestEi called 1 returned 100% blocks executed 100%
        1: 3902:void TestEventRepeater::OnTestIterationStart(const UnitTest& unit_test,
        -: 3903:                                             int iteration) {
        1: 3904:  if (forwarding_enabled_) {
        1: 3904-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        2: 3905:    for (size_t i = 0; i < listeners_.size(); i++) {
        1: 3905-block  0
        2: 3905-block  1
call    0 returned 2
branch  1 taken 1 (fallthrough)
branch  2 taken 1
        1: 3906:      listeners_[i]->OnTestIterationStart(unit_test, iteration);
        1: 3906-block  0
call    0 returned 1
call    1 returned 1
        -: 3907:    }
        -: 3908:  }
        1: 3909:}
        -: 3910:
function _ZN7testing8internal17TestEventRepeater18OnTestIterationEndERKNS_8UnitTestEi called 1 returned 100% blocks executed 100%
        1: 3911:void TestEventRepeater::OnTestIterationEnd(const UnitTest& unit_test,
        -: 3912:                                           int iteration) {
        1: 3913:  if (forwarding_enabled_) {
        1: 3913-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        2: 3914:    for (size_t i = listeners_.size(); i > 0; i--) {
        1: 3914-block  0
call    0 returned 1
        2: 3914-block  1
branch  1 taken 1 (fallthrough)
branch  2 taken 1
        1: 3915:      listeners_[i - 1]->OnTestIterationEnd(unit_test, iteration);
        1: 3915-block  0
call    0 returned 1
call    1 returned 1
        -: 3916:    }
        -: 3917:  }
        1: 3918:}
        -: 3919:
        -: 3920:// End TestEventRepeater
        -: 3921:
        -: 3922:// This class generates an XML output file.
        -: 3923:class XmlUnitTestResultPrinter : public EmptyTestEventListener {
        -: 3924: public:
        -: 3925:  explicit XmlUnitTestResultPrinter(const char* output_file);
        -: 3926:
        -: 3927:  void OnTestIterationEnd(const UnitTest& unit_test, int iteration) override;
        -: 3928:  void ListTestsMatchingFilter(const std::vector<TestSuite*>& test_suites);
        -: 3929:
        -: 3930:  // Prints an XML summary of all unit tests.
        -: 3931:  static void PrintXmlTestsList(std::ostream* stream,
        -: 3932:                                const std::vector<TestSuite*>& test_suites);
        -: 3933:
        -: 3934: private:
        -: 3935:  // Is c a whitespace character that is normalized to a space character
        -: 3936:  // when it appears in an XML attribute value?
function _ZN7testing8internal24XmlUnitTestResultPrinter24IsNormalizableWhitespaceEh called 0 returned 0% blocks executed 0%
    #####: 3937:  static bool IsNormalizableWhitespace(unsigned char c) {
    #####: 3938:    return c == '\t' || c == '\n' || c == '\r';
    %%%%%: 3938-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3938-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 3938-block  2
branch  4 never executed
branch  5 never executed
    %%%%%: 3938-block  3
    %%%%%: 3938-block  4
    %%%%%: 3938-block  5
        -: 3939:  }
        -: 3940:
        -: 3941:  // May c appear in a well-formed XML document?
        -: 3942:  // https://www.w3.org/TR/REC-xml/#charsets
function _ZN7testing8internal24XmlUnitTestResultPrinter19IsValidXmlCharacterEh called 0 returned 0% blocks executed 0%
    #####: 3943:  static bool IsValidXmlCharacter(unsigned char c) {
    #####: 3944:    return IsNormalizableWhitespace(c) || c >= 0x20;
    %%%%%: 3944-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3944-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 3944-block  2
    %%%%%: 3944-block  3
    %%%%%: 3944-block  4
        -: 3945:  }
        -: 3946:
        -: 3947:  // Returns an XML-escaped copy of the input string str.  If
        -: 3948:  // is_attribute is true, the text is meant to appear as an attribute
        -: 3949:  // value, and normalizable whitespace is preserved by replacing it
        -: 3950:  // with character references.
        -: 3951:  static std::string EscapeXml(const std::string& str, bool is_attribute);
        -: 3952:
        -: 3953:  // Returns the given string with all characters invalid in XML removed.
        -: 3954:  static std::string RemoveInvalidXmlCharacters(const std::string& str);
        -: 3955:
        -: 3956:  // Convenience wrapper around EscapeXml when str is an attribute value.
function _ZN7testing8internal24XmlUnitTestResultPrinter18EscapeXmlAttributeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 3957:  static std::string EscapeXmlAttribute(const std::string& str) {
    #####: 3958:    return EscapeXml(str, true);
    %%%%%: 3958-block  0
call    0 never executed
        -: 3959:  }
        -: 3960:
        -: 3961:  // Convenience wrapper around EscapeXml when str is not an attribute value.
        -: 3962:  static std::string EscapeXmlText(const char* str) {
        -: 3963:    return EscapeXml(str, false);
        -: 3964:  }
        -: 3965:
        -: 3966:  // Verifies that the given attribute belongs to the given element and
        -: 3967:  // streams the attribute as XML.
        -: 3968:  static void OutputXmlAttribute(std::ostream* stream,
        -: 3969:                                 const std::string& element_name,
        -: 3970:                                 const std::string& name,
        -: 3971:                                 const std::string& value);
        -: 3972:
        -: 3973:  // Streams an XML CDATA section, escaping invalid CDATA sequences as needed.
        -: 3974:  static void OutputXmlCDataSection(::std::ostream* stream, const char* data);
        -: 3975:
        -: 3976:  // Streams a test suite XML stanza containing the given test result.
        -: 3977:  //
        -: 3978:  // Requires: result.Failed()
        -: 3979:  static void OutputXmlTestSuiteForTestResult(::std::ostream* stream,
        -: 3980:                                              const TestResult& result);
        -: 3981:
        -: 3982:  // Streams an XML representation of a TestResult object.
        -: 3983:  static void OutputXmlTestResult(::std::ostream* stream,
        -: 3984:                                  const TestResult& result);
        -: 3985:
        -: 3986:  // Streams an XML representation of a TestInfo object.
        -: 3987:  static void OutputXmlTestInfo(::std::ostream* stream,
        -: 3988:                                const char* test_suite_name,
        -: 3989:                                const TestInfo& test_info);
        -: 3990:
        -: 3991:  // Prints an XML representation of a TestSuite object
        -: 3992:  static void PrintXmlTestSuite(::std::ostream* stream,
        -: 3993:                                const TestSuite& test_suite);
        -: 3994:
        -: 3995:  // Prints an XML summary of unit_test to output stream out.
        -: 3996:  static void PrintXmlUnitTest(::std::ostream* stream,
        -: 3997:                               const UnitTest& unit_test);
        -: 3998:
        -: 3999:  // Produces a string representing the test properties in a result as space
        -: 4000:  // delimited XML attributes based on the property key="value" pairs.
        -: 4001:  // When the std::string is not empty, it includes a space at the beginning,
        -: 4002:  // to delimit this attribute from prior attributes.
        -: 4003:  static std::string TestPropertiesAsXmlAttributes(const TestResult& result);
        -: 4004:
        -: 4005:  // Streams an XML representation of the test properties of a TestResult
        -: 4006:  // object.
        -: 4007:  static void OutputXmlTestProperties(std::ostream* stream,
        -: 4008:                                      const TestResult& result);
        -: 4009:
        -: 4010:  // The output file.
        -: 4011:  const std::string output_file_;
        -: 4012:
        -: 4013:  GTEST_DISALLOW_COPY_AND_ASSIGN_(XmlUnitTestResultPrinter);
        -: 4014:};
        -: 4015:
        -: 4016:// Creates a new XmlUnitTestResultPrinter.
function _ZN7testing8internal24XmlUnitTestResultPrinterC2EPKc called 0 returned 0% blocks executed 0%
    #####: 4017:XmlUnitTestResultPrinter::XmlUnitTestResultPrinter(const char* output_file)
    #####: 4018:    : output_file_(output_file) {
    %%%%%: 4018-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4018-block  1
call    5 never executed
    $$$$$: 4018-block  2
call    6 never executed
    $$$$$: 4018-block  3
    $$$$$: 4018-block  4
call    7 never executed
    $$$$$: 4018-block  5
call    8 never executed
    #####: 4019:  if (output_file_.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4020:    GTEST_LOG_(FATAL) << "XML output file may not be null";
    %%%%%: 4020-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4020-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4020-block  2
call    7 never executed
    $$$$$: 4020-block  3
call    8 never executed
    $$$$$: 4020-block  4
        -: 4021:  }
    #####: 4022:}
    %%%%%: 4022-block  0
        -: 4023:
        -: 4024:// Called after the unit test ends.
function _ZN7testing8internal24XmlUnitTestResultPrinter18OnTestIterationEndERKNS_8UnitTestEi called 0 returned 0% blocks executed 0%
    #####: 4025:void XmlUnitTestResultPrinter::OnTestIterationEnd(const UnitTest& unit_test,
        -: 4026:                                                  int /*iteration*/) {
    #####: 4027:  FILE* xmlout = OpenFileForWriting(output_file_);
    %%%%%: 4027-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4028:  std::stringstream stream;
    %%%%%: 4028-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4028-block  1
call    4 never executed
    $$$$$: 4028-block  2
call    5 never executed
    #####: 4029:  PrintXmlUnitTest(&stream, unit_test);
    %%%%%: 4029-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4030:  fprintf(xmlout, "%s", StringStreamToString(&stream).c_str());
    %%%%%: 4030-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4030-block  1
call    3 never executed
call    4 never executed
call    5 never executed
    #####: 4031:  fclose(xmlout);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4032:}
        -: 4033:
function _ZN7testing8internal24XmlUnitTestResultPrinter23ListTestsMatchingFilterERKSt6vectorIPNS_9TestSuiteESaIS4_EE called 0 returned 0% blocks executed 0%
    #####: 4034:void XmlUnitTestResultPrinter::ListTestsMatchingFilter(
        -: 4035:    const std::vector<TestSuite*>& test_suites) {
    #####: 4036:  FILE* xmlout = OpenFileForWriting(output_file_);
    %%%%%: 4036-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4037:  std::stringstream stream;
    %%%%%: 4037-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4037-block  1
call    4 never executed
    $$$$$: 4037-block  2
call    5 never executed
    #####: 4038:  PrintXmlTestsList(&stream, test_suites);
    %%%%%: 4038-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4039:  fprintf(xmlout, "%s", StringStreamToString(&stream).c_str());
    %%%%%: 4039-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4039-block  1
call    3 never executed
call    4 never executed
call    5 never executed
    #####: 4040:  fclose(xmlout);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4041:}
        -: 4042:
        -: 4043:// Returns an XML-escaped copy of the input string str.  If is_attribute
        -: 4044:// is true, the text is meant to appear as an attribute value, and
        -: 4045:// normalizable whitespace is preserved by replacing it with character
        -: 4046:// references.
        -: 4047://
        -: 4048:// Invalid XML characters in str, if any, are stripped from the output.
        -: 4049:// It is expected that most, if not all, of the text processed by this
        -: 4050:// module will consist of ordinary English text.
        -: 4051:// If this module is ever modified to produce version 1.1 XML output,
        -: 4052:// most invalid characters can be retained using character references.
function _ZN7testing8internal24XmlUnitTestResultPrinter9EscapeXmlERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb called 0 returned 0% blocks executed 0%
    #####: 4053:std::string XmlUnitTestResultPrinter::EscapeXml(
        -: 4054:    const std::string& str, bool is_attribute) {
    #####: 4055:  Message m;
    %%%%%: 4055-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4055-block  1
call    3 never executed
    $$$$$: 4055-block  2
call    4 never executed
        -: 4056:
    #####: 4057:  for (size_t i = 0; i < str.size(); ++i) {
    %%%%%: 4057-block  0
    %%%%%: 4057-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4057-block  2
    #####: 4058:    const char ch = str[i];
    %%%%%: 4058-block  0
call    0 never executed
    #####: 4059:    switch (ch) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4060:      case '<':
    #####: 4061:        m << "&lt;";
    %%%%%: 4061-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4062:        break;
    %%%%%: 4062-block  0
    #####: 4063:      case '>':
    #####: 4064:        m << "&gt;";
    %%%%%: 4064-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4065:        break;
    %%%%%: 4065-block  0
    #####: 4066:      case '&':
    #####: 4067:        m << "&amp;";
    %%%%%: 4067-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4068:        break;
    %%%%%: 4068-block  0
    #####: 4069:      case '\'':
    #####: 4070:        if (is_attribute)
    %%%%%: 4070-block  0
branch  0 never executed
branch  1 never executed
    #####: 4071:          m << "&apos;";
    %%%%%: 4071-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4072:        else
    #####: 4073:          m << '\'';
    %%%%%: 4073-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4073-block  1
    $$$$$: 4073-block  2
    #####: 4074:        break;
    %%%%%: 4074-block  0
    #####: 4075:      case '"':
    #####: 4076:        if (is_attribute)
    %%%%%: 4076-block  0
branch  0 never executed
branch  1 never executed
    #####: 4077:          m << "&quot;";
    %%%%%: 4077-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4078:        else
    #####: 4079:          m << '"';
    %%%%%: 4079-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4079-block  1
    $$$$$: 4079-block  2
    #####: 4080:        break;
    %%%%%: 4080-block  0
    #####: 4081:      default:
    #####: 4082:        if (IsValidXmlCharacter(ch)) {
    %%%%%: 4082-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4083:          if (is_attribute && IsNormalizableWhitespace(ch))
    %%%%%: 4083-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 4083-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4083-block  2
    %%%%%: 4083-block  3
    %%%%%: 4083-block  4
branch  5 never executed
branch  6 never executed
    #####: 4084:            m << "&#x" << String::FormatByte(static_cast<unsigned char>(ch))
    %%%%%: 4084-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4084-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4084-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4084-block  3
call    9 never executed
    $$$$$: 4084-block  4
call   10 never executed
    $$$$$: 4084-block  5
    #####: 4085:              << ";";
    %%%%%: 4085-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4086:          else
    #####: 4087:            m << ch;
    %%%%%: 4087-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4088:        }
    #####: 4089:        break;
    %%%%%: 4089-block  0
        -: 4090:    }
        -: 4091:  }
        -: 4092:
    #####: 4093:  return m.GetString();
    %%%%%: 4093-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4093-block  1
    %%%%%: 4093-block  2
        -: 4094:}
        -: 4095:
        -: 4096:// Returns the given string with all characters invalid in XML removed.
        -: 4097:// Currently invalid characters are dropped from the string. An
        -: 4098:// alternative is to replace them with certain characters such as . or ?.
function _ZN7testing8internal24XmlUnitTestResultPrinter26RemoveInvalidXmlCharactersERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 4099:std::string XmlUnitTestResultPrinter::RemoveInvalidXmlCharacters(
        -: 4100:    const std::string& str) {
    #####: 4101:  std::string output;
    %%%%%: 4101-block  0
call    0 never executed
    #####: 4102:  output.reserve(str.size());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4103:  for (std::string::const_iterator it = str.begin(); it != str.end(); ++it)
    %%%%%: 4103-block  0
call    0 never executed
    %%%%%: 4103-block  1
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4103-block  2
call    5 never executed
    #####: 4104:    if (IsValidXmlCharacter(*it))
    %%%%%: 4104-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4105:      output.push_back(*it);
    %%%%%: 4105-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 4106:
    #####: 4107:  return output;
    %%%%%: 4107-block  0
    %%%%%: 4107-block  1
        -: 4108:}
        -: 4109:
        -: 4110:// The following routines generate an XML representation of a UnitTest
        -: 4111:// object.
        -: 4112://
        -: 4113:// This is how Google Test concepts map to the DTD:
        -: 4114://
        -: 4115:// <testsuites name="AllTests">        <-- corresponds to a UnitTest object
        -: 4116://   <testsuite name="testcase-name">  <-- corresponds to a TestSuite object
        -: 4117://     <testcase name="test-name">     <-- corresponds to a TestInfo object
        -: 4118://       <failure message="...">...</failure>
        -: 4119://       <failure message="...">...</failure>
        -: 4120://       <failure message="...">...</failure>
        -: 4121://                                     <-- individual assertion failures
        -: 4122://     </testcase>
        -: 4123://   </testsuite>
        -: 4124:// </testsuites>
        -: 4125:
        -: 4126:// Formats the given time in milliseconds as seconds.
function _ZN7testing8internal27FormatTimeInMillisAsSecondsB5cxx11Ex called 0 returned 0% blocks executed 0%
    #####: 4127:std::string FormatTimeInMillisAsSeconds(TimeInMillis ms) {
    #####: 4128:  ::std::stringstream ss;
    %%%%%: 4128-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4128-block  1
call    4 never executed
    $$$$$: 4128-block  2
call    5 never executed
    #####: 4129:  ss << (static_cast<double>(ms) * 1e-3);
    %%%%%: 4129-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4130:  return ss.str();
    %%%%%: 4130-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4130-block  1
    %%%%%: 4130-block  2
        -: 4131:}
        -: 4132:
function _ZN7testing8internalL17PortableLocaltimeElP2tm called 0 returned 0% blocks executed 0%
    #####: 4133:static bool PortableLocaltime(time_t seconds, struct tm* out) {
        -: 4134:#if defined(_MSC_VER)
        -: 4135:  return localtime_s(out, &seconds) == 0;
        -: 4136:#elif defined(__MINGW32__) || defined(__MINGW64__)
        -: 4137:  // MINGW <time.h> provides neither localtime_r nor localtime_s, but uses
        -: 4138:  // Windows' localtime(), which has a thread-local tm buffer.
    #####: 4139:  struct tm* tm_ptr = localtime(&seconds);  // NOLINT
    %%%%%: 4139-block  0
call    0 never executed
    #####: 4140:  if (tm_ptr == nullptr) return false;
branch  0 never executed
branch  1 never executed
    %%%%%: 4140-block  0
    #####: 4141:  *out = *tm_ptr;
    #####: 4142:  return true;
    %%%%%: 4142-block  0
        -: 4143:#elif defined(__STDC_LIB_EXT1__)
        -: 4144:  // Uses localtime_s when available as localtime_r is only available from
        -: 4145:  // C23 standard.
        -: 4146:  return localtime_s(&seconds, out) != nullptr;
        -: 4147:#else
        -: 4148:  return localtime_r(&seconds, out) != nullptr;
        -: 4149:#endif
        -: 4150:}
        -: 4151:
        -: 4152:// Converts the given epoch time in milliseconds to a date string in the ISO
        -: 4153:// 8601 format, without the timezone information.
function _ZN7testing8internal32FormatEpochTimeInMillisAsIso8601B5cxx11Ex called 0 returned 0% blocks executed 0%
    #####: 4154:std::string FormatEpochTimeInMillisAsIso8601(TimeInMillis ms) {
        -: 4155:  struct tm time_struct;
    #####: 4156:  if (!PortableLocaltime(static_cast<time_t>(ms / 1000), &time_struct))
    %%%%%: 4156-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4157:    return "";
    %%%%%: 4157-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4157-block  1
call    4 never executed
    $$$$$: 4157-block  2
call    5 never executed
    $$$$$: 4157-block  3
        -: 4158:  // YYYY-MM-DDThh:mm:ss.sss
    #####: 4159:  return StreamableToString(time_struct.tm_year + 1900) + "-" +
    %%%%%: 4159-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4159-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4159-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
    $$$$$: 4159-block  3
call   11 never executed
    $$$$$: 4159-block  4
    $$$$$: 4159-block  5
call   12 never executed
    $$$$$: 4159-block  6
    $$$$$: 4159-block  7
call   13 never executed
    $$$$$: 4159-block  8
    $$$$$: 4159-block  9
    #####: 4160:      String::FormatIntWidth2(time_struct.tm_mon + 1) + "-" +
    %%%%%: 4160-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4160-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4160-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4160-block  3
call   12 never executed
    $$$$$: 4160-block  4
    $$$$$: 4160-block  5
call   13 never executed
    $$$$$: 4160-block  6
    $$$$$: 4160-block  7
call   14 never executed
    $$$$$: 4160-block  8
    #####: 4161:      String::FormatIntWidth2(time_struct.tm_mday) + "T" +
    %%%%%: 4161-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4161-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4161-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4161-block  3
call   12 never executed
    $$$$$: 4161-block  4
    $$$$$: 4161-block  5
call   13 never executed
    $$$$$: 4161-block  6
    $$$$$: 4161-block  7
call   14 never executed
    $$$$$: 4161-block  8
    #####: 4162:      String::FormatIntWidth2(time_struct.tm_hour) + ":" +
    %%%%%: 4162-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4162-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4162-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4162-block  3
call   12 never executed
    $$$$$: 4162-block  4
    $$$$$: 4162-block  5
call   13 never executed
    $$$$$: 4162-block  6
    $$$$$: 4162-block  7
call   14 never executed
    $$$$$: 4162-block  8
    #####: 4163:      String::FormatIntWidth2(time_struct.tm_min) + ":" +
    %%%%%: 4163-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4163-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4163-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4163-block  3
call   12 never executed
    $$$$$: 4163-block  4
    $$$$$: 4163-block  5
call   13 never executed
    $$$$$: 4163-block  6
    $$$$$: 4163-block  7
call   14 never executed
    $$$$$: 4163-block  8
    #####: 4164:      String::FormatIntWidth2(time_struct.tm_sec) + "." +
    %%%%%: 4164-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4164-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4164-block  2
call    6 never executed
call    7 never executed
call    8 never executed
    $$$$$: 4164-block  3
call    9 never executed
    $$$$$: 4164-block  4
    $$$$$: 4164-block  5
call   10 never executed
    $$$$$: 4164-block  6
    #####: 4165:      String::FormatIntWidthN(static_cast<int>(ms % 1000), 3);
    %%%%%: 4165-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4165-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4165-block  2
call    6 never executed
    $$$$$: 4165-block  3
call    7 never executed
    $$$$$: 4165-block  4
        -: 4166:}
        -: 4167:
        -: 4168:// Streams an XML CDATA section, escaping invalid CDATA sequences as needed.
function _ZN7testing8internal24XmlUnitTestResultPrinter21OutputXmlCDataSectionEPSoPKc called 0 returned 0% blocks executed 0%
    #####: 4169:void XmlUnitTestResultPrinter::OutputXmlCDataSection(::std::ostream* stream,
        -: 4170:                                                     const char* data) {
    #####: 4171:  const char* segment = data;
    #####: 4172:  *stream << "<![CDATA[";
    %%%%%: 4172-block  0
call    0 never executed
        -: 4173:  for (;;) {
    #####: 4174:    const char* const next_segment = strstr(segment, "]]>");
    #####: 4175:    if (next_segment != nullptr) {
    %%%%%: 4175-block  0
branch  0 never executed
branch  1 never executed
        -: 4176:      stream->write(
    #####: 4177:          segment, static_cast<std::streamsize>(next_segment - segment));
    %%%%%: 4177-block  0
call    0 never executed
    #####: 4178:      *stream << "]]>]]&gt;<![CDATA[";
call    0 never executed
    #####: 4179:      segment = next_segment + strlen("]]>");
        -: 4180:    } else {
    #####: 4181:      *stream << segment;
    %%%%%: 4181-block  0
call    0 never executed
    #####: 4182:      break;
        -: 4183:    }
    #####: 4184:  }
    %%%%%: 4184-block  0
    #####: 4185:  *stream << "]]>";
    %%%%%: 4185-block  0
call    0 never executed
    #####: 4186:}
        -: 4187:
function _ZN7testing8internal24XmlUnitTestResultPrinter18OutputXmlAttributeEPSoRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_SA_ called 0 returned 0% blocks executed 0%
    #####: 4188:void XmlUnitTestResultPrinter::OutputXmlAttribute(
        -: 4189:    std::ostream* stream,
        -: 4190:    const std::string& element_name,
        -: 4191:    const std::string& name,
        -: 4192:    const std::string& value) {
        -: 4193:  const std::vector<std::string>& allowed_names =
    #####: 4194:      GetReservedOutputAttributesForElement(element_name);
    %%%%%: 4194-block  0
call    0 never executed
    $$$$$: 4194-block  1
call    1 never executed
        -: 4195:
    #####: 4196:  GTEST_CHECK_(std::find(allowed_names.begin(), allowed_names.end(), name) !=
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4196-block  0
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4196-block  1
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4196-block  2
call   13 never executed
    %%%%%: 4196-block  3
call   14 never executed
    $$$$$: 4196-block  4
    $$$$$: 4196-block  5
call   15 never executed
    $$$$$: 4196-block  6
        -: 4197:                   allowed_names.end())
        -: 4198:      << "Attribute " << name << " is not allowed for element <" << element_name
    #####: 4199:      << ">.";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4199-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4199-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4199-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4199-block  3
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4199-block  4
call   15 never executed
branch 16 never executed
branch 17 never executed
        -: 4200:
    #####: 4201:  *stream << " " << name << "=\"" << EscapeXmlAttribute(value) << "\"";
    %%%%%: 4201-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4201-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4201-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4201-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4201-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4201-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%: 4201-block  6
call   18 never executed
call   19 never executed
    $$$$$: 4201-block  7
call   20 never executed
    $$$$$: 4201-block  8
    #####: 4202:}
        -: 4203:
        -: 4204:// Streams a test suite XML stanza containing the given test result.
function _ZN7testing8internal24XmlUnitTestResultPrinter31OutputXmlTestSuiteForTestResultEPSoRKNS_10TestResultE called 0 returned 0% blocks executed 0%
    #####: 4205:void XmlUnitTestResultPrinter::OutputXmlTestSuiteForTestResult(
        -: 4206:    ::std::ostream* stream, const TestResult& result) {
        -: 4207:  // Output the boilerplate for a minimal test suite with one test.
    #####: 4208:  *stream << "  <testsuite";
    %%%%%: 4208-block  0
call    0 never executed
    #####: 4209:  OutputXmlAttribute(stream, "testsuite", "name", "NonTestSuiteFailure");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4209-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4209-block  1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4209-block  2
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4209-block  3
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
    $$$$$: 4209-block  4
call   21 never executed
    $$$$$: 4209-block  5
    $$$$$: 4209-block  6
call   22 never executed
    $$$$$: 4209-block  7
    $$$$$: 4209-block  8
call   23 never executed
    $$$$$: 4209-block  9
    $$$$$: 4209-block 10
call   24 never executed
    $$$$$: 4209-block 11
    $$$$$: 4209-block 12
call   25 never executed
    $$$$$: 4209-block 13
    $$$$$: 4209-block 14
call   26 never executed
    $$$$$: 4209-block 15
call   27 never executed
    #####: 4210:  OutputXmlAttribute(stream, "testsuite", "tests", "1");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4210-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4210-block  1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4210-block  2
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4210-block  3
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
    $$$$$: 4210-block  4
call   21 never executed
    $$$$$: 4210-block  5
    $$$$$: 4210-block  6
call   22 never executed
    $$$$$: 4210-block  7
    $$$$$: 4210-block  8
call   23 never executed
    $$$$$: 4210-block  9
    $$$$$: 4210-block 10
call   24 never executed
    $$$$$: 4210-block 11
    $$$$$: 4210-block 12
call   25 never executed
    $$$$$: 4210-block 13
    $$$$$: 4210-block 14
call   26 never executed
    $$$$$: 4210-block 15
call   27 never executed
    #####: 4211:  OutputXmlAttribute(stream, "testsuite", "failures", "1");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4211-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4211-block  1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4211-block  2
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4211-block  3
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
    $$$$$: 4211-block  4
call   21 never executed
    $$$$$: 4211-block  5
    $$$$$: 4211-block  6
call   22 never executed
    $$$$$: 4211-block  7
    $$$$$: 4211-block  8
call   23 never executed
    $$$$$: 4211-block  9
    $$$$$: 4211-block 10
call   24 never executed
    $$$$$: 4211-block 11
    $$$$$: 4211-block 12
call   25 never executed
    $$$$$: 4211-block 13
    $$$$$: 4211-block 14
call   26 never executed
    $$$$$: 4211-block 15
call   27 never executed
    #####: 4212:  OutputXmlAttribute(stream, "testsuite", "disabled", "0");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4212-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4212-block  1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4212-block  2
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4212-block  3
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
    $$$$$: 4212-block  4
call   21 never executed
    $$$$$: 4212-block  5
    $$$$$: 4212-block  6
call   22 never executed
    $$$$$: 4212-block  7
    $$$$$: 4212-block  8
call   23 never executed
    $$$$$: 4212-block  9
    $$$$$: 4212-block 10
call   24 never executed
    $$$$$: 4212-block 11
    $$$$$: 4212-block 12
call   25 never executed
    $$$$$: 4212-block 13
    $$$$$: 4212-block 14
call   26 never executed
    $$$$$: 4212-block 15
call   27 never executed
    #####: 4213:  OutputXmlAttribute(stream, "testsuite", "skipped", "0");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4213-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4213-block  1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4213-block  2
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4213-block  3
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
    $$$$$: 4213-block  4
call   21 never executed
    $$$$$: 4213-block  5
    $$$$$: 4213-block  6
call   22 never executed
    $$$$$: 4213-block  7
    $$$$$: 4213-block  8
call   23 never executed
    $$$$$: 4213-block  9
    $$$$$: 4213-block 10
call   24 never executed
    $$$$$: 4213-block 11
    $$$$$: 4213-block 12
call   25 never executed
    $$$$$: 4213-block 13
    $$$$$: 4213-block 14
call   26 never executed
    $$$$$: 4213-block 15
call   27 never executed
    #####: 4214:  OutputXmlAttribute(stream, "testsuite", "errors", "0");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4214-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4214-block  1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4214-block  2
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4214-block  3
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
    $$$$$: 4214-block  4
call   21 never executed
    $$$$$: 4214-block  5
    $$$$$: 4214-block  6
call   22 never executed
    $$$$$: 4214-block  7
    $$$$$: 4214-block  8
call   23 never executed
    $$$$$: 4214-block  9
    $$$$$: 4214-block 10
call   24 never executed
    $$$$$: 4214-block 11
    $$$$$: 4214-block 12
call   25 never executed
    $$$$$: 4214-block 13
    $$$$$: 4214-block 14
call   26 never executed
    $$$$$: 4214-block 15
call   27 never executed
    #####: 4215:  OutputXmlAttribute(stream, "testsuite", "time",
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4215-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4215-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4215-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4215-block  3
call   15 never executed
    $$$$$: 4215-block  4
    $$$$$: 4215-block  5
call   16 never executed
    $$$$$: 4215-block  6
    $$$$$: 4215-block  7
call   17 never executed
    $$$$$: 4215-block  8
    $$$$$: 4215-block  9
call   18 never executed
    $$$$$: 4215-block 10
    #####: 4216:                     FormatTimeInMillisAsSeconds(result.elapsed_time()));
call    0 never executed
call    1 never executed
call    2 never executed
    $$$$$: 4216-block  0
call    3 never executed
    $$$$$: 4216-block  1
call    4 never executed
    #####: 4217:  OutputXmlAttribute(
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4217-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4217-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4217-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4217-block  3
call   15 never executed
    $$$$$: 4217-block  4
    $$$$$: 4217-block  5
call   16 never executed
    $$$$$: 4217-block  6
    $$$$$: 4217-block  7
call   17 never executed
    $$$$$: 4217-block  8
    $$$$$: 4217-block  9
call   18 never executed
    $$$$$: 4217-block 10
        -: 4218:      stream, "testsuite", "timestamp",
    #####: 4219:      FormatEpochTimeInMillisAsIso8601(result.start_timestamp()));
call    0 never executed
call    1 never executed
call    2 never executed
    $$$$$: 4219-block  0
call    3 never executed
    $$$$$: 4219-block  1
call    4 never executed
    #####: 4220:  *stream << ">";
call    0 never executed
        -: 4221:
        -: 4222:  // Output the boilerplate for a minimal test case with a single test.
    #####: 4223:  *stream << "    <testcase";
call    0 never executed
    #####: 4224:  OutputXmlAttribute(stream, "testcase", "name", "");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4224-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4224-block  1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4224-block  2
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4224-block  3
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
    $$$$$: 4224-block  4
call   21 never executed
    $$$$$: 4224-block  5
    $$$$$: 4224-block  6
call   22 never executed
    $$$$$: 4224-block  7
    $$$$$: 4224-block  8
call   23 never executed
    $$$$$: 4224-block  9
    $$$$$: 4224-block 10
call   24 never executed
    $$$$$: 4224-block 11
    $$$$$: 4224-block 12
call   25 never executed
    $$$$$: 4224-block 13
    $$$$$: 4224-block 14
call   26 never executed
    $$$$$: 4224-block 15
call   27 never executed
    #####: 4225:  OutputXmlAttribute(stream, "testcase", "status", "run");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4225-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4225-block  1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4225-block  2
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4225-block  3
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
    $$$$$: 4225-block  4
call   21 never executed
    $$$$$: 4225-block  5
    $$$$$: 4225-block  6
call   22 never executed
    $$$$$: 4225-block  7
    $$$$$: 4225-block  8
call   23 never executed
    $$$$$: 4225-block  9
    $$$$$: 4225-block 10
call   24 never executed
    $$$$$: 4225-block 11
    $$$$$: 4225-block 12
call   25 never executed
    $$$$$: 4225-block 13
    $$$$$: 4225-block 14
call   26 never executed
    $$$$$: 4225-block 15
call   27 never executed
    #####: 4226:  OutputXmlAttribute(stream, "testcase", "result", "completed");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4226-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4226-block  1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4226-block  2
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4226-block  3
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
    $$$$$: 4226-block  4
call   21 never executed
    $$$$$: 4226-block  5
    $$$$$: 4226-block  6
call   22 never executed
    $$$$$: 4226-block  7
    $$$$$: 4226-block  8
call   23 never executed
    $$$$$: 4226-block  9
    $$$$$: 4226-block 10
call   24 never executed
    $$$$$: 4226-block 11
    $$$$$: 4226-block 12
call   25 never executed
    $$$$$: 4226-block 13
    $$$$$: 4226-block 14
call   26 never executed
    $$$$$: 4226-block 15
call   27 never executed
    #####: 4227:  OutputXmlAttribute(stream, "testcase", "classname", "");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4227-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4227-block  1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4227-block  2
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4227-block  3
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
    $$$$$: 4227-block  4
call   21 never executed
    $$$$$: 4227-block  5
    $$$$$: 4227-block  6
call   22 never executed
    $$$$$: 4227-block  7
    $$$$$: 4227-block  8
call   23 never executed
    $$$$$: 4227-block  9
    $$$$$: 4227-block 10
call   24 never executed
    $$$$$: 4227-block 11
    $$$$$: 4227-block 12
call   25 never executed
    $$$$$: 4227-block 13
    $$$$$: 4227-block 14
call   26 never executed
    $$$$$: 4227-block 15
call   27 never executed
    #####: 4228:  OutputXmlAttribute(stream, "testcase", "time",
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4228-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4228-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4228-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4228-block  3
call   15 never executed
    $$$$$: 4228-block  4
    $$$$$: 4228-block  5
call   16 never executed
    $$$$$: 4228-block  6
    $$$$$: 4228-block  7
call   17 never executed
    $$$$$: 4228-block  8
    $$$$$: 4228-block  9
call   18 never executed
    $$$$$: 4228-block 10
    #####: 4229:                     FormatTimeInMillisAsSeconds(result.elapsed_time()));
call    0 never executed
call    1 never executed
call    2 never executed
    $$$$$: 4229-block  0
call    3 never executed
    $$$$$: 4229-block  1
call    4 never executed
    #####: 4230:  OutputXmlAttribute(
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4230-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4230-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4230-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4230-block  3
call   15 never executed
    $$$$$: 4230-block  4
    $$$$$: 4230-block  5
call   16 never executed
    $$$$$: 4230-block  6
    $$$$$: 4230-block  7
call   17 never executed
    $$$$$: 4230-block  8
    $$$$$: 4230-block  9
call   18 never executed
    $$$$$: 4230-block 10
        -: 4231:      stream, "testcase", "timestamp",
    #####: 4232:      FormatEpochTimeInMillisAsIso8601(result.start_timestamp()));
call    0 never executed
call    1 never executed
call    2 never executed
    $$$$$: 4232-block  0
call    3 never executed
        -: 4233:
        -: 4234:  // Output the actual test result.
    #####: 4235:  OutputXmlTestResult(stream, result);
call    0 never executed
        -: 4236:
        -: 4237:  // Complete the test suite.
    #####: 4238:  *stream << "  </testsuite>\n";
call    0 never executed
    #####: 4239:}
        -: 4240:
        -: 4241:// Prints an XML representation of a TestInfo object.
function _ZN7testing8internal24XmlUnitTestResultPrinter17OutputXmlTestInfoEPSoPKcRKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 4242:void XmlUnitTestResultPrinter::OutputXmlTestInfo(::std::ostream* stream,
        -: 4243:                                                 const char* test_suite_name,
        -: 4244:                                                 const TestInfo& test_info) {
    #####: 4245:  const TestResult& result = *test_info.result();
    %%%%%: 4245-block  0
call    0 never executed
    #####: 4246:  const std::string kTestsuite = "testcase";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 4246-block  0
    $$$$$: 4246-block  1
call    4 never executed
        -: 4247:
    #####: 4248:  if (test_info.is_in_another_shard()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4249:    return;
    %%%%%: 4249-block  0
        -: 4250:  }
        -: 4251:
    #####: 4252:  *stream << "    <testcase";
    %%%%%: 4252-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4253:  OutputXmlAttribute(stream, kTestsuite, "name", test_info.name());
    %%%%%: 4253-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4253-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4253-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4253-block  3
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4253-block  4
call   16 never executed
    $$$$$: 4253-block  5
    $$$$$: 4253-block  6
call   17 never executed
    $$$$$: 4253-block  7
    $$$$$: 4253-block  8
call   18 never executed
    $$$$$: 4253-block  9
    $$$$$: 4253-block 10
call   19 never executed
    $$$$$: 4253-block 11
        -: 4254:
    #####: 4255:  if (test_info.value_param() != nullptr) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4256:    OutputXmlAttribute(stream, kTestsuite, "value_param",
    %%%%%: 4256-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4256-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4256-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4256-block  3
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4256-block  4
call   16 never executed
    $$$$$: 4256-block  5
    $$$$$: 4256-block  6
call   17 never executed
    $$$$$: 4256-block  7
    $$$$$: 4256-block  8
call   18 never executed
    $$$$$: 4256-block  9
    $$$$$: 4256-block 10
call   19 never executed
    $$$$$: 4256-block 11
        -: 4257:                       test_info.value_param());
        -: 4258:  }
    #####: 4259:  if (test_info.type_param() != nullptr) {
    %%%%%: 4259-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4260:    OutputXmlAttribute(stream, kTestsuite, "type_param",
    %%%%%: 4260-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4260-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4260-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4260-block  3
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4260-block  4
call   16 never executed
    $$$$$: 4260-block  5
    $$$$$: 4260-block  6
call   17 never executed
    $$$$$: 4260-block  7
    $$$$$: 4260-block  8
call   18 never executed
    $$$$$: 4260-block  9
    $$$$$: 4260-block 10
call   19 never executed
    $$$$$: 4260-block 11
        -: 4261:                       test_info.type_param());
        -: 4262:  }
    #####: 4263:  if (GTEST_FLAG_GET(list_tests)) {
    %%%%%: 4263-block  0
branch  0 never executed
branch  1 never executed
    #####: 4264:    OutputXmlAttribute(stream, kTestsuite, "file", test_info.file());
    %%%%%: 4264-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4264-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4264-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4264-block  3
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4264-block  4
call   16 never executed
    $$$$$: 4264-block  5
    $$$$$: 4264-block  6
call   17 never executed
    $$$$$: 4264-block  7
    $$$$$: 4264-block  8
call   18 never executed
    $$$$$: 4264-block  9
    $$$$$: 4264-block 10
call   19 never executed
    $$$$$: 4264-block 11
    #####: 4265:    OutputXmlAttribute(stream, kTestsuite, "line",
    %%%%%: 4265-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4265-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4265-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4265-block  3
call    9 never executed
    $$$$$: 4265-block  4
    $$$$$: 4265-block  5
call   10 never executed
    $$$$$: 4265-block  6
    #####: 4266:                       StreamableToString(test_info.line()));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4266-block  0
call    5 never executed
    $$$$$: 4266-block  1
    $$$$$: 4266-block  2
    #####: 4267:    *stream << " />\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4268:    return;
    %%%%%: 4268-block  0
        -: 4269:  }
        -: 4270:
    #####: 4271:  OutputXmlAttribute(stream, kTestsuite, "status",
    %%%%%: 4271-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4271-block  1
    %%%%%: 4271-block  2
    %%%%%: 4271-block  3
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4271-block  4
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4271-block  5
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4271-block  6
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
    $$$$$: 4271-block  7
call   17 never executed
    $$$$$: 4271-block  8
    $$$$$: 4271-block  9
call   18 never executed
    $$$$$: 4271-block 10
    $$$$$: 4271-block 11
call   19 never executed
    $$$$$: 4271-block 12
    $$$$$: 4271-block 13
call   20 never executed
    $$$$$: 4271-block 14
    #####: 4272:                     test_info.should_run() ? "run" : "notrun");
call    0 never executed
    #####: 4273:  OutputXmlAttribute(stream, kTestsuite, "result",
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4273-block  0
    %%%%%: 4273-block  1
    %%%%%: 4273-block  2
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4273-block  3
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4273-block  4
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4273-block  5
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
    $$$$$: 4273-block  6
call   17 never executed
    $$$$$: 4273-block  7
    $$$$$: 4273-block  8
call   18 never executed
    $$$$$: 4273-block  9
    $$$$$: 4273-block 10
call   19 never executed
    $$$$$: 4273-block 11
    $$$$$: 4273-block 12
call   20 never executed
    $$$$$: 4273-block 13
    #####: 4274:                     test_info.should_run()
call    0 never executed
    #####: 4275:                         ? (result.Skipped() ? "skipped" : "completed")
    %%%%%: 4275-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4275-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 4275-block  2
    %%%%%: 4275-block  3
        -: 4276:                         : "suppressed");
    #####: 4277:  OutputXmlAttribute(stream, kTestsuite, "time",
    %%%%%: 4277-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4277-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4277-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4277-block  3
call    9 never executed
    $$$$$: 4277-block  4
    $$$$$: 4277-block  5
call   10 never executed
    $$$$$: 4277-block  6
    #####: 4278:                     FormatTimeInMillisAsSeconds(result.elapsed_time()));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4278-block  0
call    5 never executed
    $$$$$: 4278-block  1
    #####: 4279:  OutputXmlAttribute(
    %%%%%: 4279-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4279-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4279-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4279-block  3
call    9 never executed
    $$$$$: 4279-block  4
    $$$$$: 4279-block  5
call   10 never executed
    $$$$$: 4279-block  6
        -: 4280:      stream, kTestsuite, "timestamp",
    #####: 4281:      FormatEpochTimeInMillisAsIso8601(result.start_timestamp()));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4281-block  0
call    5 never executed
    $$$$$: 4281-block  1
    #####: 4282:  OutputXmlAttribute(stream, kTestsuite, "classname", test_suite_name);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4282-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4282-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4282-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4282-block  3
call   15 never executed
    $$$$$: 4282-block  4
    $$$$$: 4282-block  5
call   16 never executed
    $$$$$: 4282-block  6
    $$$$$: 4282-block  7
call   17 never executed
    $$$$$: 4282-block  8
    $$$$$: 4282-block  9
call   18 never executed
    $$$$$: 4282-block 10
        -: 4283:
    #####: 4284:  OutputXmlTestResult(stream, result);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4285:}
        -: 4286:
function _ZN7testing8internal24XmlUnitTestResultPrinter19OutputXmlTestResultEPSoRKNS_10TestResultE called 0 returned 0% blocks executed 0%
    #####: 4287:void XmlUnitTestResultPrinter::OutputXmlTestResult(::std::ostream* stream,
        -: 4288:                                                   const TestResult& result) {
    #####: 4289:  int failures = 0;
    #####: 4290:  int skips = 0;
    #####: 4291:  for (int i = 0; i < result.total_part_count(); ++i) {
    %%%%%: 4291-block  0
    %%%%%: 4291-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4291-block  2
    #####: 4292:    const TestPartResult& part = result.GetTestPartResult(i);
    %%%%%: 4292-block  0
call    0 never executed
    #####: 4293:    if (part.failed()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4294:      if (++failures == 1 && skips == 0) {
    %%%%%: 4294-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 4294-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 4294-block  2
    %%%%%: 4294-block  3
    %%%%%: 4294-block  4
branch  4 never executed
branch  5 never executed
    #####: 4295:        *stream << ">\n";
    %%%%%: 4295-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4296:      }
        -: 4297:      const std::string location =
        -: 4298:          internal::FormatCompilerIndependentFileLocation(part.file_name(),
    #####: 4299:                                                          part.line_number());
    %%%%%: 4299-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    $$$$$: 4299-block  1
call    6 never executed
    #####: 4300:      const std::string summary = location + "\n" + part.summary();
    %%%%%: 4300-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4300-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    $$$$$: 4300-block  2
    $$$$$: 4300-block  3
call    8 never executed
        -: 4301:      *stream << "      <failure message=\""
    #####: 4302:              << EscapeXmlAttribute(summary)
    %%%%%: 4302-block  0
call    0 never executed
    $$$$$: 4302-block  1
call    1 never executed
    $$$$$: 4302-block  2
    #####: 4303:              << "\" type=\"\">";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4303-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4303-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4303-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 4304:      const std::string detail = location + "\n" + part.message();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4304-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4304-block  1
call    7 never executed
    $$$$$: 4304-block  2
    $$$$$: 4304-block  3
call    8 never executed
    #####: 4305:      OutputXmlCDataSection(stream, RemoveInvalidXmlCharacters(detail).c_str());
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4305-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4305-block  1
call    7 never executed
    $$$$$: 4305-block  2
call    8 never executed
    $$$$$: 4305-block  3
    #####: 4306:      *stream << "</failure>\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4307:    } else if (part.skipped()) {
    %%%%%: 4307-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4308:      if (++skips == 1 && failures == 0) {
    %%%%%: 4308-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 4308-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 4308-block  2
    %%%%%: 4308-block  3
    %%%%%: 4308-block  4
branch  4 never executed
branch  5 never executed
    #####: 4309:        *stream << ">\n";
    %%%%%: 4309-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4310:      }
        -: 4311:      const std::string location =
        -: 4312:          internal::FormatCompilerIndependentFileLocation(part.file_name(),
    #####: 4313:                                                          part.line_number());
    %%%%%: 4313-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    $$$$$: 4313-block  1
call    6 never executed
    #####: 4314:      const std::string summary = location + "\n" + part.summary();
    %%%%%: 4314-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4314-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    $$$$$: 4314-block  2
    $$$$$: 4314-block  3
call    8 never executed
        -: 4315:      *stream << "      <skipped message=\""
    #####: 4316:              << EscapeXmlAttribute(summary.c_str()) << "\">";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4316-block  0
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4316-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4316-block  2
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 4316-block  3
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%: 4316-block  4
call   17 never executed
call   18 never executed
call   19 never executed
    $$$$$: 4316-block  5
call   20 never executed
    $$$$$: 4316-block  6
    $$$$$: 4316-block  7
call   21 never executed
    $$$$$: 4316-block  8
    $$$$$: 4316-block  9
call   22 never executed
    $$$$$: 4316-block 10
    #####: 4317:      const std::string detail = location + "\n" + part.message();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4317-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4317-block  1
call    7 never executed
    $$$$$: 4317-block  2
    $$$$$: 4317-block  3
call    8 never executed
    #####: 4318:      OutputXmlCDataSection(stream, RemoveInvalidXmlCharacters(detail).c_str());
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4318-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4318-block  1
call    7 never executed
    $$$$$: 4318-block  2
call    8 never executed
    $$$$$: 4318-block  3
    #####: 4319:      *stream << "</skipped>\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4320:    }
        -: 4321:  }
        -: 4322:
    #####: 4323:  if (failures == 0 && skips == 0 && result.test_property_count() == 0) {
    %%%%%: 4323-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 4323-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 4323-block  2
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4323-block  3
    %%%%%: 4323-block  4
    %%%%%: 4323-block  5
branch  7 never executed
branch  8 never executed
    #####: 4324:    *stream << " />\n";
    %%%%%: 4324-block  0
call    0 never executed
        -: 4325:  } else {
    #####: 4326:    if (failures == 0 && skips == 0) {
    %%%%%: 4326-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 4326-block  1
branch  2 never executed
branch  3 never executed
    #####: 4327:      *stream << ">\n";
    %%%%%: 4327-block  0
call    0 never executed
        -: 4328:    }
    #####: 4329:    OutputXmlTestProperties(stream, result);
    %%%%%: 4329-block  0
call    0 never executed
    #####: 4330:    *stream << "    </testcase>\n";
call    0 never executed
        -: 4331:  }
    #####: 4332:}
    %%%%%: 4332-block  0
        -: 4333:
        -: 4334:// Prints an XML representation of a TestSuite object
function _ZN7testing8internal24XmlUnitTestResultPrinter17PrintXmlTestSuiteEPSoRKNS_9TestSuiteE called 0 returned 0% blocks executed 0%
    #####: 4335:void XmlUnitTestResultPrinter::PrintXmlTestSuite(std::ostream* stream,
        -: 4336:                                                 const TestSuite& test_suite) {
    #####: 4337:  const std::string kTestsuite = "testsuite";
    %%%%%: 4337-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4337-block  1
call    4 never executed
    $$$$$: 4337-block  2
    $$$$$: 4337-block  3
call    5 never executed
    #####: 4338:  *stream << "  <" << kTestsuite;
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4338-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4339:  OutputXmlAttribute(stream, kTestsuite, "name", test_suite.name());
    %%%%%: 4339-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4339-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4339-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4339-block  3
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4339-block  4
call   16 never executed
    $$$$$: 4339-block  5
    $$$$$: 4339-block  6
call   17 never executed
    $$$$$: 4339-block  7
    $$$$$: 4339-block  8
call   18 never executed
    $$$$$: 4339-block  9
    $$$$$: 4339-block 10
call   19 never executed
    $$$$$: 4339-block 11
    #####: 4340:  OutputXmlAttribute(stream, kTestsuite, "tests",
    %%%%%: 4340-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4340-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4340-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4340-block  3
call    9 never executed
    $$$$$: 4340-block  4
    $$$$$: 4340-block  5
call   10 never executed
    $$$$$: 4340-block  6
    #####: 4341:                     StreamableToString(test_suite.reportable_test_count()));
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4341-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 4341-block  1
call    7 never executed
    $$$$$: 4341-block  2
    $$$$$: 4341-block  3
    #####: 4342:  if (!GTEST_FLAG_GET(list_tests)) {
branch  0 never executed
branch  1 never executed
    #####: 4343:    OutputXmlAttribute(stream, kTestsuite, "failures",
    %%%%%: 4343-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4343-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4343-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4343-block  3
call    9 never executed
    $$$$$: 4343-block  4
    $$$$$: 4343-block  5
call   10 never executed
    $$$$$: 4343-block  6
    #####: 4344:                       StreamableToString(test_suite.failed_test_count()));
    %%%%%: 4344-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4344-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 4344-block  2
call    7 never executed
    $$$$$: 4344-block  3
    $$$$$: 4344-block  4
    #####: 4345:    OutputXmlAttribute(
    %%%%%: 4345-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4345-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4345-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4345-block  3
call    9 never executed
    $$$$$: 4345-block  4
    $$$$$: 4345-block  5
call   10 never executed
    $$$$$: 4345-block  6
        -: 4346:        stream, kTestsuite, "disabled",
    #####: 4347:        StreamableToString(test_suite.reportable_disabled_test_count()));
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4347-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 4347-block  1
call    7 never executed
    $$$$$: 4347-block  2
    $$$$$: 4347-block  3
    #####: 4348:    OutputXmlAttribute(stream, kTestsuite, "skipped",
    %%%%%: 4348-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4348-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4348-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4348-block  3
call    9 never executed
    $$$$$: 4348-block  4
    $$$$$: 4348-block  5
call   10 never executed
    $$$$$: 4348-block  6
    #####: 4349:                       StreamableToString(test_suite.skipped_test_count()));
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4349-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 4349-block  1
call    7 never executed
    $$$$$: 4349-block  2
    $$$$$: 4349-block  3
        -: 4350:
    #####: 4351:    OutputXmlAttribute(stream, kTestsuite, "errors", "0");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4351-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4351-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4351-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4351-block  3
call   15 never executed
    $$$$$: 4351-block  4
    $$$$$: 4351-block  5
call   16 never executed
    $$$$$: 4351-block  6
    $$$$$: 4351-block  7
call   17 never executed
    $$$$$: 4351-block  8
    $$$$$: 4351-block  9
call   18 never executed
    $$$$$: 4351-block 10
        -: 4352:
    #####: 4353:    OutputXmlAttribute(stream, kTestsuite, "time",
    %%%%%: 4353-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4353-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4353-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4353-block  3
call    9 never executed
    $$$$$: 4353-block  4
    $$$$$: 4353-block  5
call   10 never executed
    $$$$$: 4353-block  6
    #####: 4354:                       FormatTimeInMillisAsSeconds(test_suite.elapsed_time()));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4354-block  0
call    5 never executed
    $$$$$: 4354-block  1
    #####: 4355:    OutputXmlAttribute(
    %%%%%: 4355-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4355-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4355-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4355-block  3
call    9 never executed
    $$$$$: 4355-block  4
    $$$$$: 4355-block  5
call   10 never executed
    $$$$$: 4355-block  6
        -: 4356:        stream, kTestsuite, "timestamp",
    #####: 4357:        FormatEpochTimeInMillisAsIso8601(test_suite.start_timestamp()));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4357-block  0
call    5 never executed
    $$$$$: 4357-block  1
    #####: 4358:    *stream << TestPropertiesAsXmlAttributes(test_suite.ad_hoc_test_result());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4358-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4358-block  1
call    7 never executed
    $$$$$: 4358-block  2
call    8 never executed
    $$$$$: 4358-block  3
        -: 4359:  }
    #####: 4360:  *stream << ">\n";
    %%%%%: 4360-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4361:  for (int i = 0; i < test_suite.total_test_count(); ++i) {
    %%%%%: 4361-block  0
    %%%%%: 4361-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4361-block  2
    #####: 4362:    if (test_suite.GetTestInfo(i)->is_reportable())
    %%%%%: 4362-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4362-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4363:      OutputXmlTestInfo(stream, test_suite.name(), *test_suite.GetTestInfo(i));
    %%%%%: 4363-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4363-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 4364:  }
    #####: 4365:  *stream << "  </" << kTestsuite << ">\n";
    %%%%%: 4365-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4365-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4365-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 4366:}
        -: 4367:
        -: 4368:// Prints an XML summary of unit_test to output stream out.
function _ZN7testing8internal24XmlUnitTestResultPrinter16PrintXmlUnitTestEPSoRKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 4369:void XmlUnitTestResultPrinter::PrintXmlUnitTest(std::ostream* stream,
        -: 4370:                                                const UnitTest& unit_test) {
    #####: 4371:  const std::string kTestsuites = "testsuites";
    %%%%%: 4371-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4371-block  1
call    4 never executed
    $$$$$: 4371-block  2
    $$$$$: 4371-block  3
call    5 never executed
        -: 4372:
    #####: 4373:  *stream << "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4374:  *stream << "<" << kTestsuites;
    %%%%%: 4374-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4374-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 4375:
    #####: 4376:  OutputXmlAttribute(stream, kTestsuites, "tests",
    %%%%%: 4376-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4376-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4376-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4376-block  3
call    9 never executed
    $$$$$: 4376-block  4
    $$$$$: 4376-block  5
call   10 never executed
    $$$$$: 4376-block  6
    #####: 4377:                     StreamableToString(unit_test.reportable_test_count()));
    %%%%%: 4377-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4377-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 4377-block  2
call    7 never executed
    $$$$$: 4377-block  3
    $$$$$: 4377-block  4
    #####: 4378:  OutputXmlAttribute(stream, kTestsuites, "failures",
    %%%%%: 4378-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4378-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4378-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4378-block  3
call    9 never executed
    $$$$$: 4378-block  4
    $$$$$: 4378-block  5
call   10 never executed
    $$$$$: 4378-block  6
    #####: 4379:                     StreamableToString(unit_test.failed_test_count()));
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4379-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 4379-block  1
call    7 never executed
    $$$$$: 4379-block  2
    $$$$$: 4379-block  3
    #####: 4380:  OutputXmlAttribute(
    %%%%%: 4380-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4380-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4380-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4380-block  3
call    9 never executed
    $$$$$: 4380-block  4
    $$$$$: 4380-block  5
call   10 never executed
    $$$$$: 4380-block  6
        -: 4381:      stream, kTestsuites, "disabled",
    #####: 4382:      StreamableToString(unit_test.reportable_disabled_test_count()));
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4382-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 4382-block  1
call    7 never executed
    $$$$$: 4382-block  2
    $$$$$: 4382-block  3
    #####: 4383:  OutputXmlAttribute(stream, kTestsuites, "errors", "0");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4383-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4383-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4383-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4383-block  3
call   15 never executed
    $$$$$: 4383-block  4
    $$$$$: 4383-block  5
call   16 never executed
    $$$$$: 4383-block  6
    $$$$$: 4383-block  7
call   17 never executed
    $$$$$: 4383-block  8
    $$$$$: 4383-block  9
call   18 never executed
    $$$$$: 4383-block 10
    #####: 4384:  OutputXmlAttribute(stream, kTestsuites, "time",
    %%%%%: 4384-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4384-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4384-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4384-block  3
call    9 never executed
    $$$$$: 4384-block  4
    $$$$$: 4384-block  5
call   10 never executed
    $$$$$: 4384-block  6
    #####: 4385:                     FormatTimeInMillisAsSeconds(unit_test.elapsed_time()));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4385-block  0
call    5 never executed
    $$$$$: 4385-block  1
    #####: 4386:  OutputXmlAttribute(
    %%%%%: 4386-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4386-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4386-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4386-block  3
call    9 never executed
    $$$$$: 4386-block  4
    $$$$$: 4386-block  5
call   10 never executed
    $$$$$: 4386-block  6
        -: 4387:      stream, kTestsuites, "timestamp",
    #####: 4388:      FormatEpochTimeInMillisAsIso8601(unit_test.start_timestamp()));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4388-block  0
call    5 never executed
    $$$$$: 4388-block  1
        -: 4389:
    #####: 4390:  if (GTEST_FLAG_GET(shuffle)) {
branch  0 never executed
branch  1 never executed
    #####: 4391:    OutputXmlAttribute(stream, kTestsuites, "random_seed",
    %%%%%: 4391-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4391-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4391-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4391-block  3
call    9 never executed
    $$$$$: 4391-block  4
    $$$$$: 4391-block  5
call   10 never executed
    $$$$$: 4391-block  6
    #####: 4392:                       StreamableToString(unit_test.random_seed()));
    %%%%%: 4392-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4392-block  1
call    5 never executed
    $$$$$: 4392-block  2
    $$$$$: 4392-block  3
        -: 4393:  }
    #####: 4394:  *stream << TestPropertiesAsXmlAttributes(unit_test.ad_hoc_test_result());
    %%%%%: 4394-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4394-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4394-block  2
call    7 never executed
    $$$$$: 4394-block  3
call    8 never executed
    $$$$$: 4394-block  4
        -: 4395:
    #####: 4396:  OutputXmlAttribute(stream, kTestsuites, "name", "AllTests");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4396-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4396-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4396-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4396-block  3
call   15 never executed
    $$$$$: 4396-block  4
    $$$$$: 4396-block  5
call   16 never executed
    $$$$$: 4396-block  6
    $$$$$: 4396-block  7
call   17 never executed
    $$$$$: 4396-block  8
    $$$$$: 4396-block  9
call   18 never executed
    $$$$$: 4396-block 10
    #####: 4397:  *stream << ">\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4398:
    #####: 4399:  for (int i = 0; i < unit_test.total_test_suite_count(); ++i) {
    %%%%%: 4399-block  0
    %%%%%: 4399-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4399-block  2
    #####: 4400:    if (unit_test.GetTestSuite(i)->reportable_test_count() > 0)
    %%%%%: 4400-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4400-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4400-block  2
branch  6 never executed
branch  7 never executed
    #####: 4401:      PrintXmlTestSuite(stream, *unit_test.GetTestSuite(i));
    %%%%%: 4401-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4401-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 4402:  }
        -: 4403:
        -: 4404:  // If there was a test failure outside of one of the test suites (like in a
        -: 4405:  // test environment) include that in the output.
    #####: 4406:  if (unit_test.ad_hoc_test_result().Failed()) {
    %%%%%: 4406-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4406-block  1
branch  4 never executed
branch  5 never executed
    #####: 4407:    OutputXmlTestSuiteForTestResult(stream, unit_test.ad_hoc_test_result());
    %%%%%: 4407-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 4408:  }
        -: 4409:
    #####: 4410:  *stream << "</" << kTestsuites << ">\n";
    %%%%%: 4410-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4410-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4410-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 4411:}
        -: 4412:
function _ZN7testing8internal24XmlUnitTestResultPrinter17PrintXmlTestsListEPSoRKSt6vectorIPNS_9TestSuiteESaIS5_EE called 0 returned 0% blocks executed 0%
    #####: 4413:void XmlUnitTestResultPrinter::PrintXmlTestsList(
        -: 4414:    std::ostream* stream, const std::vector<TestSuite*>& test_suites) {
    #####: 4415:  const std::string kTestsuites = "testsuites";
    %%%%%: 4415-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4415-block  1
call    4 never executed
    $$$$$: 4415-block  2
    $$$$$: 4415-block  3
call    5 never executed
        -: 4416:
    #####: 4417:  *stream << "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4418:  *stream << "<" << kTestsuites;
    %%%%%: 4418-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4418-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 4419:
    #####: 4420:  int total_tests = 0;
    #####: 4421:  for (auto test_suite : test_suites) {
    %%%%%: 4421-block  0
call    0 never executed
call    1 never executed
    %%%%%: 4421-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4421-block  2
call    5 never executed
    #####: 4422:    total_tests += test_suite->total_test_count();
call    0 never executed
call    1 never executed
        -: 4423:  }
    #####: 4424:  OutputXmlAttribute(stream, kTestsuites, "tests",
    %%%%%: 4424-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4424-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4424-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4424-block  3
call    9 never executed
    $$$$$: 4424-block  4
    $$$$$: 4424-block  5
call   10 never executed
    $$$$$: 4424-block  6
    #####: 4425:                     StreamableToString(total_tests));
    %%%%%: 4425-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$: 4425-block  1
call    4 never executed
    $$$$$: 4425-block  2
    #####: 4426:  OutputXmlAttribute(stream, kTestsuites, "name", "AllTests");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4426-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4426-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4426-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4426-block  3
call   15 never executed
    $$$$$: 4426-block  4
    $$$$$: 4426-block  5
call   16 never executed
    $$$$$: 4426-block  6
    $$$$$: 4426-block  7
call   17 never executed
    $$$$$: 4426-block  8
    $$$$$: 4426-block  9
call   18 never executed
    $$$$$: 4426-block 10
    #####: 4427:  *stream << ">\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4428:
    #####: 4429:  for (auto test_suite : test_suites) {
    %%%%%: 4429-block  0
call    0 never executed
call    1 never executed
    %%%%%: 4429-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4429-block  2
call    5 never executed
    %%%%%: 4429-block  3
call    6 never executed
    #####: 4430:    PrintXmlTestSuite(stream, *test_suite);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4431:  }
    #####: 4432:  *stream << "</" << kTestsuites << ">\n";
    %%%%%: 4432-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4432-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4432-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 4433:}
        -: 4434:
        -: 4435:// Produces a string representing the test properties in a result as space
        -: 4436:// delimited XML attributes based on the property key="value" pairs.
function _ZN7testing8internal24XmlUnitTestResultPrinter29TestPropertiesAsXmlAttributesB5cxx11ERKNS_10TestResultE called 0 returned 0% blocks executed 0%
    #####: 4437:std::string XmlUnitTestResultPrinter::TestPropertiesAsXmlAttributes(
        -: 4438:    const TestResult& result) {
    #####: 4439:  Message attributes;
    %%%%%: 4439-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4439-block  1
call    3 never executed
    $$$$$: 4439-block  2
call    4 never executed
    #####: 4440:  for (int i = 0; i < result.test_property_count(); ++i) {
    %%%%%: 4440-block  0
    %%%%%: 4440-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4441:    const TestProperty& property = result.GetTestProperty(i);
    %%%%%: 4441-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4442:    attributes << " " << property.key() << "="
    %%%%%: 4442-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4442-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4442-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    $$$$$: 4442-block  3
    #####: 4443:        << "\"" << EscapeXmlAttribute(property.value()) << "\"";
    %%%%%: 4443-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4443-block  1
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4443-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4443-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 4443-block  4
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%: 4443-block  5
call   17 never executed
call   18 never executed
call   19 never executed
    $$$$$: 4443-block  6
call   20 never executed
    $$$$$: 4443-block  7
    $$$$$: 4443-block  8
call   21 never executed
    $$$$$: 4443-block  9
    $$$$$: 4443-block 10
call   22 never executed
    $$$$$: 4443-block 11
        -: 4444:  }
    #####: 4445:  return attributes.GetString();
    %%%%%: 4445-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4445-block  1
    %%%%%: 4445-block  2
        -: 4446:}
        -: 4447:
function _ZN7testing8internal24XmlUnitTestResultPrinter23OutputXmlTestPropertiesEPSoRKNS_10TestResultE called 0 returned 0% blocks executed 0%
    #####: 4448:void XmlUnitTestResultPrinter::OutputXmlTestProperties(
        -: 4449:    std::ostream* stream, const TestResult& result) {
    #####: 4450:  const std::string kProperties = "properties";
    %%%%%: 4450-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 4450-block  1
    $$$$$: 4450-block  2
call    4 never executed
    #####: 4451:  const std::string kProperty = "property";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 4451-block  0
    $$$$$: 4451-block  1
call    4 never executed
        -: 4452:
    #####: 4453:  if (result.test_property_count() <= 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4454:    return;
    %%%%%: 4454-block  0
        -: 4455:  }
        -: 4456:
    #####: 4457:  *stream << "      <" << kProperties << ">\n";
    %%%%%: 4457-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4457-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4457-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 4458:  for (int i = 0; i < result.test_property_count(); ++i) {
    %%%%%: 4458-block  0
    %%%%%: 4458-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4458-block  2
    #####: 4459:    const TestProperty& property = result.GetTestProperty(i);
    %%%%%: 4459-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4460:    *stream << "        <" << kProperty;
    %%%%%: 4460-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4460-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4461:    *stream << " name=\"" << EscapeXmlAttribute(property.key()) << "\"";
    %%%%%: 4461-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4461-block  1
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4461-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4461-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 4461-block  4
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%: 4461-block  5
call   17 never executed
call   18 never executed
call   19 never executed
    $$$$$: 4461-block  6
call   20 never executed
    $$$$$: 4461-block  7
    $$$$$: 4461-block  8
call   21 never executed
    $$$$$: 4461-block  9
    $$$$$: 4461-block 10
call   22 never executed
    $$$$$: 4461-block 11
    #####: 4462:    *stream << " value=\"" << EscapeXmlAttribute(property.value()) << "\"";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4462-block  0
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4462-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4462-block  2
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 4462-block  3
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%: 4462-block  4
call   17 never executed
call   18 never executed
call   19 never executed
    $$$$$: 4462-block  5
call   20 never executed
    $$$$$: 4462-block  6
    $$$$$: 4462-block  7
call   21 never executed
    $$$$$: 4462-block  8
    $$$$$: 4462-block  9
call   22 never executed
    $$$$$: 4462-block 10
    #####: 4463:    *stream << "/>\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4464:  }
    #####: 4465:  *stream << "      </" << kProperties << ">\n";
    %%%%%: 4465-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4465-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4465-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 4466:}
        -: 4467:
        -: 4468:// End XmlUnitTestResultPrinter
        -: 4469:
        -: 4470:// This class generates an JSON output file.
        -: 4471:class JsonUnitTestResultPrinter : public EmptyTestEventListener {
        -: 4472: public:
        -: 4473:  explicit JsonUnitTestResultPrinter(const char* output_file);
        -: 4474:
        -: 4475:  void OnTestIterationEnd(const UnitTest& unit_test, int iteration) override;
        -: 4476:
        -: 4477:  // Prints an JSON summary of all unit tests.
        -: 4478:  static void PrintJsonTestList(::std::ostream* stream,
        -: 4479:                                const std::vector<TestSuite*>& test_suites);
        -: 4480:
        -: 4481: private:
        -: 4482:  // Returns an JSON-escaped copy of the input string str.
        -: 4483:  static std::string EscapeJson(const std::string& str);
        -: 4484:
        -: 4485:  //// Verifies that the given attribute belongs to the given element and
        -: 4486:  //// streams the attribute as JSON.
        -: 4487:  static void OutputJsonKey(std::ostream* stream,
        -: 4488:                            const std::string& element_name,
        -: 4489:                            const std::string& name,
        -: 4490:                            const std::string& value,
        -: 4491:                            const std::string& indent,
        -: 4492:                            bool comma = true);
        -: 4493:  static void OutputJsonKey(std::ostream* stream,
        -: 4494:                            const std::string& element_name,
        -: 4495:                            const std::string& name,
        -: 4496:                            int value,
        -: 4497:                            const std::string& indent,
        -: 4498:                            bool comma = true);
        -: 4499:
        -: 4500:  // Streams a test suite JSON stanza containing the given test result.
        -: 4501:  //
        -: 4502:  // Requires: result.Failed()
        -: 4503:  static void OutputJsonTestSuiteForTestResult(::std::ostream* stream,
        -: 4504:                                               const TestResult& result);
        -: 4505:
        -: 4506:  // Streams a JSON representation of a TestResult object.
        -: 4507:  static void OutputJsonTestResult(::std::ostream* stream,
        -: 4508:                                   const TestResult& result);
        -: 4509:
        -: 4510:  // Streams a JSON representation of a TestInfo object.
        -: 4511:  static void OutputJsonTestInfo(::std::ostream* stream,
        -: 4512:                                 const char* test_suite_name,
        -: 4513:                                 const TestInfo& test_info);
        -: 4514:
        -: 4515:  // Prints a JSON representation of a TestSuite object
        -: 4516:  static void PrintJsonTestSuite(::std::ostream* stream,
        -: 4517:                                 const TestSuite& test_suite);
        -: 4518:
        -: 4519:  // Prints a JSON summary of unit_test to output stream out.
        -: 4520:  static void PrintJsonUnitTest(::std::ostream* stream,
        -: 4521:                                const UnitTest& unit_test);
        -: 4522:
        -: 4523:  // Produces a string representing the test properties in a result as
        -: 4524:  // a JSON dictionary.
        -: 4525:  static std::string TestPropertiesAsJson(const TestResult& result,
        -: 4526:                                          const std::string& indent);
        -: 4527:
        -: 4528:  // The output file.
        -: 4529:  const std::string output_file_;
        -: 4530:
        -: 4531:  GTEST_DISALLOW_COPY_AND_ASSIGN_(JsonUnitTestResultPrinter);
        -: 4532:};
        -: 4533:
        -: 4534:// Creates a new JsonUnitTestResultPrinter.
function _ZN7testing8internal25JsonUnitTestResultPrinterC2EPKc called 0 returned 0% blocks executed 0%
    #####: 4535:JsonUnitTestResultPrinter::JsonUnitTestResultPrinter(const char* output_file)
    #####: 4536:    : output_file_(output_file) {
    %%%%%: 4536-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4536-block  1
call    5 never executed
    $$$$$: 4536-block  2
call    6 never executed
    $$$$$: 4536-block  3
    $$$$$: 4536-block  4
call    7 never executed
    $$$$$: 4536-block  5
call    8 never executed
    #####: 4537:  if (output_file_.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4538:    GTEST_LOG_(FATAL) << "JSON output file may not be null";
    %%%%%: 4538-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4538-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4538-block  2
call    7 never executed
    $$$$$: 4538-block  3
call    8 never executed
    $$$$$: 4538-block  4
        -: 4539:  }
    #####: 4540:}
    %%%%%: 4540-block  0
        -: 4541:
function _ZN7testing8internal25JsonUnitTestResultPrinter18OnTestIterationEndERKNS_8UnitTestEi called 0 returned 0% blocks executed 0%
    #####: 4542:void JsonUnitTestResultPrinter::OnTestIterationEnd(const UnitTest& unit_test,
        -: 4543:                                                  int /*iteration*/) {
    #####: 4544:  FILE* jsonout = OpenFileForWriting(output_file_);
    %%%%%: 4544-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4545:  std::stringstream stream;
    %%%%%: 4545-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4545-block  1
call    4 never executed
    $$$$$: 4545-block  2
call    5 never executed
    #####: 4546:  PrintJsonUnitTest(&stream, unit_test);
    %%%%%: 4546-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4547:  fprintf(jsonout, "%s", StringStreamToString(&stream).c_str());
    %%%%%: 4547-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4547-block  1
call    3 never executed
call    4 never executed
call    5 never executed
    #####: 4548:  fclose(jsonout);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4549:}
        -: 4550:
        -: 4551:// Returns an JSON-escaped copy of the input string str.
function _ZN7testing8internal25JsonUnitTestResultPrinter10EscapeJsonERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 4552:std::string JsonUnitTestResultPrinter::EscapeJson(const std::string& str) {
    #####: 4553:  Message m;
    %%%%%: 4553-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4553-block  1
call    3 never executed
    $$$$$: 4553-block  2
call    4 never executed
        -: 4554:
    #####: 4555:  for (size_t i = 0; i < str.size(); ++i) {
    %%%%%: 4555-block  0
    %%%%%: 4555-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4555-block  2
    #####: 4556:    const char ch = str[i];
    %%%%%: 4556-block  0
call    0 never executed
    #####: 4557:    switch (ch) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 4558:      case '\\':
        -: 4559:      case '"':
        -: 4560:      case '/':
    #####: 4561:        m << '\\' << ch;
    %%%%%: 4561-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4561-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 4561-block  2
    #####: 4562:        break;
    %%%%%: 4562-block  0
    #####: 4563:      case '\b':
    #####: 4564:        m << "\\b";
    %%%%%: 4564-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4565:        break;
    %%%%%: 4565-block  0
    #####: 4566:      case '\t':
    #####: 4567:        m << "\\t";
    %%%%%: 4567-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4568:        break;
    %%%%%: 4568-block  0
    #####: 4569:      case '\n':
    #####: 4570:        m << "\\n";
    %%%%%: 4570-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4571:        break;
    %%%%%: 4571-block  0
    #####: 4572:      case '\f':
    #####: 4573:        m << "\\f";
    %%%%%: 4573-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4574:        break;
    %%%%%: 4574-block  0
    #####: 4575:      case '\r':
    #####: 4576:        m << "\\r";
    %%%%%: 4576-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4577:        break;
    %%%%%: 4577-block  0
    #####: 4578:      default:
    #####: 4579:        if (ch < ' ') {
    %%%%%: 4579-block  0
branch  0 never executed
branch  1 never executed
    #####: 4580:          m << "\\u00" << String::FormatByte(static_cast<unsigned char>(ch));
    %%%%%: 4580-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4580-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4580-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4580-block  3
call    9 never executed
    $$$$$: 4580-block  4
call   10 never executed
    $$$$$: 4580-block  5
        -: 4581:        } else {
    #####: 4582:          m << ch;
    %%%%%: 4582-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4583:        }
    #####: 4584:        break;
    %%%%%: 4584-block  0
        -: 4585:    }
        -: 4586:  }
        -: 4587:
    #####: 4588:  return m.GetString();
    %%%%%: 4588-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4588-block  1
    %%%%%: 4588-block  2
        -: 4589:}
        -: 4590:
        -: 4591:// The following routines generate an JSON representation of a UnitTest
        -: 4592:// object.
        -: 4593:
        -: 4594:// Formats the given time in milliseconds as seconds.
function _ZN7testing8internalL28FormatTimeInMillisAsDurationEx called 0 returned 0% blocks executed 0%
    #####: 4595:static std::string FormatTimeInMillisAsDuration(TimeInMillis ms) {
    #####: 4596:  ::std::stringstream ss;
    %%%%%: 4596-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4596-block  1
call    4 never executed
    $$$$$: 4596-block  2
call    5 never executed
    #####: 4597:  ss << (static_cast<double>(ms) * 1e-3) << "s";
    %%%%%: 4597-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4597-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4598:  return ss.str();
    %%%%%: 4598-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4598-block  1
    %%%%%: 4598-block  2
        -: 4599:}
        -: 4600:
        -: 4601:// Converts the given epoch time in milliseconds to a date string in the
        -: 4602:// RFC3339 format, without the timezone information.
function _ZN7testing8internalL32FormatEpochTimeInMillisAsRFC3339Ex called 0 returned 0% blocks executed 0%
    #####: 4603:static std::string FormatEpochTimeInMillisAsRFC3339(TimeInMillis ms) {
        -: 4604:  struct tm time_struct;
    #####: 4605:  if (!PortableLocaltime(static_cast<time_t>(ms / 1000), &time_struct))
    %%%%%: 4605-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4606:    return "";
    %%%%%: 4606-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4606-block  1
call    4 never executed
    $$$$$: 4606-block  2
call    5 never executed
    $$$$$: 4606-block  3
        -: 4607:  // YYYY-MM-DDThh:mm:ss
    #####: 4608:  return StreamableToString(time_struct.tm_year + 1900) + "-" +
    %%%%%: 4608-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4608-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4608-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
    $$$$$: 4608-block  3
call   11 never executed
    $$$$$: 4608-block  4
    $$$$$: 4608-block  5
call   12 never executed
    $$$$$: 4608-block  6
    $$$$$: 4608-block  7
call   13 never executed
    $$$$$: 4608-block  8
    $$$$$: 4608-block  9
    #####: 4609:      String::FormatIntWidth2(time_struct.tm_mon + 1) + "-" +
    %%%%%: 4609-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4609-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4609-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4609-block  3
call   12 never executed
    $$$$$: 4609-block  4
    $$$$$: 4609-block  5
call   13 never executed
    $$$$$: 4609-block  6
    $$$$$: 4609-block  7
call   14 never executed
    $$$$$: 4609-block  8
    #####: 4610:      String::FormatIntWidth2(time_struct.tm_mday) + "T" +
    %%%%%: 4610-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4610-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4610-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4610-block  3
call   12 never executed
    $$$$$: 4610-block  4
    $$$$$: 4610-block  5
call   13 never executed
    $$$$$: 4610-block  6
    $$$$$: 4610-block  7
call   14 never executed
    $$$$$: 4610-block  8
    #####: 4611:      String::FormatIntWidth2(time_struct.tm_hour) + ":" +
    %%%%%: 4611-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4611-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4611-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4611-block  3
call   12 never executed
    $$$$$: 4611-block  4
    $$$$$: 4611-block  5
call   13 never executed
    $$$$$: 4611-block  6
    $$$$$: 4611-block  7
call   14 never executed
    $$$$$: 4611-block  8
    #####: 4612:      String::FormatIntWidth2(time_struct.tm_min) + ":" +
    %%%%%: 4612-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4612-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4612-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4612-block  3
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    $$$$$: 4612-block  4
call   13 never executed
    $$$$$: 4612-block  5
    $$$$$: 4612-block  6
call   14 never executed
    $$$$$: 4612-block  7
    $$$$$: 4612-block  8
call   15 never executed
    $$$$$: 4612-block  9
    #####: 4613:      String::FormatIntWidth2(time_struct.tm_sec) + "Z";
    %%%%%: 4613-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4613-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4613-block  2
call    6 never executed
    $$$$$: 4613-block  3
call    7 never executed
    $$$$$: 4613-block  4
        -: 4614:}
        -: 4615:
function _ZN7testing8internalL6IndentEj called 0 returned 0% blocks executed 0%
    #####: 4616:static inline std::string Indent(size_t width) {
    #####: 4617:  return std::string(width, ' ');
    %%%%%: 4617-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4617-block  1
call    4 never executed
    %%%%%: 4617-block  2
    $$$$$: 4617-block  3
call    5 never executed
        -: 4618:}
        -: 4619:
function _ZN7testing8internal25JsonUnitTestResultPrinter13OutputJsonKeyEPSoRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_SA_SA_b called 0 returned 0% blocks executed 0%
    #####: 4620:void JsonUnitTestResultPrinter::OutputJsonKey(
        -: 4621:    std::ostream* stream,
        -: 4622:    const std::string& element_name,
        -: 4623:    const std::string& name,
        -: 4624:    const std::string& value,
        -: 4625:    const std::string& indent,
        -: 4626:    bool comma) {
        -: 4627:  const std::vector<std::string>& allowed_names =
    #####: 4628:      GetReservedOutputAttributesForElement(element_name);
    %%%%%: 4628-block  0
call    0 never executed
    %%%%%: 4628-block  1
call    1 never executed
    $$$$$: 4628-block  2
call    2 never executed
        -: 4629:
    #####: 4630:  GTEST_CHECK_(std::find(allowed_names.begin(), allowed_names.end(), name) !=
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4630-block  0
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4630-block  1
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4630-block  2
call   13 never executed
    %%%%%: 4630-block  3
call   14 never executed
    $$$$$: 4630-block  4
    $$$$$: 4630-block  5
call   15 never executed
    $$$$$: 4630-block  6
        -: 4631:                   allowed_names.end())
        -: 4632:      << "Key \"" << name << "\" is not allowed for value \"" << element_name
    #####: 4633:      << "\".";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4633-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4633-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4633-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4633-block  3
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4633-block  4
call   15 never executed
branch 16 never executed
branch 17 never executed
        -: 4634:
    #####: 4635:  *stream << indent << "\"" << name << "\": \"" << EscapeJson(value) << "\"";
    %%%%%: 4635-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4635-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4635-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4635-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4635-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4635-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%: 4635-block  6
call   18 never executed
branch 19 never executed
branch 20 never executed
    %%%%%: 4635-block  7
call   21 never executed
    $$$$$: 4635-block  8
call   22 never executed
    $$$$$: 4635-block  9
    #####: 4636:  if (comma)
branch  0 never executed
branch  1 never executed
    #####: 4637:    *stream << ",\n";
    %%%%%: 4637-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4638:}
        -: 4639:
function _ZN7testing8internal25JsonUnitTestResultPrinter13OutputJsonKeyEPSoRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_iSA_b called 0 returned 0% blocks executed 0%
    #####: 4640:void JsonUnitTestResultPrinter::OutputJsonKey(
        -: 4641:    std::ostream* stream,
        -: 4642:    const std::string& element_name,
        -: 4643:    const std::string& name,
        -: 4644:    int value,
        -: 4645:    const std::string& indent,
        -: 4646:    bool comma) {
        -: 4647:  const std::vector<std::string>& allowed_names =
    #####: 4648:      GetReservedOutputAttributesForElement(element_name);
    %%%%%: 4648-block  0
call    0 never executed
    %%%%%: 4648-block  1
call    1 never executed
    $$$$$: 4648-block  2
call    2 never executed
        -: 4649:
    #####: 4650:  GTEST_CHECK_(std::find(allowed_names.begin(), allowed_names.end(), name) !=
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4650-block  0
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4650-block  1
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4650-block  2
call   13 never executed
    %%%%%: 4650-block  3
call   14 never executed
    $$$$$: 4650-block  4
    $$$$$: 4650-block  5
call   15 never executed
    $$$$$: 4650-block  6
        -: 4651:                   allowed_names.end())
        -: 4652:      << "Key \"" << name << "\" is not allowed for value \"" << element_name
    #####: 4653:      << "\".";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4653-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4653-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4653-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4653-block  3
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4653-block  4
call   15 never executed
branch 16 never executed
branch 17 never executed
        -: 4654:
    #####: 4655:  *stream << indent << "\"" << name << "\": " << StreamableToString(value);
    %%%%%: 4655-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4655-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4655-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4655-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4655-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4655-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%: 4655-block  6
call   18 never executed
    $$$$$: 4655-block  7
call   19 never executed
    $$$$$: 4655-block  8
    #####: 4656:  if (comma)
branch  0 never executed
branch  1 never executed
    #####: 4657:    *stream << ",\n";
    %%%%%: 4657-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4658:}
        -: 4659:
        -: 4660:// Streams a test suite JSON stanza containing the given test result.
function _ZN7testing8internal25JsonUnitTestResultPrinter32OutputJsonTestSuiteForTestResultEPSoRKNS_10TestResultE called 0 returned 0% blocks executed 0%
    #####: 4661:void JsonUnitTestResultPrinter::OutputJsonTestSuiteForTestResult(
        -: 4662:    ::std::ostream* stream, const TestResult& result) {
        -: 4663:  // Output the boilerplate for a new test suite.
    #####: 4664:  *stream << Indent(4) << "{\n";
    %%%%%: 4664-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4664-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4664-block  2
call    7 never executed
    $$$$$: 4664-block  3
call    8 never executed
    $$$$$: 4664-block  4
call    9 never executed
    #####: 4665:  OutputJsonKey(stream, "testsuite", "name", "NonTestSuiteFailure", Indent(6));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4665-block  0
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4665-block  1
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4665-block  2
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%: 4665-block  3
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
    $$$$$: 4665-block  4
call   23 never executed
    $$$$$: 4665-block  5
    $$$$$: 4665-block  6
call   24 never executed
    $$$$$: 4665-block  7
    $$$$$: 4665-block  8
call   25 never executed
    $$$$$: 4665-block  9
    $$$$$: 4665-block 10
call   26 never executed
    $$$$$: 4665-block 11
    $$$$$: 4665-block 12
call   27 never executed
    $$$$$: 4665-block 13
    $$$$$: 4665-block 14
call   28 never executed
    $$$$$: 4665-block 15
    $$$$$: 4665-block 16
call   29 never executed
    $$$$$: 4665-block 17
call   30 never executed
    #####: 4666:  OutputJsonKey(stream, "testsuite", "tests", 1, Indent(6));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4666-block  0
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4666-block  1
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4666-block  2
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
    $$$$$: 4666-block  3
call   17 never executed
    $$$$$: 4666-block  4
    $$$$$: 4666-block  5
call   18 never executed
    $$$$$: 4666-block  6
    $$$$$: 4666-block  7
call   19 never executed
    $$$$$: 4666-block  8
    $$$$$: 4666-block  9
call   20 never executed
    $$$$$: 4666-block 10
    $$$$$: 4666-block 11
call   21 never executed
    $$$$$: 4666-block 12
call   22 never executed
    #####: 4667:  if (!GTEST_FLAG_GET(list_tests)) {
branch  0 never executed
branch  1 never executed
    #####: 4668:    OutputJsonKey(stream, "testsuite", "failures", 1, Indent(6));
    %%%%%: 4668-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4668-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4668-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4668-block  3
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
    $$$$$: 4668-block  4
call   17 never executed
    $$$$$: 4668-block  5
    $$$$$: 4668-block  6
call   18 never executed
    $$$$$: 4668-block  7
    $$$$$: 4668-block  8
call   19 never executed
    $$$$$: 4668-block  9
    $$$$$: 4668-block 10
call   20 never executed
    $$$$$: 4668-block 11
    $$$$$: 4668-block 12
call   21 never executed
    $$$$$: 4668-block 13
call   22 never executed
    #####: 4669:    OutputJsonKey(stream, "testsuite", "disabled", 0, Indent(6));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4669-block  0
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4669-block  1
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4669-block  2
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
    $$$$$: 4669-block  3
call   17 never executed
    $$$$$: 4669-block  4
    $$$$$: 4669-block  5
call   18 never executed
    $$$$$: 4669-block  6
    $$$$$: 4669-block  7
call   19 never executed
    $$$$$: 4669-block  8
    $$$$$: 4669-block  9
call   20 never executed
    $$$$$: 4669-block 10
    $$$$$: 4669-block 11
call   21 never executed
    $$$$$: 4669-block 12
call   22 never executed
    #####: 4670:    OutputJsonKey(stream, "testsuite", "skipped", 0, Indent(6));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4670-block  0
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4670-block  1
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4670-block  2
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
    $$$$$: 4670-block  3
call   17 never executed
    $$$$$: 4670-block  4
    $$$$$: 4670-block  5
call   18 never executed
    $$$$$: 4670-block  6
    $$$$$: 4670-block  7
call   19 never executed
    $$$$$: 4670-block  8
    $$$$$: 4670-block  9
call   20 never executed
    $$$$$: 4670-block 10
    $$$$$: 4670-block 11
call   21 never executed
    $$$$$: 4670-block 12
call   22 never executed
    #####: 4671:    OutputJsonKey(stream, "testsuite", "errors", 0, Indent(6));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4671-block  0
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4671-block  1
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4671-block  2
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
    $$$$$: 4671-block  3
call   17 never executed
    $$$$$: 4671-block  4
    $$$$$: 4671-block  5
call   18 never executed
    $$$$$: 4671-block  6
    $$$$$: 4671-block  7
call   19 never executed
    $$$$$: 4671-block  8
    $$$$$: 4671-block  9
call   20 never executed
    $$$$$: 4671-block 10
    $$$$$: 4671-block 11
call   21 never executed
    $$$$$: 4671-block 12
call   22 never executed
    #####: 4672:    OutputJsonKey(stream, "testsuite", "time",
    %%%%%: 4672-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4672-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4672-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4672-block  3
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4672-block  4
call   15 never executed
    $$$$$: 4672-block  5
    $$$$$: 4672-block  6
call   16 never executed
    $$$$$: 4672-block  7
    $$$$$: 4672-block  8
call   17 never executed
    $$$$$: 4672-block  9
    $$$$$: 4672-block 10
call   18 never executed
    $$$$$: 4672-block 11
    #####: 4673:                  FormatTimeInMillisAsDuration(result.elapsed_time()),
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4673-block  0
call    5 never executed
    $$$$$: 4673-block  1
    #####: 4674:                  Indent(6));
call    0 never executed
call    1 never executed
    $$$$$: 4674-block  0
call    2 never executed
    $$$$$: 4674-block  1
call    3 never executed
    #####: 4675:    OutputJsonKey(stream, "testsuite", "timestamp",
    %%%%%: 4675-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4675-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4675-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4675-block  3
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4675-block  4
call   15 never executed
    $$$$$: 4675-block  5
    $$$$$: 4675-block  6
call   16 never executed
    $$$$$: 4675-block  7
    $$$$$: 4675-block  8
call   17 never executed
    $$$$$: 4675-block  9
    $$$$$: 4675-block 10
call   18 never executed
    $$$$$: 4675-block 11
    #####: 4676:                  FormatEpochTimeInMillisAsRFC3339(result.start_timestamp()),
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4676-block  0
call    5 never executed
    $$$$$: 4676-block  1
    #####: 4677:                  Indent(6));
call    0 never executed
call    1 never executed
    $$$$$: 4677-block  0
call    2 never executed
    $$$$$: 4677-block  1
call    3 never executed
        -: 4678:  }
    #####: 4679:  *stream << Indent(6) << "\"testsuite\": [\n";
    %%%%%: 4679-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4679-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4679-block  2
call    7 never executed
    $$$$$: 4679-block  3
call    8 never executed
    $$$$$: 4679-block  4
call    9 never executed
        -: 4680:
        -: 4681:  // Output the boilerplate for a new test case.
    #####: 4682:  *stream << Indent(8) << "{\n";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4682-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4682-block  1
call    7 never executed
    $$$$$: 4682-block  2
call    8 never executed
    $$$$$: 4682-block  3
call    9 never executed
    #####: 4683:  OutputJsonKey(stream, "testcase", "name", "", Indent(10));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4683-block  0
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4683-block  1
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4683-block  2
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%: 4683-block  3
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
    $$$$$: 4683-block  4
call   23 never executed
    $$$$$: 4683-block  5
    $$$$$: 4683-block  6
call   24 never executed
    $$$$$: 4683-block  7
    $$$$$: 4683-block  8
call   25 never executed
    $$$$$: 4683-block  9
    $$$$$: 4683-block 10
call   26 never executed
    $$$$$: 4683-block 11
    $$$$$: 4683-block 12
call   27 never executed
    $$$$$: 4683-block 13
    $$$$$: 4683-block 14
call   28 never executed
    $$$$$: 4683-block 15
    $$$$$: 4683-block 16
call   29 never executed
    $$$$$: 4683-block 17
call   30 never executed
    #####: 4684:  OutputJsonKey(stream, "testcase", "status", "RUN", Indent(10));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4684-block  0
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4684-block  1
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4684-block  2
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%: 4684-block  3
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
    $$$$$: 4684-block  4
call   23 never executed
    $$$$$: 4684-block  5
    $$$$$: 4684-block  6
call   24 never executed
    $$$$$: 4684-block  7
    $$$$$: 4684-block  8
call   25 never executed
    $$$$$: 4684-block  9
    $$$$$: 4684-block 10
call   26 never executed
    $$$$$: 4684-block 11
    $$$$$: 4684-block 12
call   27 never executed
    $$$$$: 4684-block 13
    $$$$$: 4684-block 14
call   28 never executed
    $$$$$: 4684-block 15
    $$$$$: 4684-block 16
call   29 never executed
    $$$$$: 4684-block 17
call   30 never executed
    #####: 4685:  OutputJsonKey(stream, "testcase", "result", "COMPLETED", Indent(10));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4685-block  0
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4685-block  1
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4685-block  2
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%: 4685-block  3
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
    $$$$$: 4685-block  4
call   23 never executed
    $$$$$: 4685-block  5
    $$$$$: 4685-block  6
call   24 never executed
    $$$$$: 4685-block  7
    $$$$$: 4685-block  8
call   25 never executed
    $$$$$: 4685-block  9
    $$$$$: 4685-block 10
call   26 never executed
    $$$$$: 4685-block 11
    $$$$$: 4685-block 12
call   27 never executed
    $$$$$: 4685-block 13
    $$$$$: 4685-block 14
call   28 never executed
    $$$$$: 4685-block 15
    $$$$$: 4685-block 16
call   29 never executed
    $$$$$: 4685-block 17
call   30 never executed
    #####: 4686:  OutputJsonKey(stream, "testcase", "timestamp",
    %%%%%: 4686-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4686-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4686-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4686-block  3
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4686-block  4
call   15 never executed
    $$$$$: 4686-block  5
    $$$$$: 4686-block  6
call   16 never executed
    $$$$$: 4686-block  7
    $$$$$: 4686-block  8
call   17 never executed
    $$$$$: 4686-block  9
    $$$$$: 4686-block 10
call   18 never executed
    $$$$$: 4686-block 11
    #####: 4687:                FormatEpochTimeInMillisAsRFC3339(result.start_timestamp()),
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4687-block  0
call    5 never executed
    $$$$$: 4687-block  1
    #####: 4688:                Indent(10));
call    0 never executed
call    1 never executed
    $$$$$: 4688-block  0
call    2 never executed
    $$$$$: 4688-block  1
call    3 never executed
    #####: 4689:  OutputJsonKey(stream, "testcase", "time",
    %%%%%: 4689-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4689-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4689-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4689-block  3
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4689-block  4
call   15 never executed
    $$$$$: 4689-block  5
    $$$$$: 4689-block  6
call   16 never executed
    $$$$$: 4689-block  7
    $$$$$: 4689-block  8
call   17 never executed
    $$$$$: 4689-block  9
    $$$$$: 4689-block 10
call   18 never executed
    $$$$$: 4689-block 11
    #####: 4690:                FormatTimeInMillisAsDuration(result.elapsed_time()),
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4690-block  0
call    5 never executed
    $$$$$: 4690-block  1
    #####: 4691:                Indent(10));
call    0 never executed
call    1 never executed
    $$$$$: 4691-block  0
call    2 never executed
    $$$$$: 4691-block  1
call    3 never executed
    #####: 4692:  OutputJsonKey(stream, "testcase", "classname", "", Indent(10), false);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4692-block  0
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4692-block  1
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4692-block  2
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%: 4692-block  3
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
    $$$$$: 4692-block  4
call   23 never executed
    $$$$$: 4692-block  5
    $$$$$: 4692-block  6
call   24 never executed
    $$$$$: 4692-block  7
    $$$$$: 4692-block  8
call   25 never executed
    $$$$$: 4692-block  9
    $$$$$: 4692-block 10
call   26 never executed
    $$$$$: 4692-block 11
    $$$$$: 4692-block 12
call   27 never executed
    $$$$$: 4692-block 13
    $$$$$: 4692-block 14
call   28 never executed
    $$$$$: 4692-block 15
    $$$$$: 4692-block 16
call   29 never executed
    $$$$$: 4692-block 17
call   30 never executed
    #####: 4693:  *stream << TestPropertiesAsJson(result, Indent(10));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4693-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4693-block  1
call    7 never executed
call    8 never executed
    $$$$$: 4693-block  2
call    9 never executed
    $$$$$: 4693-block  3
    $$$$$: 4693-block  4
call   10 never executed
    $$$$$: 4693-block  5
call   11 never executed
        -: 4694:
        -: 4695:  // Output the actual test result.
    #####: 4696:  OutputJsonTestResult(stream, result);
call    0 never executed
        -: 4697:
        -: 4698:  // Finish the test suite.
    #####: 4699:  *stream << "\n" << Indent(6) << "]\n" << Indent(4) << "}";
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4699-block  0
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4699-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4699-block  2
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 4699-block  3
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%: 4699-block  4
call   17 never executed
call   18 never executed
    $$$$$: 4699-block  5
call   19 never executed
    $$$$$: 4699-block  6
    $$$$$: 4699-block  7
call   20 never executed
    #####: 4700:}
        -: 4701:
        -: 4702:// Prints a JSON representation of a TestInfo object.
function _ZN7testing8internal25JsonUnitTestResultPrinter18OutputJsonTestInfoEPSoPKcRKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 4703:void JsonUnitTestResultPrinter::OutputJsonTestInfo(::std::ostream* stream,
        -: 4704:                                                   const char* test_suite_name,
        -: 4705:                                                   const TestInfo& test_info) {
    #####: 4706:  const TestResult& result = *test_info.result();
    %%%%%: 4706-block  0
call    0 never executed
    #####: 4707:  const std::string kTestsuite = "testcase";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 4707-block  0
    $$$$$: 4707-block  1
call    4 never executed
    #####: 4708:  const std::string kIndent = Indent(10);
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 4708-block  0
call    3 never executed
        -: 4709:
    #####: 4710:  *stream << Indent(8) << "{\n";
    %%%%%: 4710-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4710-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4710-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4710-block  3
call    9 never executed
    $$$$$: 4710-block  4
call   10 never executed
    $$$$$: 4710-block  5
    #####: 4711:  OutputJsonKey(stream, kTestsuite, "name", test_info.name(), kIndent);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4711-block  0
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4711-block  1
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4711-block  2
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4711-block  3
call   16 never executed
    $$$$$: 4711-block  4
    $$$$$: 4711-block  5
call   17 never executed
    $$$$$: 4711-block  6
    $$$$$: 4711-block  7
call   18 never executed
    $$$$$: 4711-block  8
    $$$$$: 4711-block  9
call   19 never executed
    $$$$$: 4711-block 10
        -: 4712:
    #####: 4713:  if (test_info.value_param() != nullptr) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4714:    OutputJsonKey(stream, kTestsuite, "value_param", test_info.value_param(),
    %%%%%: 4714-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4714-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4714-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4714-block  3
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4714-block  4
call   16 never executed
    $$$$$: 4714-block  5
    $$$$$: 4714-block  6
call   17 never executed
    $$$$$: 4714-block  7
    $$$$$: 4714-block  8
call   18 never executed
    $$$$$: 4714-block  9
    $$$$$: 4714-block 10
call   19 never executed
    $$$$$: 4714-block 11
        -: 4715:                  kIndent);
        -: 4716:  }
    #####: 4717:  if (test_info.type_param() != nullptr) {
    %%%%%: 4717-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4718:    OutputJsonKey(stream, kTestsuite, "type_param", test_info.type_param(),
    %%%%%: 4718-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4718-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4718-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4718-block  3
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4718-block  4
call   16 never executed
    $$$$$: 4718-block  5
    $$$$$: 4718-block  6
call   17 never executed
    $$$$$: 4718-block  7
    $$$$$: 4718-block  8
call   18 never executed
    $$$$$: 4718-block  9
    $$$$$: 4718-block 10
call   19 never executed
    $$$$$: 4718-block 11
        -: 4719:                  kIndent);
        -: 4720:  }
    #####: 4721:  if (GTEST_FLAG_GET(list_tests)) {
    %%%%%: 4721-block  0
branch  0 never executed
branch  1 never executed
    #####: 4722:    OutputJsonKey(stream, kTestsuite, "file", test_info.file(), kIndent);
    %%%%%: 4722-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4722-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4722-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4722-block  3
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4722-block  4
call   16 never executed
    $$$$$: 4722-block  5
    $$$$$: 4722-block  6
call   17 never executed
    $$$$$: 4722-block  7
    $$$$$: 4722-block  8
call   18 never executed
    $$$$$: 4722-block  9
    $$$$$: 4722-block 10
call   19 never executed
    $$$$$: 4722-block 11
    #####: 4723:    OutputJsonKey(stream, kTestsuite, "line", test_info.line(), kIndent, false);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4723-block  0
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4723-block  1
call    8 never executed
call    9 never executed
    $$$$$: 4723-block  2
call   10 never executed
    $$$$$: 4723-block  3
    $$$$$: 4723-block  4
call   11 never executed
    $$$$$: 4723-block  5
    #####: 4724:    *stream << "\n" << Indent(8) << "}";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4724-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4724-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4724-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4724-block  3
call   12 never executed
    $$$$$: 4724-block  4
call   13 never executed
    $$$$$: 4724-block  5
    #####: 4725:    return;
        -: 4726:  }
        -: 4727:
    #####: 4728:  OutputJsonKey(stream, kTestsuite, "status",
    %%%%%: 4728-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4728-block  1
    %%%%%: 4728-block  2
    %%%%%: 4728-block  3
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4728-block  4
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4728-block  5
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4728-block  6
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
    $$$$$: 4728-block  7
call   17 never executed
    $$$$$: 4728-block  8
    $$$$$: 4728-block  9
call   18 never executed
    $$$$$: 4728-block 10
    $$$$$: 4728-block 11
call   19 never executed
    $$$$$: 4728-block 12
    $$$$$: 4728-block 13
call   20 never executed
    $$$$$: 4728-block 14
    #####: 4729:                test_info.should_run() ? "RUN" : "NOTRUN", kIndent);
call    0 never executed
    #####: 4730:  OutputJsonKey(stream, kTestsuite, "result",
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4730-block  0
    %%%%%: 4730-block  1
    %%%%%: 4730-block  2
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4730-block  3
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4730-block  4
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4730-block  5
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
    $$$$$: 4730-block  6
call   17 never executed
    $$$$$: 4730-block  7
    $$$$$: 4730-block  8
call   18 never executed
    $$$$$: 4730-block  9
    $$$$$: 4730-block 10
call   19 never executed
    $$$$$: 4730-block 11
    $$$$$: 4730-block 12
call   20 never executed
    $$$$$: 4730-block 13
    #####: 4731:                test_info.should_run()
call    0 never executed
    #####: 4732:                    ? (result.Skipped() ? "SKIPPED" : "COMPLETED")
    %%%%%: 4732-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4732-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 4732-block  2
    %%%%%: 4732-block  3
        -: 4733:                    : "SUPPRESSED",
        -: 4734:                kIndent);
    #####: 4735:  OutputJsonKey(stream, kTestsuite, "timestamp",
    %%%%%: 4735-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4735-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4735-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4735-block  3
call    9 never executed
    $$$$$: 4735-block  4
    $$$$$: 4735-block  5
call   10 never executed
    $$$$$: 4735-block  6
    #####: 4736:                FormatEpochTimeInMillisAsRFC3339(result.start_timestamp()),
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4736-block  0
call    5 never executed
    $$$$$: 4736-block  1
        -: 4737:                kIndent);
    #####: 4738:  OutputJsonKey(stream, kTestsuite, "time",
    %%%%%: 4738-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4738-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4738-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4738-block  3
call    9 never executed
    $$$$$: 4738-block  4
    $$$$$: 4738-block  5
call   10 never executed
    $$$$$: 4738-block  6
    #####: 4739:                FormatTimeInMillisAsDuration(result.elapsed_time()), kIndent);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4739-block  0
call    5 never executed
    $$$$$: 4739-block  1
    #####: 4740:  OutputJsonKey(stream, kTestsuite, "classname", test_suite_name, kIndent,
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4740-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4740-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4740-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4740-block  3
call   15 never executed
    $$$$$: 4740-block  4
    $$$$$: 4740-block  5
call   16 never executed
    $$$$$: 4740-block  6
    $$$$$: 4740-block  7
call   17 never executed
    $$$$$: 4740-block  8
    $$$$$: 4740-block  9
call   18 never executed
    $$$$$: 4740-block 10
        -: 4741:                false);
    #####: 4742:  *stream << TestPropertiesAsJson(result, kIndent);
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4742-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4742-block  1
call    6 never executed
    $$$$$: 4742-block  2
call    7 never executed
    $$$$$: 4742-block  3
        -: 4743:
    #####: 4744:  OutputJsonTestResult(stream, result);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4745:}
        -: 4746:
function _ZN7testing8internal25JsonUnitTestResultPrinter20OutputJsonTestResultEPSoRKNS_10TestResultE called 0 returned 0% blocks executed 0%
    #####: 4747:void JsonUnitTestResultPrinter::OutputJsonTestResult(::std::ostream* stream,
        -: 4748:                                                     const TestResult& result) {
    #####: 4749:  const std::string kIndent = Indent(10);
    %%%%%: 4749-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 4749-block  1
call    3 never executed
        -: 4750:
    #####: 4751:  int failures = 0;
    #####: 4752:  for (int i = 0; i < result.total_part_count(); ++i) {
    %%%%%: 4752-block  0
    %%%%%: 4752-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4752-block  2
    #####: 4753:    const TestPartResult& part = result.GetTestPartResult(i);
    %%%%%: 4753-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4754:    if (part.failed()) {
    %%%%%: 4754-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4755:      *stream << ",\n";
    %%%%%: 4755-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4756:      if (++failures == 1) {
    %%%%%: 4756-block  0
branch  0 never executed
branch  1 never executed
    #####: 4757:        *stream << kIndent << "\"" << "failures" << "\": [\n";
    %%%%%: 4757-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4757-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4757-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4757-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
        -: 4758:      }
        -: 4759:      const std::string location =
        -: 4760:          internal::FormatCompilerIndependentFileLocation(part.file_name(),
    #####: 4761:                                                          part.line_number());
    %%%%%: 4761-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    $$$$$: 4761-block  1
call    6 never executed
    #####: 4762:      const std::string message = EscapeJson(location + "\n" + part.message());
    %%%%%: 4762-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4762-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4762-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
    %%%%%: 4762-block  3
call   11 never executed
    $$$$$: 4762-block  4
    $$$$$: 4762-block  5
    $$$$$: 4762-block  6
call   12 never executed
        -: 4763:      *stream << kIndent << "  {\n"
        -: 4764:              << kIndent << "    \"failure\": \"" << message << "\",\n"
        -: 4765:              << kIndent << "    \"type\": \"\"\n"
    #####: 4766:              << kIndent << "  }";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4766-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4766-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4766-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4766-block  3
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4766-block  4
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%: 4766-block  5
call   18 never executed
branch 19 never executed
branch 20 never executed
    %%%%%: 4766-block  6
call   21 never executed
branch 22 never executed
branch 23 never executed
    %%%%%: 4766-block  7
call   24 never executed
branch 25 never executed
branch 26 never executed
    %%%%%: 4766-block  8
call   27 never executed
branch 28 never executed
branch 29 never executed
        -: 4767:    }
        -: 4768:  }
        -: 4769:
    #####: 4770:  if (failures > 0)
    %%%%%: 4770-block  0
branch  0 never executed
branch  1 never executed
    #####: 4771:    *stream << "\n" << kIndent << "]";
    %%%%%: 4771-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4771-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4771-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 4772:  *stream << "\n" << Indent(8) << "}";
    %%%%%: 4772-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4772-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4772-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4772-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4772-block  4
call   12 never executed
call   13 never executed
    $$$$$: 4772-block  5
call   14 never executed
    $$$$$: 4772-block  6
    #####: 4773:}
        -: 4774:
        -: 4775:// Prints an JSON representation of a TestSuite object
function _ZN7testing8internal25JsonUnitTestResultPrinter18PrintJsonTestSuiteEPSoRKNS_9TestSuiteE called 0 returned 0% blocks executed 0%
    #####: 4776:void JsonUnitTestResultPrinter::PrintJsonTestSuite(
        -: 4777:    std::ostream* stream, const TestSuite& test_suite) {
    #####: 4778:  const std::string kTestsuite = "testsuite";
    %%%%%: 4778-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4778-block  1
    $$$$$: 4778-block  2
call    5 never executed
    #####: 4779:  const std::string kIndent = Indent(6);
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 4779-block  0
call    3 never executed
        -: 4780:
    #####: 4781:  *stream << Indent(4) << "{\n";
    %%%%%: 4781-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4781-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4781-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4781-block  3
call    9 never executed
    $$$$$: 4781-block  4
call   10 never executed
    $$$$$: 4781-block  5
    #####: 4782:  OutputJsonKey(stream, kTestsuite, "name", test_suite.name(), kIndent);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4782-block  0
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4782-block  1
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4782-block  2
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4782-block  3
call   16 never executed
    $$$$$: 4782-block  4
    $$$$$: 4782-block  5
call   17 never executed
    $$$$$: 4782-block  6
    $$$$$: 4782-block  7
call   18 never executed
    $$$$$: 4782-block  8
    $$$$$: 4782-block  9
call   19 never executed
    $$$$$: 4782-block 10
    #####: 4783:  OutputJsonKey(stream, kTestsuite, "tests", test_suite.reportable_test_count(),
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4783-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4783-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4783-block  2
call   10 never executed
call   11 never executed
    $$$$$: 4783-block  3
call   12 never executed
    $$$$$: 4783-block  4
    $$$$$: 4783-block  5
call   13 never executed
    $$$$$: 4783-block  6
        -: 4784:                kIndent);
    #####: 4785:  if (!GTEST_FLAG_GET(list_tests)) {
branch  0 never executed
branch  1 never executed
    #####: 4786:    OutputJsonKey(stream, kTestsuite, "failures",
    %%%%%: 4786-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4786-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4786-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4786-block  3
call   10 never executed
call   11 never executed
    $$$$$: 4786-block  4
call   12 never executed
    $$$$$: 4786-block  5
    $$$$$: 4786-block  6
call   13 never executed
    $$$$$: 4786-block  7
        -: 4787:                  test_suite.failed_test_count(), kIndent);
    #####: 4788:    OutputJsonKey(stream, kTestsuite, "disabled",
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4788-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4788-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4788-block  2
call   10 never executed
call   11 never executed
    $$$$$: 4788-block  3
call   12 never executed
    $$$$$: 4788-block  4
    $$$$$: 4788-block  5
call   13 never executed
    $$$$$: 4788-block  6
        -: 4789:                  test_suite.reportable_disabled_test_count(), kIndent);
    #####: 4790:    OutputJsonKey(stream, kTestsuite, "errors", 0, kIndent);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4790-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4790-block  1
call    7 never executed
call    8 never executed
    $$$$$: 4790-block  2
call    9 never executed
    $$$$$: 4790-block  3
    $$$$$: 4790-block  4
call   10 never executed
    $$$$$: 4790-block  5
    #####: 4791:    OutputJsonKey(
    %%%%%: 4791-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4791-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4791-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4791-block  3
call    9 never executed
    $$$$$: 4791-block  4
    $$$$$: 4791-block  5
call   10 never executed
    $$$$$: 4791-block  6
        -: 4792:        stream, kTestsuite, "timestamp",
    #####: 4793:        FormatEpochTimeInMillisAsRFC3339(test_suite.start_timestamp()),
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4793-block  0
call    5 never executed
    $$$$$: 4793-block  1
        -: 4794:        kIndent);
    #####: 4795:    OutputJsonKey(stream, kTestsuite, "time",
    %%%%%: 4795-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4795-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4795-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4795-block  3
call    9 never executed
    $$$$$: 4795-block  4
    $$$$$: 4795-block  5
call   10 never executed
    $$$$$: 4795-block  6
    #####: 4796:                  FormatTimeInMillisAsDuration(test_suite.elapsed_time()),
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4796-block  0
call    5 never executed
    $$$$$: 4796-block  1
        -: 4797:                  kIndent, false);
    #####: 4798:    *stream << TestPropertiesAsJson(test_suite.ad_hoc_test_result(), kIndent)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4798-block  0
call    4 never executed
    $$$$$: 4798-block  1
call    5 never executed
    $$$$$: 4798-block  2
    #####: 4799:            << ",\n";
    %%%%%: 4799-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4799-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 4800:  }
        -: 4801:
    #####: 4802:  *stream << kIndent << "\"" << kTestsuite << "\": [\n";
    %%%%%: 4802-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4802-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4802-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4802-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
        -: 4803:
    #####: 4804:  bool comma = false;
    #####: 4805:  for (int i = 0; i < test_suite.total_test_count(); ++i) {
    %%%%%: 4805-block  0
    %%%%%: 4805-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4805-block  2
    #####: 4806:    if (test_suite.GetTestInfo(i)->is_reportable()) {
    %%%%%: 4806-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4806-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4807:      if (comma) {
    %%%%%: 4807-block  0
branch  0 never executed
branch  1 never executed
    #####: 4808:        *stream << ",\n";
    %%%%%: 4808-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4809:      } else {
    #####: 4810:        comma = true;
    %%%%%: 4810-block  0
        -: 4811:      }
    #####: 4812:      OutputJsonTestInfo(stream, test_suite.name(), *test_suite.GetTestInfo(i));
    %%%%%: 4812-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4812-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 4813:    }
        -: 4814:  }
    #####: 4815:  *stream << "\n" << kIndent << "]\n" << Indent(4) << "}";
    %%%%%: 4815-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4815-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4815-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4815-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4815-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4815-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%: 4815-block  6
call   18 never executed
call   19 never executed
    $$$$$: 4815-block  7
call   20 never executed
    $$$$$: 4815-block  8
    #####: 4816:}
        -: 4817:
        -: 4818:// Prints a JSON summary of unit_test to output stream out.
function _ZN7testing8internal25JsonUnitTestResultPrinter17PrintJsonUnitTestEPSoRKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 4819:void JsonUnitTestResultPrinter::PrintJsonUnitTest(std::ostream* stream,
        -: 4820:                                                  const UnitTest& unit_test) {
    #####: 4821:  const std::string kTestsuites = "testsuites";
    %%%%%: 4821-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4821-block  1
    $$$$$: 4821-block  2
call    5 never executed
    #####: 4822:  const std::string kIndent = Indent(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4822-block  0
call    3 never executed
    $$$$$: 4822-block  1
call    4 never executed
    #####: 4823:  *stream << "{\n";
    %%%%%: 4823-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4824:
    #####: 4825:  OutputJsonKey(stream, kTestsuites, "tests", unit_test.reportable_test_count(),
    %%%%%: 4825-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4825-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4825-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4825-block  3
call   10 never executed
call   11 never executed
    $$$$$: 4825-block  4
call   12 never executed
    $$$$$: 4825-block  5
    $$$$$: 4825-block  6
call   13 never executed
    $$$$$: 4825-block  7
        -: 4826:                kIndent);
    #####: 4827:  OutputJsonKey(stream, kTestsuites, "failures", unit_test.failed_test_count(),
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4827-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4827-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4827-block  2
call   10 never executed
call   11 never executed
    $$$$$: 4827-block  3
call   12 never executed
    $$$$$: 4827-block  4
    $$$$$: 4827-block  5
call   13 never executed
    $$$$$: 4827-block  6
        -: 4828:                kIndent);
    #####: 4829:  OutputJsonKey(stream, kTestsuites, "disabled",
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4829-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4829-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4829-block  2
call   10 never executed
call   11 never executed
    $$$$$: 4829-block  3
call   12 never executed
    $$$$$: 4829-block  4
    $$$$$: 4829-block  5
call   13 never executed
    $$$$$: 4829-block  6
        -: 4830:                unit_test.reportable_disabled_test_count(), kIndent);
    #####: 4831:  OutputJsonKey(stream, kTestsuites, "errors", 0, kIndent);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4831-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4831-block  1
call    7 never executed
call    8 never executed
    $$$$$: 4831-block  2
call    9 never executed
    $$$$$: 4831-block  3
    $$$$$: 4831-block  4
call   10 never executed
    $$$$$: 4831-block  5
    #####: 4832:  if (GTEST_FLAG_GET(shuffle)) {
branch  0 never executed
branch  1 never executed
    #####: 4833:    OutputJsonKey(stream, kTestsuites, "random_seed", unit_test.random_seed(),
    %%%%%: 4833-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4833-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4833-block  2
call    8 never executed
call    9 never executed
    $$$$$: 4833-block  3
call   10 never executed
    $$$$$: 4833-block  4
    $$$$$: 4833-block  5
call   11 never executed
    $$$$$: 4833-block  6
        -: 4834:                  kIndent);
        -: 4835:  }
    #####: 4836:  OutputJsonKey(stream, kTestsuites, "timestamp",
    %%%%%: 4836-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4836-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4836-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4836-block  3
call    9 never executed
    $$$$$: 4836-block  4
    $$$$$: 4836-block  5
call   10 never executed
    $$$$$: 4836-block  6
    #####: 4837:                FormatEpochTimeInMillisAsRFC3339(unit_test.start_timestamp()),
    %%%%%: 4837-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4837-block  1
call    5 never executed
    $$$$$: 4837-block  2
        -: 4838:                kIndent);
    #####: 4839:  OutputJsonKey(stream, kTestsuites, "time",
    %%%%%: 4839-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4839-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4839-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4839-block  3
call    9 never executed
    $$$$$: 4839-block  4
    $$$$$: 4839-block  5
call   10 never executed
    $$$$$: 4839-block  6
    #####: 4840:                FormatTimeInMillisAsDuration(unit_test.elapsed_time()), kIndent,
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4840-block  0
call    5 never executed
    $$$$$: 4840-block  1
        -: 4841:                false);
        -: 4842:
    #####: 4843:  *stream << TestPropertiesAsJson(unit_test.ad_hoc_test_result(), kIndent)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4843-block  0
call    4 never executed
    $$$$$: 4843-block  1
call    5 never executed
    $$$$$: 4843-block  2
    #####: 4844:          << ",\n";
    %%%%%: 4844-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4844-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 4845:
    #####: 4846:  OutputJsonKey(stream, kTestsuites, "name", "AllTests", kIndent);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4846-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4846-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4846-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4846-block  3
call   15 never executed
    $$$$$: 4846-block  4
    $$$$$: 4846-block  5
call   16 never executed
    $$$$$: 4846-block  6
    $$$$$: 4846-block  7
call   17 never executed
    $$$$$: 4846-block  8
    $$$$$: 4846-block  9
call   18 never executed
    $$$$$: 4846-block 10
    #####: 4847:  *stream << kIndent << "\"" << kTestsuites << "\": [\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4847-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4847-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4847-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
        -: 4848:
    #####: 4849:  bool comma = false;
    #####: 4850:  for (int i = 0; i < unit_test.total_test_suite_count(); ++i) {
    %%%%%: 4850-block  0
    %%%%%: 4850-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4850-block  2
    #####: 4851:    if (unit_test.GetTestSuite(i)->reportable_test_count() > 0) {
    %%%%%: 4851-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4851-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4851-block  2
branch  6 never executed
branch  7 never executed
    #####: 4852:      if (comma) {
    %%%%%: 4852-block  0
branch  0 never executed
branch  1 never executed
    #####: 4853:        *stream << ",\n";
    %%%%%: 4853-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4854:      } else {
    #####: 4855:        comma = true;
    %%%%%: 4855-block  0
        -: 4856:      }
    #####: 4857:      PrintJsonTestSuite(stream, *unit_test.GetTestSuite(i));
    %%%%%: 4857-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4857-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 4858:    }
        -: 4859:  }
        -: 4860:
        -: 4861:  // If there was a test failure outside of one of the test suites (like in a
        -: 4862:  // test environment) include that in the output.
    #####: 4863:  if (unit_test.ad_hoc_test_result().Failed()) {
    %%%%%: 4863-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4863-block  1
branch  4 never executed
branch  5 never executed
    #####: 4864:    OutputJsonTestSuiteForTestResult(stream, unit_test.ad_hoc_test_result());
    %%%%%: 4864-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 4865:  }
        -: 4866:
    #####: 4867:  *stream << "\n" << kIndent << "]\n" << "}\n";
    %%%%%: 4867-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4867-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4867-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4867-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 4868:}
        -: 4869:
function _ZN7testing8internal25JsonUnitTestResultPrinter17PrintJsonTestListEPSoRKSt6vectorIPNS_9TestSuiteESaIS5_EE called 0 returned 0% blocks executed 0%
    #####: 4870:void JsonUnitTestResultPrinter::PrintJsonTestList(
        -: 4871:    std::ostream* stream, const std::vector<TestSuite*>& test_suites) {
    #####: 4872:  const std::string kTestsuites = "testsuites";
    %%%%%: 4872-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4872-block  1
    $$$$$: 4872-block  2
call    5 never executed
    #####: 4873:  const std::string kIndent = Indent(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4873-block  0
call    3 never executed
    $$$$$: 4873-block  1
call    4 never executed
    #####: 4874:  *stream << "{\n";
    %%%%%: 4874-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4875:  int total_tests = 0;
    #####: 4876:  for (auto test_suite : test_suites) {
    %%%%%: 4876-block  0
call    0 never executed
call    1 never executed
    %%%%%: 4876-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4876-block  2
call    5 never executed
    #####: 4877:    total_tests += test_suite->total_test_count();
call    0 never executed
call    1 never executed
        -: 4878:  }
    #####: 4879:  OutputJsonKey(stream, kTestsuites, "tests", total_tests, kIndent);
    %%%%%: 4879-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4879-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4879-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4879-block  3
call    9 never executed
    $$$$$: 4879-block  4
    $$$$$: 4879-block  5
call   10 never executed
    $$$$$: 4879-block  6
        -: 4880:
    #####: 4881:  OutputJsonKey(stream, kTestsuites, "name", "AllTests", kIndent);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4881-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4881-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4881-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4881-block  3
call   15 never executed
    $$$$$: 4881-block  4
    $$$$$: 4881-block  5
call   16 never executed
    $$$$$: 4881-block  6
    $$$$$: 4881-block  7
call   17 never executed
    $$$$$: 4881-block  8
    $$$$$: 4881-block  9
call   18 never executed
    $$$$$: 4881-block 10
    #####: 4882:  *stream << kIndent << "\"" << kTestsuites << "\": [\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4882-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4882-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4882-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
        -: 4883:
    #####: 4884:  for (size_t i = 0; i < test_suites.size(); ++i) {
    %%%%%: 4884-block  0
    %%%%%: 4884-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4884-block  2
    #####: 4885:    if (i != 0) {
    %%%%%: 4885-block  0
branch  0 never executed
branch  1 never executed
    #####: 4886:      *stream << ",\n";
    %%%%%: 4886-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4887:    }
    #####: 4888:    PrintJsonTestSuite(stream, *test_suites[i]);
    %%%%%: 4888-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 4889:  }
        -: 4890:
        -: 4891:  *stream << "\n"
        -: 4892:          << kIndent << "]\n"
    #####: 4893:          << "}\n";
    %%%%%: 4893-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4893-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4893-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4893-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 4894:}
        -: 4895:// Produces a string representing the test properties in a result as
        -: 4896:// a JSON dictionary.
function _ZN7testing8internal25JsonUnitTestResultPrinter20TestPropertiesAsJsonERKNS_10TestResultERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 4897:std::string JsonUnitTestResultPrinter::TestPropertiesAsJson(
        -: 4898:    const TestResult& result, const std::string& indent) {
    #####: 4899:  Message attributes;
    %%%%%: 4899-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4899-block  1
call    3 never executed
    $$$$$: 4899-block  2
call    4 never executed
    #####: 4900:  for (int i = 0; i < result.test_property_count(); ++i) {
    %%%%%: 4900-block  0
    %%%%%: 4900-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4901:    const TestProperty& property = result.GetTestProperty(i);
    %%%%%: 4901-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4902:    attributes << ",\n" << indent << "\"" << property.key() << "\": "
    %%%%%: 4902-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4902-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4902-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4902-block  3
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4902-block  4
call   13 never executed
branch 14 never executed
branch 15 never executed
    $$$$$: 4902-block  5
    #####: 4903:               << "\"" << EscapeJson(property.value()) << "\"";
    %%%%%: 4903-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4903-block  1
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4903-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4903-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 4903-block  4
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%: 4903-block  5
call   17 never executed
call   18 never executed
call   19 never executed
    $$$$$: 4903-block  6
call   20 never executed
    $$$$$: 4903-block  7
    $$$$$: 4903-block  8
call   21 never executed
    $$$$$: 4903-block  9
    $$$$$: 4903-block 10
call   22 never executed
    $$$$$: 4903-block 11
        -: 4904:  }
    #####: 4905:  return attributes.GetString();
    %%%%%: 4905-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4905-block  1
    %%%%%: 4905-block  2
        -: 4906:}
        -: 4907:
        -: 4908:// End JsonUnitTestResultPrinter
        -: 4909:
        -: 4910:#if GTEST_CAN_STREAM_RESULTS_
        -: 4911:
        -: 4912:// Checks if str contains '=', '&', '%' or '\n' characters. If yes,
        -: 4913:// replaces them by "%xx" where xx is their hexadecimal value. For
        -: 4914:// example, replaces "=" with "%3D".  This algorithm is O(strlen(str))
        -: 4915:// in both time and space -- important as the input str may contain an
        -: 4916:// arbitrarily long test failure message and stack trace.
        -: 4917:std::string StreamingListener::UrlEncode(const char* str) {
        -: 4918:  std::string result;
        -: 4919:  result.reserve(strlen(str) + 1);
        -: 4920:  for (char ch = *str; ch != '\0'; ch = *++str) {
        -: 4921:    switch (ch) {
        -: 4922:      case '%':
        -: 4923:      case '=':
        -: 4924:      case '&':
        -: 4925:      case '\n':
        -: 4926:        result.append("%" + String::FormatByte(static_cast<unsigned char>(ch)));
        -: 4927:        break;
        -: 4928:      default:
        -: 4929:        result.push_back(ch);
        -: 4930:        break;
        -: 4931:    }
        -: 4932:  }
        -: 4933:  return result;
        -: 4934:}
        -: 4935:
        -: 4936:void StreamingListener::SocketWriter::MakeConnection() {
        -: 4937:  GTEST_CHECK_(sockfd_ == -1)
        -: 4938:      << "MakeConnection() can't be called when there is already a connection.";
        -: 4939:
        -: 4940:  addrinfo hints;
        -: 4941:  memset(&hints, 0, sizeof(hints));
        -: 4942:  hints.ai_family = AF_UNSPEC;    // To allow both IPv4 and IPv6 addresses.
        -: 4943:  hints.ai_socktype = SOCK_STREAM;
        -: 4944:  addrinfo* servinfo = nullptr;
        -: 4945:
        -: 4946:  // Use the getaddrinfo() to get a linked list of IP addresses for
        -: 4947:  // the given host name.
        -: 4948:  const int error_num = getaddrinfo(
        -: 4949:      host_name_.c_str(), port_num_.c_str(), &hints, &servinfo);
        -: 4950:  if (error_num != 0) {
        -: 4951:    GTEST_LOG_(WARNING) << "stream_result_to: getaddrinfo() failed: "
        -: 4952:                        << gai_strerror(error_num);
        -: 4953:  }
        -: 4954:
        -: 4955:  // Loop through all the results and connect to the first we can.
        -: 4956:  for (addrinfo* cur_addr = servinfo; sockfd_ == -1 && cur_addr != nullptr;
        -: 4957:       cur_addr = cur_addr->ai_next) {
        -: 4958:    sockfd_ = socket(
        -: 4959:        cur_addr->ai_family, cur_addr->ai_socktype, cur_addr->ai_protocol);
        -: 4960:    if (sockfd_ != -1) {
        -: 4961:      // Connect the client socket to the server socket.
        -: 4962:      if (connect(sockfd_, cur_addr->ai_addr, cur_addr->ai_addrlen) == -1) {
        -: 4963:        close(sockfd_);
        -: 4964:        sockfd_ = -1;
        -: 4965:      }
        -: 4966:    }
        -: 4967:  }
        -: 4968:
        -: 4969:  freeaddrinfo(servinfo);  // all done with this structure
        -: 4970:
        -: 4971:  if (sockfd_ == -1) {
        -: 4972:    GTEST_LOG_(WARNING) << "stream_result_to: failed to connect to "
        -: 4973:                        << host_name_ << ":" << port_num_;
        -: 4974:  }
        -: 4975:}
        -: 4976:
        -: 4977:// End of class Streaming Listener
        -: 4978:#endif  // GTEST_CAN_STREAM_RESULTS__
        -: 4979:
        -: 4980:// class OsStackTraceGetter
        -: 4981:
        -: 4982:const char* const OsStackTraceGetterInterface::kElidedFramesMarker =
        -: 4983:    "... " GTEST_NAME_ " internal frames ...";
        -: 4984:
function _ZN7testing8internal18OsStackTraceGetter17CurrentStackTraceB5cxx11Eii called 0 returned 0% blocks executed 0%
    #####: 4985:std::string OsStackTraceGetter::CurrentStackTrace(int max_depth, int skip_count)
        -: 4986:    GTEST_LOCK_EXCLUDED_(mutex_) {
        -: 4987:#if GTEST_HAS_ABSL
        -: 4988:  std::string result;
        -: 4989:
        -: 4990:  if (max_depth <= 0) {
        -: 4991:    return result;
        -: 4992:  }
        -: 4993:
        -: 4994:  max_depth = std::min(max_depth, kMaxStackTraceDepth);
        -: 4995:
        -: 4996:  std::vector<void*> raw_stack(max_depth);
        -: 4997:  // Skips the frames requested by the caller, plus this function.
        -: 4998:  const int raw_stack_size =
        -: 4999:      absl::GetStackTrace(&raw_stack[0], max_depth, skip_count + 1);
        -: 5000:
        -: 5001:  void* caller_frame = nullptr;
        -: 5002:  {
        -: 5003:    MutexLock lock(&mutex_);
        -: 5004:    caller_frame = caller_frame_;
        -: 5005:  }
        -: 5006:
        -: 5007:  for (int i = 0; i < raw_stack_size; ++i) {
        -: 5008:    if (raw_stack[i] == caller_frame &&
        -: 5009:        !GTEST_FLAG_GET(show_internal_stack_frames)) {
        -: 5010:      // Add a marker to the trace and stop adding frames.
        -: 5011:      absl::StrAppend(&result, kElidedFramesMarker, "\n");
        -: 5012:      break;
        -: 5013:    }
        -: 5014:
        -: 5015:    char tmp[1024];
        -: 5016:    const char* symbol = "(unknown)";
        -: 5017:    if (absl::Symbolize(raw_stack[i], tmp, sizeof(tmp))) {
        -: 5018:      symbol = tmp;
        -: 5019:    }
        -: 5020:
        -: 5021:    char line[1024];
        -: 5022:    snprintf(line, sizeof(line), "  %p: %s\n", raw_stack[i], symbol);
        -: 5023:    result += line;
        -: 5024:  }
        -: 5025:
        -: 5026:  return result;
        -: 5027:
        -: 5028:#else  // !GTEST_HAS_ABSL
        -: 5029:  static_cast<void>(max_depth);
        -: 5030:  static_cast<void>(skip_count);
    #####: 5031:  return "";
    %%%%%: 5031-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5031-block  1
call    4 never executed
    %%%%%: 5031-block  2
    $$$$$: 5031-block  3
call    5 never executed
        -: 5032:#endif  // GTEST_HAS_ABSL
        -: 5033:}
        -: 5034:
function _ZN7testing8internal18OsStackTraceGetter16UponLeavingGTestEv called 161 returned 100% blocks executed 100%
      161: 5035:void OsStackTraceGetter::UponLeavingGTest() GTEST_LOCK_EXCLUDED_(mutex_) {
        -: 5036:#if GTEST_HAS_ABSL
        -: 5037:  void* caller_frame = nullptr;
        -: 5038:  if (absl::GetStackTrace(&caller_frame, 1, 3) <= 0) {
        -: 5039:    caller_frame = nullptr;
        -: 5040:  }
        -: 5041:
        -: 5042:  MutexLock lock(&mutex_);
        -: 5043:  caller_frame_ = caller_frame;
        -: 5044:#endif  // GTEST_HAS_ABSL
      161: 5045:}
        -: 5046:
        -: 5047:// A helper class that creates the premature-exit file in its
        -: 5048:// constructor and deletes the file in its destructor.
        -: 5049:class ScopedPrematureExitFile {
        -: 5050: public:
function _ZN7testing8internal23ScopedPrematureExitFileC1EPKc called 1 returned 100% blocks executed 47%
        1: 5051:  explicit ScopedPrematureExitFile(const char* premature_exit_filepath)
        1: 5052:      : premature_exit_filepath_(premature_exit_filepath ?
       1*: 5053:                                 premature_exit_filepath : "") {
        1: 5053-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%: 5053-block  1
        1: 5053-block  2
        1: 5053-block  3
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 5053-block  4
call    6 returned 1
    $$$$$: 5053-block  5
call    7 never executed
    $$$$$: 5053-block  6
call    8 never executed
    $$$$$: 5053-block  7
call    9 never executed
        -: 5054:    // If a path to the premature-exit file is specified...
        1: 5055:    if (!premature_exit_filepath_.empty()) {
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
        -: 5056:      // create the file with a single "0" character in it.  I/O
        -: 5057:      // errors are ignored as there's nothing better we can do and we
        -: 5058:      // don't want to fail the test because of this.
    #####: 5059:      FILE* pfile = posix::FOpen(premature_exit_filepath_.c_str(), "w");
    %%%%%: 5059-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5060:      fwrite("0", 1, 1, pfile);
    %%%%%: 5060-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5061:      fclose(pfile);
    %%%%%: 5061-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5062:    }
        1: 5063:  }
        1: 5063-block  0
        -: 5064:
function _ZN7testing8internal23ScopedPrematureExitFileD1Ev called 1 returned 100% blocks executed 25%
        1: 5065:  ~ScopedPrematureExitFile() {
        1: 5065-block  0
call    0 returned 1
        -: 5066:#if !defined GTEST_OS_ESP8266
        1: 5067:    if (!premature_exit_filepath_.empty()) {
        1: 5067-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 5068:      int retval = remove(premature_exit_filepath_.c_str());
    %%%%%: 5068-block  0
call    0 never executed
call    1 never executed
    #####: 5069:      if (retval) {
branch  0 never executed
branch  1 never executed
    #####: 5070:        GTEST_LOG_(ERROR) << "Failed to remove premature exit filepath \""
    %%%%%: 5070-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 5071:                          << premature_exit_filepath_ << "\" with error "
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 5072:                          << retval;
call    0 never executed
        -: 5073:      }
        -: 5074:    }
        -: 5075:#endif
        1: 5076:  }
        -: 5077:
        -: 5078: private:
        -: 5079:  const std::string premature_exit_filepath_;
        -: 5080:
        -: 5081:  GTEST_DISALLOW_COPY_AND_ASSIGN_(ScopedPrematureExitFile);
        -: 5082:};
        -: 5083:
        -: 5084:}  // namespace internal
        -: 5085:
        -: 5086:// class TestEventListeners
        -: 5087:
function _ZN7testing18TestEventListenersC2Ev called 1 returned 100% blocks executed 100%
        1: 5088:TestEventListeners::TestEventListeners()
        1: 5089:    : repeater_(new internal::TestEventRepeater()),
        1: 5089-block  0
call    0 returned 1
call    1 returned 1
        -: 5090:      default_result_printer_(nullptr),
        1: 5091:      default_xml_generator_(nullptr) {}
        -: 5092:
function _ZN7testing18TestEventListenersD2Ev called 0 returned 0% blocks executed 0%
    #####: 5093:TestEventListeners::~TestEventListeners() { delete repeater_; }
    %%%%%: 5093-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 5093-block  1
call    2 never executed
        -: 5094:
        -: 5095:// Returns the standard listener responsible for the default console
        -: 5096:// output.  Can be removed from the listeners list to shut down default
        -: 5097:// console output.  Note that removing this object from the listener list
        -: 5098:// with Release transfers its ownership to the user.
function _ZN7testing18TestEventListeners6AppendEPNS_17TestEventListenerE called 1 returned 100% blocks executed 100%
        1: 5099:void TestEventListeners::Append(TestEventListener* listener) {
        1: 5100:  repeater_->Append(listener);
        1: 5100-block  0
call    0 returned 1
        1: 5101:}
        -: 5102:
        -: 5103:// Removes the given event listener from the list and returns it.  It then
        -: 5104:// becomes the caller's responsibility to delete the listener. Returns
        -: 5105:// NULL if the listener is not found in the list.
function _ZN7testing18TestEventListeners7ReleaseEPNS_17TestEventListenerE called 1 returned 100% blocks executed 71%
        1: 5106:TestEventListener* TestEventListeners::Release(TestEventListener* listener) {
        1: 5107:  if (listener == default_result_printer_)
        1: 5107-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 5108:    default_result_printer_ = nullptr;
        1: 5108-block  0
    #####: 5109:  else if (listener == default_xml_generator_)
    %%%%%: 5109-block  0
branch  0 never executed
branch  1 never executed
    #####: 5110:    default_xml_generator_ = nullptr;
    %%%%%: 5110-block  0
        1: 5111:  return repeater_->Release(listener);
        1: 5111-block  0
call    0 returned 1
        -: 5112:}
        -: 5113:
        -: 5114:// Returns repeater that broadcasts the TestEventListener events to all
        -: 5115:// subscribers.
function _ZN7testing18TestEventListeners8repeaterEv called 47 returned 100% blocks executed 100%
       47: 5116:TestEventListener* TestEventListeners::repeater() { return repeater_; }
       47: 5116-block  0
        -: 5117:
        -: 5118:// Sets the default_result_printer attribute to the provided listener.
        -: 5119:// The listener is also added to the listener list and previous
        -: 5120:// default_result_printer is removed from it and deleted. The listener can
        -: 5121:// also be NULL in which case it will not be added to the list. Does
        -: 5122:// nothing if the previous and the current listener objects are the same.
function _ZN7testing18TestEventListeners23SetDefaultResultPrinterEPNS_17TestEventListenerE called 1 returned 100% blocks executed 86%
        1: 5123:void TestEventListeners::SetDefaultResultPrinter(TestEventListener* listener) {
        1: 5124:  if (default_result_printer_ != listener) {
        1: 5124-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -: 5125:    // It is an error to pass this method a listener that is already in the
        -: 5126:    // list.
       1*: 5127:    delete Release(default_result_printer_);
        1: 5127-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%: 5127-block  1
call    3 never executed
        1: 5128:    default_result_printer_ = listener;
        1: 5129:    if (listener != nullptr) Append(listener);
        1: 5129-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 5129-block  1
call    2 returned 1
        -: 5130:  }
        1: 5131:}
        -: 5132:
        -: 5133:// Sets the default_xml_generator attribute to the provided listener.  The
        -: 5134:// listener is also added to the listener list and previous
        -: 5135:// default_xml_generator is removed from it and deleted. The listener can
        -: 5136:// also be NULL in which case it will not be added to the list. Does
        -: 5137:// nothing if the previous and the current listener objects are the same.
function _ZN7testing18TestEventListeners22SetDefaultXmlGeneratorEPNS_17TestEventListenerE called 0 returned 0% blocks executed 0%
    #####: 5138:void TestEventListeners::SetDefaultXmlGenerator(TestEventListener* listener) {
    #####: 5139:  if (default_xml_generator_ != listener) {
    %%%%%: 5139-block  0
branch  0 never executed
branch  1 never executed
        -: 5140:    // It is an error to pass this method a listener that is already in the
        -: 5141:    // list.
    #####: 5142:    delete Release(default_xml_generator_);
    %%%%%: 5142-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5142-block  1
call    3 never executed
    #####: 5143:    default_xml_generator_ = listener;
    #####: 5144:    if (listener != nullptr) Append(listener);
    %%%%%: 5144-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 5144-block  1
call    2 never executed
        -: 5145:  }
    #####: 5146:}
        -: 5147:
        -: 5148:// Controls whether events will be forwarded by the repeater to the
        -: 5149:// listeners in the list.
function _ZNK7testing18TestEventListeners22EventForwardingEnabledEv called 0 returned 0% blocks executed 0%
    #####: 5150:bool TestEventListeners::EventForwardingEnabled() const {
    #####: 5151:  return repeater_->forwarding_enabled();
    %%%%%: 5151-block  0
call    0 never executed
        -: 5152:}
        -: 5153:
function _ZN7testing18TestEventListeners23SuppressEventForwardingEv called 0 returned 0% blocks executed 0%
    #####: 5154:void TestEventListeners::SuppressEventForwarding() {
    #####: 5155:  repeater_->set_forwarding_enabled(false);
    %%%%%: 5155-block  0
call    0 never executed
    #####: 5156:}
        -: 5157:
        -: 5158:// class UnitTest
        -: 5159:
        -: 5160:// Gets the singleton UnitTest object.  The first time this method is
        -: 5161:// called, a UnitTest object is constructed and returned.  Consecutive
        -: 5162:// calls will return the same object.
        -: 5163://
        -: 5164:// We don't protect this under mutex_ as a user is not supposed to
        -: 5165:// call this before main() starts, from which point on the return
        -: 5166:// value will never change.
function _ZN7testing8UnitTest11GetInstanceEv called 420 returned 100% blocks executed 82%
      420: 5167:UnitTest* UnitTest::GetInstance() {
        -: 5168:  // CodeGear C++Builder insists on a public destructor for the
        -: 5169:  // default implementation.  Use this implementation to keep good OO
        -: 5170:  // design with private destructor.
        -: 5171:
        -: 5172:#if defined(__BORLANDC__)
        -: 5173:  static UnitTest* const instance = new UnitTest;
        -: 5174:  return instance;
        -: 5175:#else
      420: 5176:  static UnitTest instance;
      420: 5176-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 419
        1: 5176-block  1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0
        1: 5176-block  2
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1: 5176-block  3
call    8 returned 1
call    9 returned 1
    $$$$$: 5176-block  4
branch 10 never executed
branch 11 never executed
    $$$$$: 5176-block  5
call   12 never executed
      420: 5177:  return &instance;
      420: 5177-block  0
      420: 5177-block  1
        -: 5178:#endif  // defined(__BORLANDC__)
        -: 5179:}
        -: 5180:
        -: 5181:// Gets the number of successful test suites.
function _ZNK7testing8UnitTest27successful_test_suite_countEv called 0 returned 0% blocks executed 0%
    #####: 5182:int UnitTest::successful_test_suite_count() const {
    #####: 5183:  return impl()->successful_test_suite_count();
    %%%%%: 5183-block  0
call    0 never executed
call    1 never executed
        -: 5184:}
        -: 5185:
        -: 5186:// Gets the number of failed test suites.
function _ZNK7testing8UnitTest23failed_test_suite_countEv called 0 returned 0% blocks executed 0%
    #####: 5187:int UnitTest::failed_test_suite_count() const {
    #####: 5188:  return impl()->failed_test_suite_count();
    %%%%%: 5188-block  0
call    0 never executed
call    1 never executed
        -: 5189:}
        -: 5190:
        -: 5191:// Gets the number of all test suites.
function _ZNK7testing8UnitTest22total_test_suite_countEv called 0 returned 0% blocks executed 0%
    #####: 5192:int UnitTest::total_test_suite_count() const {
    #####: 5193:  return impl()->total_test_suite_count();
    %%%%%: 5193-block  0
call    0 never executed
call    1 never executed
        -: 5194:}
        -: 5195:
        -: 5196:// Gets the number of all test suites that contain at least one test
        -: 5197:// that should run.
function _ZNK7testing8UnitTest23test_suite_to_run_countEv called 2 returned 100% blocks executed 100%
        2: 5198:int UnitTest::test_suite_to_run_count() const {
        2: 5199:  return impl()->test_suite_to_run_count();
        2: 5199-block  0
call    0 returned 2
call    1 returned 2
        -: 5200:}
        -: 5201:
        -: 5202://  Legacy API is deprecated but still available
        -: 5203:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZNK7testing8UnitTest26successful_test_case_countEv called 0 returned 0% blocks executed 0%
    #####: 5204:int UnitTest::successful_test_case_count() const {
    #####: 5205:  return impl()->successful_test_suite_count();
    %%%%%: 5205-block  0
call    0 never executed
call    1 never executed
        -: 5206:}
function _ZNK7testing8UnitTest22failed_test_case_countEv called 0 returned 0% blocks executed 0%
    #####: 5207:int UnitTest::failed_test_case_count() const {
    #####: 5208:  return impl()->failed_test_suite_count();
    %%%%%: 5208-block  0
call    0 never executed
call    1 never executed
        -: 5209:}
function _ZNK7testing8UnitTest21total_test_case_countEv called 0 returned 0% blocks executed 0%
    #####: 5210:int UnitTest::total_test_case_count() const {
    #####: 5211:  return impl()->total_test_suite_count();
    %%%%%: 5211-block  0
call    0 never executed
call    1 never executed
        -: 5212:}
function _ZNK7testing8UnitTest22test_case_to_run_countEv called 0 returned 0% blocks executed 0%
    #####: 5213:int UnitTest::test_case_to_run_count() const {
    #####: 5214:  return impl()->test_suite_to_run_count();
    %%%%%: 5214-block  0
call    0 never executed
call    1 never executed
        -: 5215:}
        -: 5216:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 5217:
        -: 5218:// Gets the number of successful tests.
function _ZNK7testing8UnitTest21successful_test_countEv called 1 returned 100% blocks executed 100%
        1: 5219:int UnitTest::successful_test_count() const {
        1: 5220:  return impl()->successful_test_count();
        1: 5220-block  0
call    0 returned 1
call    1 returned 1
        -: 5221:}
        -: 5222:
        -: 5223:// Gets the number of skipped tests.
function _ZNK7testing8UnitTest18skipped_test_countEv called 1 returned 100% blocks executed 100%
        1: 5224:int UnitTest::skipped_test_count() const {
        1: 5225:  return impl()->skipped_test_count();
        1: 5225-block  0
call    0 returned 1
call    1 returned 1
        -: 5226:}
        -: 5227:
        -: 5228:// Gets the number of failed tests.
function _ZNK7testing8UnitTest17failed_test_countEv called 0 returned 0% blocks executed 0%
    #####: 5229:int UnitTest::failed_test_count() const { return impl()->failed_test_count(); }
    %%%%%: 5229-block  0
call    0 never executed
call    1 never executed
        -: 5230:
        -: 5231:// Gets the number of disabled tests that will be reported in the XML report.
function _ZNK7testing8UnitTest30reportable_disabled_test_countEv called 1 returned 100% blocks executed 100%
        1: 5232:int UnitTest::reportable_disabled_test_count() const {
        1: 5233:  return impl()->reportable_disabled_test_count();
        1: 5233-block  0
call    0 returned 1
call    1 returned 1
        -: 5234:}
        -: 5235:
        -: 5236:// Gets the number of disabled tests.
function _ZNK7testing8UnitTest19disabled_test_countEv called 0 returned 0% blocks executed 0%
    #####: 5237:int UnitTest::disabled_test_count() const {
    #####: 5238:  return impl()->disabled_test_count();
    %%%%%: 5238-block  0
call    0 never executed
call    1 never executed
        -: 5239:}
        -: 5240:
        -: 5241:// Gets the number of tests to be printed in the XML report.
function _ZNK7testing8UnitTest21reportable_test_countEv called 0 returned 0% blocks executed 0%
    #####: 5242:int UnitTest::reportable_test_count() const {
    #####: 5243:  return impl()->reportable_test_count();
    %%%%%: 5243-block  0
call    0 never executed
call    1 never executed
        -: 5244:}
        -: 5245:
        -: 5246:// Gets the number of all tests.
function _ZNK7testing8UnitTest16total_test_countEv called 0 returned 0% blocks executed 0%
    #####: 5247:int UnitTest::total_test_count() const { return impl()->total_test_count(); }
    %%%%%: 5247-block  0
call    0 never executed
call    1 never executed
        -: 5248:
        -: 5249:// Gets the number of tests that should run.
function _ZNK7testing8UnitTest17test_to_run_countEv called 2 returned 100% blocks executed 100%
        2: 5250:int UnitTest::test_to_run_count() const { return impl()->test_to_run_count(); }
        2: 5250-block  0
call    0 returned 2
call    1 returned 2
        -: 5251:
        -: 5252:// Gets the time of the test program start, in ms from the start of the
        -: 5253:// UNIX epoch.
function _ZNK7testing8UnitTest15start_timestampEv called 0 returned 0% blocks executed 0%
    #####: 5254:internal::TimeInMillis UnitTest::start_timestamp() const {
    #####: 5255:    return impl()->start_timestamp();
    %%%%%: 5255-block  0
call    0 never executed
call    1 never executed
        -: 5256:}
        -: 5257:
        -: 5258:// Gets the elapsed time, in milliseconds.
function _ZNK7testing8UnitTest12elapsed_timeEv called 1 returned 100% blocks executed 100%
        1: 5259:internal::TimeInMillis UnitTest::elapsed_time() const {
        1: 5260:  return impl()->elapsed_time();
        1: 5260-block  0
call    0 returned 1
call    1 returned 1
        -: 5261:}
        -: 5262:
        -: 5263:// Returns true if and only if the unit test passed (i.e. all test suites
        -: 5264:// passed).
function _ZNK7testing8UnitTest6PassedEv called 1 returned 100% blocks executed 100%
        1: 5265:bool UnitTest::Passed() const { return impl()->Passed(); }
        1: 5265-block  0
call    0 returned 1
call    1 returned 1
        -: 5266:
        -: 5267:// Returns true if and only if the unit test failed (i.e. some test suite
        -: 5268:// failed or something outside of all tests failed).
function _ZNK7testing8UnitTest6FailedEv called 0 returned 0% blocks executed 0%
    #####: 5269:bool UnitTest::Failed() const { return impl()->Failed(); }
    %%%%%: 5269-block  0
call    0 never executed
call    1 never executed
        -: 5270:
        -: 5271:// Gets the i-th test suite among all the test suites. i can range from 0 to
        -: 5272:// total_test_suite_count() - 1. If i is not in that range, returns NULL.
function _ZNK7testing8UnitTest12GetTestSuiteEi called 0 returned 0% blocks executed 0%
    #####: 5273:const TestSuite* UnitTest::GetTestSuite(int i) const {
    #####: 5274:  return impl()->GetTestSuite(i);
    %%%%%: 5274-block  0
call    0 never executed
call    1 never executed
        -: 5275:}
        -: 5276:
        -: 5277://  Legacy API is deprecated but still available
        -: 5278:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZNK7testing8UnitTest11GetTestCaseEi called 0 returned 0% blocks executed 0%
    #####: 5279:const TestCase* UnitTest::GetTestCase(int i) const {
    #####: 5280:  return impl()->GetTestCase(i);
    %%%%%: 5280-block  0
call    0 never executed
call    1 never executed
        -: 5281:}
        -: 5282:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 5283:
        -: 5284:// Returns the TestResult containing information on test failures and
        -: 5285:// properties logged outside of individual test suites.
function _ZNK7testing8UnitTest18ad_hoc_test_resultEv called 0 returned 0% blocks executed 0%
    #####: 5286:const TestResult& UnitTest::ad_hoc_test_result() const {
    #####: 5287:  return *impl()->ad_hoc_test_result();
    %%%%%: 5287-block  0
call    0 never executed
call    1 never executed
        -: 5288:}
        -: 5289:
        -: 5290:// Gets the i-th test suite among all the test suites. i can range from 0 to
        -: 5291:// total_test_suite_count() - 1. If i is not in that range, returns NULL.
function _ZN7testing8UnitTest19GetMutableTestSuiteEi called 0 returned 0% blocks executed 0%
    #####: 5292:TestSuite* UnitTest::GetMutableTestSuite(int i) {
    #####: 5293:  return impl()->GetMutableSuiteCase(i);
    %%%%%: 5293-block  0
call    0 never executed
call    1 never executed
        -: 5294:}
        -: 5295:
        -: 5296:// Returns the list of event listeners that can be used to track events
        -: 5297:// inside Google Test.
function _ZN7testing8UnitTest9listenersEv called 46 returned 100% blocks executed 100%
       46: 5298:TestEventListeners& UnitTest::listeners() {
       46: 5299:  return *impl()->listeners();
       46: 5299-block  0
call    0 returned 46
call    1 returned 46
        -: 5300:}
        -: 5301:
        -: 5302:// Registers and returns a global test environment.  When a test
        -: 5303:// program is run, all global test environments will be set-up in the
        -: 5304:// order they were registered.  After all tests in the program have
        -: 5305:// finished, all global test environments will be torn-down in the
        -: 5306:// *reverse* order they were registered.
        -: 5307://
        -: 5308:// The UnitTest object takes ownership of the given environment.
        -: 5309://
        -: 5310:// We don't protect this under mutex_, as we only support calling it
        -: 5311:// from the main thread.
function _ZN7testing8UnitTest14AddEnvironmentEPNS_11EnvironmentE called 0 returned 0% blocks executed 0%
    #####: 5312:Environment* UnitTest::AddEnvironment(Environment* env) {
    #####: 5313:  if (env == nullptr) {
    %%%%%: 5313-block  0
branch  0 never executed
branch  1 never executed
    #####: 5314:    return nullptr;
    %%%%%: 5314-block  0
        -: 5315:  }
        -: 5316:
    #####: 5317:  impl_->environments().push_back(env);
    %%%%%: 5317-block  0
call    0 never executed
call    1 never executed
    #####: 5318:  return env;
        -: 5319:}
        -: 5320:
        -: 5321:// Adds a TestPartResult to the current TestResult object.  All Google Test
        -: 5322:// assertion macros (e.g. ASSERT_TRUE, EXPECT_EQ, etc) eventually call
        -: 5323:// this to report their results.  The user code should use the
        -: 5324:// assertion macros instead of calling this directly.
function _ZN7testing8UnitTest17AddTestPartResultENS_14TestPartResult4TypeEPKciRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESC_ called 0 returned 0% blocks executed 0%
    #####: 5325:void UnitTest::AddTestPartResult(
        -: 5326:    TestPartResult::Type result_type,
        -: 5327:    const char* file_name,
        -: 5328:    int line_number,
        -: 5329:    const std::string& message,
        -: 5330:    const std::string& os_stack_trace) GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5331:  Message msg;
    %%%%%: 5331-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$: 5331-block  1
call    4 never executed
    #####: 5332:  msg << message;
    %%%%%: 5332-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5333:
    #####: 5334:  internal::MutexLock lock(&mutex_);
    %%%%%: 5334-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$: 5334-block  1
call    4 never executed
    #####: 5335:  if (impl_->gtest_trace_stack().size() > 0) {
    %%%%%: 5335-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5335-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 5336:    msg << "\n" << GTEST_NAME_ << " trace:";
    %%%%%: 5336-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5336-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5336-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 5337:
    #####: 5338:    for (size_t i = impl_->gtest_trace_stack().size(); i > 0; --i) {
    %%%%%: 5338-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5338-block  1
call    3 never executed
    %%%%%: 5338-block  2
branch  4 never executed
branch  5 never executed
    #####: 5339:      const internal::TraceInfo& trace = impl_->gtest_trace_stack()[i - 1];
    %%%%%: 5339-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5339-block  1
call    3 never executed
    #####: 5340:      msg << "\n" << internal::FormatFileLocation(trace.file, trace.line)
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5340-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5340-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 5340-block  2
call    9 never executed
    $$$$$: 5340-block  3
call   10 never executed
    $$$$$: 5340-block  4
    #####: 5341:          << " " << trace.message;
    %%%%%: 5341-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5341-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 5342:    }
        -: 5343:  }
        -: 5344:
    #####: 5345:  if (os_stack_trace.c_str() != nullptr && !os_stack_trace.empty()) {
    %%%%%: 5345-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5345-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5345-block  2
    %%%%%: 5345-block  3
    %%%%%: 5345-block  4
branch  6 never executed
branch  7 never executed
    #####: 5346:    msg << internal::kStackTraceMarker << os_stack_trace;
    %%%%%: 5346-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5346-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 5347:  }
        -: 5348:
        -: 5349:  const TestPartResult result = TestPartResult(
    #####: 5350:      result_type, file_name, line_number, msg.GetString().c_str());
    %%%%%: 5350-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5350-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 5350-block  2
call    7 never executed
    $$$$$: 5350-block  3
    $$$$$: 5350-block  4
call    8 never executed
    #####: 5351:  impl_->GetTestPartResultReporterForCurrentThread()->
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5352:      ReportTestPartResult(result);
    %%%%%: 5352-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5353:
    #####: 5354:  if (result_type != TestPartResult::kSuccess &&
    %%%%%: 5354-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 5354-block  1
branch  2 never executed
branch  3 never executed
        -: 5355:      result_type != TestPartResult::kSkip) {
        -: 5356:    // gtest_break_on_failure takes precedence over
        -: 5357:    // gtest_throw_on_failure.  This allows a user to set the latter
        -: 5358:    // in the code (perhaps in order to use Google Test assertions
        -: 5359:    // with another testing framework) and specify the former on the
        -: 5360:    // command line for debugging.
    #####: 5361:    if (GTEST_FLAG_GET(break_on_failure)) {
    %%%%%: 5361-block  0
branch  0 never executed
branch  1 never executed
        -: 5362:#if GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_PHONE && !GTEST_OS_WINDOWS_RT
        -: 5363:      // Using DebugBreak on Windows allows gtest to still break into a debugger
        -: 5364:      // when a failure happens and both the --gtest_break_on_failure and
        -: 5365:      // the --gtest_catch_exceptions flags are specified.
    #####: 5366:      DebugBreak();
    %%%%%: 5366-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5367:#elif (!defined(__native_client__)) &&            \
        -: 5368:    ((defined(__clang__) || defined(__GNUC__)) && \
        -: 5369:     (defined(__x86_64__) || defined(__i386__)))
        -: 5370:      // with clang/gcc we can achieve the same effect on x86 by invoking int3
        -: 5371:      asm("int3");
        -: 5372:#else
        -: 5373:      // Dereference nullptr through a volatile pointer to prevent the compiler
        -: 5374:      // from removing. We use this rather than abort() or __builtin_trap() for
        -: 5375:      // portability: some debuggers don't correctly trap abort().
        -: 5376:      *static_cast<volatile int*>(nullptr) = 1;
        -: 5377:#endif  // GTEST_OS_WINDOWS
    #####: 5378:    } else if (GTEST_FLAG_GET(throw_on_failure)) {
    %%%%%: 5378-block  0
branch  0 never executed
branch  1 never executed
        -: 5379:#if GTEST_HAS_EXCEPTIONS
    #####: 5380:      throw internal::GoogleTestFailureException(result);
    %%%%%: 5380-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5380-block  1
call    4 never executed
    $$$$$: 5380-block  2
call    5 never executed
        -: 5381:#else
        -: 5382:      // We cannot call abort() as it generates a pop-up in debug mode
        -: 5383:      // that cannot be suppressed in VC 7.1 or below.
        -: 5384:      exit(1);
        -: 5385:#endif
        -: 5386:    }
        -: 5387:  }
    #####: 5388:}
        -: 5389:
        -: 5390:// Adds a TestProperty to the current TestResult object when invoked from
        -: 5391:// inside a test, to current TestSuite's ad_hoc_test_result_ when invoked
        -: 5392:// from SetUpTestSuite or TearDownTestSuite, or to the global property set
        -: 5393:// when invoked elsewhere.  If the result already contains a property with
        -: 5394:// the same key, the value will be updated.
function _ZN7testing8UnitTest14RecordPropertyERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_ called 0 returned 0% blocks executed 0%
    #####: 5395:void UnitTest::RecordProperty(const std::string& key,
        -: 5396:                              const std::string& value) {
    #####: 5397:  impl_->RecordProperty(TestProperty(key, value));
    %%%%%: 5397-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5397-block  1
call    4 never executed
    $$$$$: 5397-block  2
call    5 never executed
    #####: 5398:}
        -: 5399:
        -: 5400:// Runs all tests in this UnitTest object and prints the result.
        -: 5401:// Returns 0 if successful, or 1 otherwise.
        -: 5402://
        -: 5403:// We don't protect this under mutex_, as we only support calling it
        -: 5404:// from the main thread.
function _ZN7testing8UnitTest3RunEv called 1 returned 100% blocks executed 79%
        1: 5405:int UnitTest::Run() {
        -: 5406:  const bool in_death_test_child_process =
        1: 5407:      GTEST_FLAG_GET(internal_run_death_test).length() > 0;
        1: 5407-block  0
call    0 returned 1
        -: 5408:
        -: 5409:  // Google Test implements this protocol for catching that a test
        -: 5410:  // program exits before returning control to Google Test:
        -: 5411:  //
        -: 5412:  //   1. Upon start, Google Test creates a file whose absolute path
        -: 5413:  //      is specified by the environment variable
        -: 5414:  //      TEST_PREMATURE_EXIT_FILE.
        -: 5415:  //   2. When Google Test has finished its work, it deletes the file.
        -: 5416:  //
        -: 5417:  // This allows a test runner to set TEST_PREMATURE_EXIT_FILE before
        -: 5418:  // running a Google-Test-based test program and check the existence
        -: 5419:  // of the file at the end of the test execution to see if it has
        -: 5420:  // exited prematurely.
        -: 5421:
        -: 5422:  // If we are in the child process of a death test, don't
        -: 5423:  // create/delete the premature exit file, as doing so is unnecessary
        -: 5424:  // and will confuse the parent process.  Otherwise, create/delete
        -: 5425:  // the file upon entering/leaving this function.  If the program
        -: 5426:  // somehow exits before this function has a chance to return, the
        -: 5427:  // premature-exit file will be left undeleted, causing a test runner
        -: 5428:  // that understands the premature-exit-file protocol to report the
        -: 5429:  // test as having failed.
        -: 5430:  const internal::ScopedPrematureExitFile premature_exit_file(
        -: 5431:      in_death_test_child_process
        -: 5432:          ? nullptr
       1*: 5433:          : internal::posix::GetEnv("TEST_PREMATURE_EXIT_FILE"));
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 5433-block  0
        1: 5433-block  1
call    2 returned 1
        1: 5433-block  2
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
    $$$$$: 5433-block  3
call    6 never executed
        -: 5434:
        -: 5435:  // Captures the value of GTEST_FLAG(catch_exceptions).  This value will be
        -: 5436:  // used for the duration of the program.
        1: 5437:  impl()->set_catch_exceptions(GTEST_FLAG_GET(catch_exceptions));
        1: 5437-block  0
call    0 returned 1
call    1 returned 1
        -: 5438:
        -: 5439:#if GTEST_OS_WINDOWS
        -: 5440:  // Either the user wants Google Test to catch exceptions thrown by the
        -: 5441:  // tests or this is executing in the context of death test child
        -: 5442:  // process. In either case the user does not want to see pop-up dialogs
        -: 5443:  // about crashes - they are expected.
       1*: 5444:  if (impl()->catch_exceptions() || in_death_test_child_process) {
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%: 5444-block  0
branch  4 never executed
branch  5 never executed
        1: 5444-block  1
    %%%%%: 5444-block  2
        1: 5444-block  3
branch  6 taken 1 (fallthrough)
branch  7 taken 0
        -: 5445:# if !GTEST_OS_WINDOWS_MOBILE && !GTEST_OS_WINDOWS_PHONE && !GTEST_OS_WINDOWS_RT
        -: 5446:    // SetErrorMode doesn't exist on CE.
        1: 5447:    SetErrorMode(SEM_FAILCRITICALERRORS | SEM_NOALIGNMENTFAULTEXCEPT |
        1: 5447-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 5448:                 SEM_NOGPFAULTERRORBOX | SEM_NOOPENFILEERRORBOX);
        -: 5449:# endif  // !GTEST_OS_WINDOWS_MOBILE
        -: 5450:
        -: 5451:# if (defined(_MSC_VER) || GTEST_OS_WINDOWS_MINGW) && !GTEST_OS_WINDOWS_MOBILE
        -: 5452:    // Death test children can be terminated with _abort().  On Windows,
        -: 5453:    // _abort() can show a dialog with a warning message.  This forces the
        -: 5454:    // abort message to go to stderr instead.
        1: 5455:    _set_error_mode(_OUT_TO_STDERR);
        1: 5455-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 5456:# endif
        -: 5457:
        -: 5458:# if defined(_MSC_VER) && !GTEST_OS_WINDOWS_MOBILE
        -: 5459:    // In the debug version, Visual Studio pops up a separate dialog
        -: 5460:    // offering a choice to debug the aborted program. We need to suppress
        -: 5461:    // this dialog or it will pop up for every EXPECT/ASSERT_DEATH statement
        -: 5462:    // executed. Google Test will notify the user of any unexpected
        -: 5463:    // failure via stderr.
        -: 5464:    if (!GTEST_FLAG_GET(break_on_failure))
        -: 5465:      _set_abort_behavior(
        -: 5466:          0x0,                                    // Clear the following flags:
        -: 5467:          _WRITE_ABORT_MSG | _CALL_REPORTFAULT);  // pop-up window, core dump.
        -: 5468:
        -: 5469:    // In debug mode, the Windows CRT can crash with an assertion over invalid
        -: 5470:    // input (e.g. passing an invalid file descriptor).  The default handling
        -: 5471:    // for these assertions is to pop up a dialog and wait for user input.
        -: 5472:    // Instead ask the CRT to dump such assertions to stderr non-interactively.
        -: 5473:    if (!IsDebuggerPresent()) {
        -: 5474:      (void)_CrtSetReportMode(_CRT_ASSERT,
        -: 5475:                              _CRTDBG_MODE_FILE | _CRTDBG_MODE_DEBUG);
        -: 5476:      (void)_CrtSetReportFile(_CRT_ASSERT, _CRTDBG_FILE_STDERR);
        -: 5477:    }
        -: 5478:# endif
        -: 5479:  }
        -: 5480:#endif  // GTEST_OS_WINDOWS
        -: 5481:
        1: 5482:  return internal::HandleExceptionsInMethodIfSupported(
        1: 5482-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        -: 5483:      impl(),
        -: 5484:      &internal::UnitTestImpl::RunAllTests,
       2*: 5485:      "auxiliary test code (environments or event listeners)") ? 0 : 1;
        1: 5485-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 5485-block  1
    %%%%%: 5485-block  2
        1: 5485-block  3
call    2 returned 1
        1: 5485-block  4
        -: 5486:}
        -: 5487:
        -: 5488:// Returns the working directory when the first TEST() or TEST_F() was
        -: 5489:// executed.
function _ZNK7testing8UnitTest20original_working_dirEv called 0 returned 0% blocks executed 0%
    #####: 5490:const char* UnitTest::original_working_dir() const {
    #####: 5491:  return impl_->original_working_dir_.c_str();
    %%%%%: 5491-block  0
call    0 never executed
        -: 5492:}
        -: 5493:
        -: 5494:// Returns the TestSuite object for the test that's currently running,
        -: 5495:// or NULL if no test is running.
function _ZNK7testing8UnitTest18current_test_suiteEv called 0 returned 0% blocks executed 0%
    #####: 5496:const TestSuite* UnitTest::current_test_suite() const
        -: 5497:    GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5498:  internal::MutexLock lock(&mutex_);
    %%%%%: 5498-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 5499:  return impl_->current_test_suite();
    %%%%%: 5499-block  0
call    0 never executed
    %%%%%: 5499-block  1
        -: 5500:}
        -: 5501:
        -: 5502:// Legacy API is still available but deprecated
        -: 5503:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZNK7testing8UnitTest17current_test_caseEv called 0 returned 0% blocks executed 0%
    #####: 5504:const TestCase* UnitTest::current_test_case() const
        -: 5505:    GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5506:  internal::MutexLock lock(&mutex_);
    %%%%%: 5506-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 5507:  return impl_->current_test_suite();
    %%%%%: 5507-block  0
call    0 never executed
    %%%%%: 5507-block  1
        -: 5508:}
        -: 5509:#endif
        -: 5510:
        -: 5511:// Returns the TestInfo object for the test that's currently running,
        -: 5512:// or NULL if no test is running.
function _ZNK7testing8UnitTest17current_test_infoEv called 0 returned 0% blocks executed 0%
    #####: 5513:const TestInfo* UnitTest::current_test_info() const
        -: 5514:    GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5515:  internal::MutexLock lock(&mutex_);
    %%%%%: 5515-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 5516:  return impl_->current_test_info();
    %%%%%: 5516-block  0
call    0 never executed
    %%%%%: 5516-block  1
        -: 5517:}
        -: 5518:
        -: 5519:// Returns the random seed used at the start of the current test run.
function _ZNK7testing8UnitTest11random_seedEv called 0 returned 0% blocks executed 0%
    #####: 5520:int UnitTest::random_seed() const { return impl_->random_seed(); }
    %%%%%: 5520-block  0
call    0 never executed
        -: 5521:
        -: 5522:// Returns ParameterizedTestSuiteRegistry object used to keep track of
        -: 5523:// value-parameterized tests and instantiate and register them.
        -: 5524:internal::ParameterizedTestSuiteRegistry&
function _ZN7testing8UnitTest27parameterized_test_registryEv called 0 returned 0% blocks executed 0%
    #####: 5525:UnitTest::parameterized_test_registry() GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5526:  return impl_->parameterized_test_registry();
    %%%%%: 5526-block  0
call    0 never executed
        -: 5527:}
        -: 5528:
        -: 5529:// Creates an empty UnitTest.
function _ZN7testing8UnitTestC2Ev called 1 returned 100% blocks executed 63%
        1: 5530:UnitTest::UnitTest() {
        1: 5530-block  0
call    0 returned 1
    $$$$$: 5530-block  1
call    1 never executed
        1: 5531:  impl_ = new internal::UnitTestImpl(this);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5531-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
    $$$$$: 5531-block  1
call    6 never executed
        1: 5532:}
        1: 5532-block  0
        -: 5533:
        -: 5534:// Destructor of UnitTest.
    #####: 5535:UnitTest::~UnitTest() {
    #####: 5536:  delete impl_;
    #####: 5537:}
------------------
_ZN7testing8UnitTestD0Ev:
function _ZN7testing8UnitTestD0Ev called 0 returned 0% blocks executed 0%
    #####: 5535:UnitTest::~UnitTest() {
        -: 5536:  delete impl_;
    #####: 5537:}
    %%%%%: 5537-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7testing8UnitTestD2Ev:
function _ZN7testing8UnitTestD2Ev called 0 returned 0% blocks executed 0%
    #####: 5535:UnitTest::~UnitTest() {
    %%%%%: 5535-block  0
call    0 never executed
    #####: 5536:  delete impl_;
    %%%%%: 5536-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 5536-block  1
call    2 never executed
    #####: 5537:}
------------------
        -: 5538:
        -: 5539:// Pushes a trace defined by SCOPED_TRACE() on to the per-thread
        -: 5540:// Google Test trace stack.
function _ZN7testing8UnitTest14PushGTestTraceERKNS_8internal9TraceInfoE called 0 returned 0% blocks executed 0%
    #####: 5541:void UnitTest::PushGTestTrace(const internal::TraceInfo& trace)
        -: 5542:    GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5543:  internal::MutexLock lock(&mutex_);
    %%%%%: 5543-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5543-block  1
call    3 never executed
    $$$$$: 5543-block  2
call    4 never executed
    #####: 5544:  impl_->gtest_trace_stack().push_back(trace);
    %%%%%: 5544-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5544-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 5545:}
        -: 5546:
        -: 5547:// Pops a trace from the per-thread Google Test trace stack.
function _ZN7testing8UnitTest13PopGTestTraceEv called 0 returned 0% blocks executed 0%
    #####: 5548:void UnitTest::PopGTestTrace()
        -: 5549:    GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5550:  internal::MutexLock lock(&mutex_);
    %%%%%: 5550-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$: 5550-block  1
call    4 never executed
    #####: 5551:  impl_->gtest_trace_stack().pop_back();
    %%%%%: 5551-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5551-block  1
call    3 never executed
    #####: 5552:}
        -: 5553:
        -: 5554:namespace internal {
        -: 5555:
function _ZN7testing8internal12UnitTestImplC2EPNS_8UnitTestE called 1 returned 100% blocks executed 44%
        1: 5556:UnitTestImpl::UnitTestImpl(UnitTest* parent)
        -: 5557:    : parent_(parent),
        -: 5558:      GTEST_DISABLE_MSC_WARNINGS_PUSH_(4355 /* using this in initializer */)
        -: 5559:          default_global_test_part_result_reporter_(this),
        -: 5560:      default_per_thread_test_part_result_reporter_(this),
        -: 5561:      GTEST_DISABLE_MSC_WARNINGS_POP_() global_test_part_result_repoter_(
        -: 5562:          &default_global_test_part_result_reporter_),
        -: 5563:      per_thread_test_part_result_reporter_(
        -: 5564:          &default_per_thread_test_part_result_reporter_),
        -: 5565:      parameterized_test_registry_(),
        -: 5566:      parameterized_tests_registered_(false),
        -: 5567:      last_death_test_suite_(-1),
        -: 5568:      current_test_suite_(nullptr),
        -: 5569:      current_test_info_(nullptr),
        -: 5570:      ad_hoc_test_result_(),
        -: 5571:      os_stack_trace_getter_(nullptr),
        -: 5572:      post_flag_parse_init_performed_(false),
        -: 5573:      random_seed_(0),  // Will be overridden by the flag before first use.
        -: 5574:      random_(0),       // Will be reseeded before first use.
        -: 5575:      start_timestamp_(0),
        -: 5576:      elapsed_time_(0),
        -: 5577:#if GTEST_HAS_DEATH_TEST
        1: 5578:      death_test_factory_(new DefaultDeathTestFactory),
        1: 5578-block  0
call    0 returned 1
        -: 5579:#endif
        -: 5580:      // Will be overridden by the flag before first use.
        2: 5581:      catch_exceptions_(false) {
        1: 5581-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 5581-block  1
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1: 5581-block  2
call    9 returned 1
call   10 returned 1
call   11 returned 1
call   12 returned 1
call   13 returned 1
call   14 returned 1
call   15 returned 1
branch 16 taken 1 (fallthrough)
branch 17 taken 0 (throw)
        1: 5581-block  3
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0 (throw)
        1: 5581-block  4
call   21 returned 1
call   22 returned 1
call   23 returned 1
branch 24 taken 1 (fallthrough)
branch 25 taken 0 (throw)
call   26 returned 1
call   27 returned 1
branch 28 taken 1 (fallthrough)
branch 29 taken 0 (throw)
    $$$$$: 5581-block  5
    $$$$$: 5581-block  6
call   30 never executed
    $$$$$: 5581-block  7
call   31 never executed
    $$$$$: 5581-block  8
call   32 never executed
    $$$$$: 5581-block  9
call   33 never executed
    $$$$$: 5581-block 10
call   34 never executed
    $$$$$: 5581-block 11
call   35 never executed
    $$$$$: 5581-block 12
call   36 never executed
    $$$$$: 5581-block 13
call   37 never executed
    $$$$$: 5581-block 14
call   38 never executed
    $$$$$: 5581-block 15
call   39 never executed
    $$$$$: 5581-block 16
call   40 never executed
    $$$$$: 5581-block 17
call   41 never executed
    $$$$$: 5581-block 18
call   42 never executed
    $$$$$: 5581-block 19
call   43 never executed
    $$$$$: 5581-block 20
call   44 never executed
    $$$$$: 5581-block 21
call   45 never executed
        1: 5582:  listeners()->SetDefaultResultPrinter(new PrettyUnitTestResultPrinter);
        1: 5582-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 5582-block  1
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1: 5583:}
        1: 5583-block  0
        -: 5584:
    #####: 5585:UnitTestImpl::~UnitTestImpl() {
        -: 5586:  // Deletes every TestSuite.
    #####: 5587:  ForEach(test_suites_, internal::Delete<TestSuite>);
        -: 5588:
        -: 5589:  // Deletes every Environment.
    #####: 5590:  ForEach(environments_, internal::Delete<Environment>);
        -: 5591:
    #####: 5592:  delete os_stack_trace_getter_;
    #####: 5593:}
------------------
_ZN7testing8internal12UnitTestImplD0Ev:
function _ZN7testing8internal12UnitTestImplD0Ev called 0 returned 0% blocks executed 0%
    #####: 5585:UnitTestImpl::~UnitTestImpl() {
        -: 5586:  // Deletes every TestSuite.
        -: 5587:  ForEach(test_suites_, internal::Delete<TestSuite>);
        -: 5588:
        -: 5589:  // Deletes every Environment.
        -: 5590:  ForEach(environments_, internal::Delete<Environment>);
        -: 5591:
        -: 5592:  delete os_stack_trace_getter_;
    #####: 5593:}
    %%%%%: 5593-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7testing8internal12UnitTestImplD2Ev:
function _ZN7testing8internal12UnitTestImplD2Ev called 0 returned 0% blocks executed 0%
    #####: 5585:UnitTestImpl::~UnitTestImpl() {
    %%%%%: 5585-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
        -: 5586:  // Deletes every TestSuite.
    #####: 5587:  ForEach(test_suites_, internal::Delete<TestSuite>);
    %%%%%: 5587-block  0
call    0 never executed
        -: 5588:
        -: 5589:  // Deletes every Environment.
    #####: 5590:  ForEach(environments_, internal::Delete<Environment>);
call    0 never executed
        -: 5591:
    #####: 5592:  delete os_stack_trace_getter_;
branch  0 never executed
branch  1 never executed
    %%%%%: 5592-block  0
call    2 never executed
    #####: 5593:}
------------------
        -: 5594:
        -: 5595:// Adds a TestProperty to the current TestResult object when invoked in a
        -: 5596:// context of a test, to current test suite's ad_hoc_test_result when invoke
        -: 5597:// from SetUpTestSuite/TearDownTestSuite, or to the global property set
        -: 5598:// otherwise.  If the result already contains a property with the same key,
        -: 5599:// the value will be updated.
function _ZN7testing8internal12UnitTestImpl14RecordPropertyERKNS_12TestPropertyE called 0 returned 0% blocks executed 0%
    #####: 5600:void UnitTestImpl::RecordProperty(const TestProperty& test_property) {
    #####: 5601:  std::string xml_element;
    %%%%%: 5601-block  0
call    0 never executed
    %%%%%: 5601-block  1
call    1 never executed
    $$$$$: 5601-block  2
call    2 never executed
        -: 5602:  TestResult* test_result;  // TestResult appropriate for property recording.
        -: 5603:
    #####: 5604:  if (current_test_info_ != nullptr) {
branch  0 never executed
branch  1 never executed
    #####: 5605:    xml_element = "testcase";
    %%%%%: 5605-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5606:    test_result = &(current_test_info_->result_);
    %%%%%: 5606-block  0
    #####: 5607:  } else if (current_test_suite_ != nullptr) {
    %%%%%: 5607-block  0
branch  0 never executed
branch  1 never executed
    #####: 5608:    xml_element = "testsuite";
    %%%%%: 5608-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5609:    test_result = &(current_test_suite_->ad_hoc_test_result_);
    %%%%%: 5609-block  0
        -: 5610:  } else {
    #####: 5611:    xml_element = "testsuites";
    %%%%%: 5611-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5612:    test_result = &ad_hoc_test_result_;
    %%%%%: 5612-block  0
        -: 5613:  }
    #####: 5614:  test_result->RecordProperty(xml_element, test_property);
    %%%%%: 5614-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5615:}
        -: 5616:
        -: 5617:#if GTEST_HAS_DEATH_TEST
        -: 5618:// Disables event forwarding if the control is currently in a death test
        -: 5619:// subprocess. Must not be called before InitGoogleTest.
function _ZN7testing8internal12UnitTestImpl32SuppressTestEventsIfInSubprocessEv called 1 returned 100% blocks executed 60%
        1: 5620:void UnitTestImpl::SuppressTestEventsIfInSubprocess() {
        1: 5621:  if (internal_run_death_test_flag_.get() != nullptr)
        1: 5621-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 5622:    listeners()->SuppressEventForwarding();
    %%%%%: 5622-block  0
call    0 never executed
call    1 never executed
        1: 5623:}
        -: 5624:#endif  // GTEST_HAS_DEATH_TEST
        -: 5625:
        -: 5626:// Initializes event listeners performing XML output as specified by
        -: 5627:// UnitTestOptions. Must not be called before InitGoogleTest.
function _ZN7testing8internal12UnitTestImpl18ConfigureXmlOutputEv called 1 returned 100% blocks executed 21%
        1: 5628:void UnitTestImpl::ConfigureXmlOutput() {
        2: 5629:  const std::string& output_format = UnitTestOptions::GetOutputFormat();
        1: 5629-block  0
call    0 returned 1
        1: 5629-block  1
call    1 returned 1
    $$$$$: 5629-block  2
call    2 never executed
        1: 5630:  if (output_format == "xml") {
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 5631:    listeners()->SetDefaultXmlGenerator(new XmlUnitTestResultPrinter(
    %%%%%: 5631-block  0
call    0 never executed
    %%%%%: 5631-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5632:        UnitTestOptions::GetAbsolutePathToOutputFile().c_str()));
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5632-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 5632-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 5632-block  2
call   10 never executed
    $$$$$: 5632-block  3
call   11 never executed
    $$$$$: 5632-block  4
call   12 never executed
    $$$$$: 5632-block  5
        1: 5633:  } else if (output_format == "json") {
        1: 5633-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 5634:    listeners()->SetDefaultXmlGenerator(new JsonUnitTestResultPrinter(
    %%%%%: 5634-block  0
call    0 never executed
    %%%%%: 5634-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5635:        UnitTestOptions::GetAbsolutePathToOutputFile().c_str()));
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5635-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 5635-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 5635-block  2
call   10 never executed
    $$$$$: 5635-block  3
call   11 never executed
    $$$$$: 5635-block  4
call   12 never executed
    $$$$$: 5635-block  5
        1: 5636:  } else if (output_format != "") {
        1: 5636-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5636-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    #####: 5637:    GTEST_LOG_(WARNING) << "WARNING: unrecognized output format \""
    %%%%%: 5637-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5637-block  1
call    3 never executed
    %%%%%: 5637-block  2
call    4 never executed
    $$$$$: 5637-block  3
call    5 never executed
    $$$$$: 5637-block  4
    #####: 5638:                        << output_format << "\" ignored.";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5638-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5638-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 5639:  }
        1: 5640:}
        -: 5641:
        -: 5642:#if GTEST_CAN_STREAM_RESULTS_
        -: 5643:// Initializes event listeners for streaming test results in string form.
        -: 5644:// Must not be called before InitGoogleTest.
        -: 5645:void UnitTestImpl::ConfigureStreamingOutput() {
        -: 5646:  const std::string& target = GTEST_FLAG_GET(stream_result_to);
        -: 5647:  if (!target.empty()) {
        -: 5648:    const size_t pos = target.find(':');
        -: 5649:    if (pos != std::string::npos) {
        -: 5650:      listeners()->Append(new StreamingListener(target.substr(0, pos),
        -: 5651:                                                target.substr(pos+1)));
        -: 5652:    } else {
        -: 5653:      GTEST_LOG_(WARNING) << "unrecognized streaming target \"" << target
        -: 5654:                          << "\" ignored.";
        -: 5655:    }
        -: 5656:  }
        -: 5657:}
        -: 5658:#endif  // GTEST_CAN_STREAM_RESULTS_
        -: 5659:
        -: 5660:// Performs initialization dependent upon flag values obtained in
        -: 5661:// ParseGoogleTestFlagsOnly.  Is called from InitGoogleTest after the call to
        -: 5662:// ParseGoogleTestFlagsOnly.  In case a user neglects to call InitGoogleTest
        -: 5663:// this function is also called from RunAllTests.  Since this function can be
        -: 5664:// called more than once, it has to be idempotent.
function _ZN7testing8internal12UnitTestImpl19PostFlagParsingInitEv called 2 returned 100% blocks executed 64%
        2: 5665:void UnitTestImpl::PostFlagParsingInit() {
        -: 5666:  // Ensures that this function does not execute more than once.
        2: 5667:  if (!post_flag_parse_init_performed_) {
        2: 5667-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1: 5668:    post_flag_parse_init_performed_ = true;
        -: 5669:
        -: 5670:#if defined(GTEST_CUSTOM_TEST_EVENT_LISTENER_)
        -: 5671:    // Register to send notifications about key process state changes.
        -: 5672:    listeners()->Append(new GTEST_CUSTOM_TEST_EVENT_LISTENER_());
        -: 5673:#endif  // defined(GTEST_CUSTOM_TEST_EVENT_LISTENER_)
        -: 5674:
        -: 5675:#if GTEST_HAS_DEATH_TEST
        1: 5676:    InitDeathTestSubprocessControlInfo();
        1: 5676-block  0
call    0 returned 1
        1: 5677:    SuppressTestEventsIfInSubprocess();
call    0 returned 1
        -: 5678:#endif  // GTEST_HAS_DEATH_TEST
        -: 5679:
        -: 5680:    // Registers parameterized tests. This makes parameterized tests
        -: 5681:    // available to the UnitTest reflection API without running
        -: 5682:    // RUN_ALL_TESTS.
        1: 5683:    RegisterParameterizedTests();
call    0 returned 1
        -: 5684:
        -: 5685:    // Configures listeners for XML output. This makes it possible for users
        -: 5686:    // to shut down the default XML output before invoking RUN_ALL_TESTS.
        1: 5687:    ConfigureXmlOutput();
call    0 returned 1
        -: 5688:
        1: 5689:    if (GTEST_FLAG_GET(brief)) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 5690:      listeners()->SetDefaultResultPrinter(new BriefUnitTestResultPrinter);
    %%%%%: 5690-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 5691:    }
        -: 5692:
        -: 5693:#if GTEST_CAN_STREAM_RESULTS_
        -: 5694:    // Configures listeners for streaming test results to the specified server.
        -: 5695:    ConfigureStreamingOutput();
        -: 5696:#endif  // GTEST_CAN_STREAM_RESULTS_
        -: 5697:
        -: 5698:#if GTEST_HAS_ABSL
        -: 5699:    if (GTEST_FLAG_GET(install_failure_signal_handler)) {
        -: 5700:      absl::FailureSignalHandlerOptions options;
        -: 5701:      absl::InstallFailureSignalHandler(options);
        -: 5702:    }
        -: 5703:#endif  // GTEST_HAS_ABSL
        -: 5704:  }
        2: 5705:}
        -: 5706:
        -: 5707:// A predicate that checks the name of a TestSuite against a known
        -: 5708:// value.
        -: 5709://
        -: 5710:// This is used for implementation of the UnitTest class only.  We put
        -: 5711:// it in the anonymous namespace to prevent polluting the outer
        -: 5712:// namespace.
        -: 5713://
        -: 5714:// TestSuiteNameIs is copyable.
        -: 5715:class TestSuiteNameIs {
        -: 5716: public:
        -: 5717:  // Constructor.
function _ZN7testing8internal15TestSuiteNameIsC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 23 returned 100% blocks executed 100%
       23: 5718:  explicit TestSuiteNameIs(const std::string& name) : name_(name) {}
       23: 5718-block  0
call    0 returned 23
        -: 5719:
        -: 5720:  // Returns true if and only if the name of test_suite matches name_.
function _ZNK7testing8internal15TestSuiteNameIsclEPKNS_9TestSuiteE called 253 returned 100% blocks executed 88%
      253: 5721:  bool operator()(const TestSuite* test_suite) const {
     506*: 5722:    return test_suite != nullptr &&
      253: 5722-block  0
branch  0 taken 253 (fallthrough)
branch  1 taken 0
    %%%%%: 5722-block  1
      253: 5722-block  2
      506: 5723:           strcmp(test_suite->name(), name_.c_str()) == 0;
      253: 5723-block  0
call    0 returned 253
call    1 returned 253
branch  2 taken 0 (fallthrough)
branch  3 taken 253
      253: 5723-block  1
        -: 5724:  }
        -: 5725:
        -: 5726: private:
        -: 5727:  std::string name_;
        -: 5728:};
        -: 5729:
        -: 5730:// Finds and returns a TestSuite with the given name.  If one doesn't
        -: 5731:// exist, creates one and returns it.  It's the CALLER'S
        -: 5732:// RESPONSIBILITY to ensure that this function is only called WHEN THE
        -: 5733:// TESTS ARE NOT SHUFFLED.
        -: 5734://
        -: 5735:// Arguments:
        -: 5736://
        -: 5737://   test_suite_name: name of the test suite
        -: 5738://   type_param:      the name of the test suite's type parameter, or NULL if
        -: 5739://                    this is not a typed or a type-parameterized test suite.
        -: 5740://   set_up_tc:       pointer to the function that sets up the test suite
        -: 5741://   tear_down_tc:    pointer to the function that tears down the test suite
function _ZN7testing8internal12UnitTestImpl12GetTestSuiteEPKcS3_PFvvES5_ called 23 returned 100% blocks executed 49%
       23: 5742:TestSuite* UnitTestImpl::GetTestSuite(
        -: 5743:    const char* test_suite_name, const char* type_param,
        -: 5744:    internal::SetUpTestSuiteFunc set_up_tc,
        -: 5745:    internal::TearDownTestSuiteFunc tear_down_tc) {
        -: 5746:  // Can we find a TestSuite with the given name?
        -: 5747:  const auto test_suite =
       23: 5748:      std::find_if(test_suites_.rbegin(), test_suites_.rend(),
       23: 5748-block  0
call    0 returned 23
call    1 returned 23
    $$$$$: 5748-block  1
    $$$$$: 5748-block  2
       46: 5749:                   TestSuiteNameIs(test_suite_name));
       23: 5749-block  0
call    0 returned 23
call    1 returned 23
branch  2 taken 23 (fallthrough)
branch  3 taken 0 (throw)
       23: 5749-block  1
call    4 returned 23
branch  5 taken 23 (fallthrough)
branch  6 taken 0 (throw)
call    7 returned 23
branch  8 taken 23 (fallthrough)
branch  9 taken 0 (throw)
       23: 5749-block  2
call   10 returned 23
call   11 returned 23
call   12 returned 23
    $$$$$: 5749-block  3
call   13 never executed
    $$$$$: 5749-block  4
    $$$$$: 5749-block  5
call   14 never executed
    $$$$$: 5749-block  6
    $$$$$: 5749-block  7
call   15 never executed
    $$$$$: 5749-block  8
        -: 5750:
      23*: 5751:  if (test_suite != test_suites_.rend()) return *test_suite;
call    0 returned 23
call    1 returned 23
branch  2 taken 23 (fallthrough)
branch  3 taken 0 (throw)
       23: 5751-block  0
branch  4 taken 0 (fallthrough)
branch  5 taken 23
    %%%%%: 5751-block  1
call    6 never executed
    $$$$$: 5751-block  2
        -: 5752:
        -: 5753:  // No.  Let's create one.
        -: 5754:  auto* const new_test_suite =
       23: 5755:      new TestSuite(test_suite_name, type_param, set_up_tc, tear_down_tc);
       23: 5755-block  0
call    0 returned 23
branch  1 taken 23 (fallthrough)
branch  2 taken 0 (throw)
       23: 5755-block  1
call    3 returned 23
branch  4 taken 23 (fallthrough)
branch  5 taken 0 (throw)
    $$$$$: 5755-block  2
call    6 never executed
        -: 5756:
        -: 5757:  // Is this a death test suite?
       23: 5758:  if (internal::UnitTestOptions::MatchesFilter(test_suite_name,
       23: 5758-block  0
call    0 returned 23
call    1 returned 23
branch  2 taken 23 (fallthrough)
branch  3 taken 0 (throw)
       23: 5758-block  1
call    4 returned 23
call    5 returned 23
call    6 returned 23
branch  7 taken 0 (fallthrough)
branch  8 taken 23
    $$$$$: 5758-block  2
call    9 never executed
    $$$$$: 5758-block  3
        -: 5759:                                               kDeathTestSuiteFilter)) {
        -: 5760:    // Yes.  Inserts the test suite after the last death test suite
        -: 5761:    // defined so far.  This only works when the test suites haven't
        -: 5762:    // been shuffled.  Otherwise we may end up running a death test
        -: 5763:    // after a non-death test.
    #####: 5764:    ++last_death_test_suite_;
    #####: 5765:    test_suites_.insert(test_suites_.begin() + last_death_test_suite_,
call    0 never executed
    $$$$$: 5765-block  0
    $$$$$: 5765-block  1
    #####: 5766:                        new_test_suite);
    %%%%%: 5766-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 5766-block  1
    $$$$$: 5766-block  2
        -: 5767:  } else {
        -: 5768:    // No.  Appends to the end of the list.
       23: 5769:    test_suites_.push_back(new_test_suite);
       23: 5769-block  0
call    0 returned 23
branch  1 taken 23 (fallthrough)
branch  2 taken 0 (throw)
        -: 5770:  }
        -: 5771:
       23: 5772:  test_suite_indices_.push_back(static_cast<int>(test_suite_indices_.size()));
       23: 5772-block  0
call    0 returned 23
call    1 returned 23
branch  2 taken 23 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$: 5772-block  1
       23: 5773:  return new_test_suite;
       23: 5773-block  0
        -: 5774:}
        -: 5775:
        -: 5776:// Helpers for setting up / tearing down the given environment.  They
        -: 5777:// are for use in the ForEach() function.
function _ZN7testing8internalL16SetUpEnvironmentEPNS_11EnvironmentE called 0 returned 0% blocks executed 0%
    #####: 5778:static void SetUpEnvironment(Environment* env) { env->SetUp(); }
    %%%%%: 5778-block  0
call    0 never executed
function _ZN7testing8internalL19TearDownEnvironmentEPNS_11EnvironmentE called 0 returned 0% blocks executed 0%
    #####: 5779:static void TearDownEnvironment(Environment* env) { env->TearDown(); }
    %%%%%: 5779-block  0
call    0 never executed
        -: 5780:
        -: 5781:// Runs all tests in this UnitTest object, prints the result, and
        -: 5782:// returns true if all tests are successful.  If any exception is
        -: 5783:// thrown during a test, the test is considered to be failed, but the
        -: 5784:// rest of the tests will still be run.
        -: 5785://
        -: 5786:// When parameterized tests are enabled, it expands and registers
        -: 5787:// parameterized tests first in RegisterParameterizedTests().
        -: 5788:// All other functions called from RunAllTests() may safely assume that
        -: 5789:// parameterized tests are ready to be counted and run.
function _ZN7testing8internal12UnitTestImpl11RunAllTestsEv called 1 returned 100% blocks executed 50%
        1: 5790:bool UnitTestImpl::RunAllTests() {
        -: 5791:  // True if and only if Google Test is initialized before RUN_ALL_TESTS() is
        -: 5792:  // called.
        1: 5793:  const bool gtest_is_initialized_before_run_all_tests = GTestIsInitialized();
        1: 5793-block  0
call    0 returned 1
        -: 5794:
        -: 5795:  // Do not run any test if the --help flag was specified.
        1: 5796:  if (g_help_flag)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 5797:    return true;
    %%%%%: 5797-block  0
        -: 5798:
        -: 5799:  // Repeats the call to the post-flag parsing initialization in case the
        -: 5800:  // user didn't call InitGoogleTest.
        1: 5801:  PostFlagParsingInit();
        1: 5801-block  0
call    0 returned 1
        -: 5802:
        -: 5803:  // Even if sharding is not on, test runners may want to use the
        -: 5804:  // GTEST_SHARD_STATUS_FILE to query whether the test supports the sharding
        -: 5805:  // protocol.
        1: 5806:  internal::WriteToShardStatusFileIfNeeded();
call    0 returned 1
        -: 5807:
        -: 5808:  // True if and only if we are in a subprocess for running a thread-safe-style
        -: 5809:  // death test.
        1: 5810:  bool in_subprocess_for_death_test = false;
        -: 5811:
        -: 5812:#if GTEST_HAS_DEATH_TEST
        1: 5813:  in_subprocess_for_death_test =
        1: 5814:      (internal_run_death_test_flag_.get() != nullptr);
call    0 returned 1
        -: 5815:# if defined(GTEST_EXTRA_DEATH_TEST_CHILD_SETUP_)
        -: 5816:  if (in_subprocess_for_death_test) {
        -: 5817:    GTEST_EXTRA_DEATH_TEST_CHILD_SETUP_();
        -: 5818:  }
        -: 5819:# endif  // defined(GTEST_EXTRA_DEATH_TEST_CHILD_SETUP_)
        -: 5820:#endif  // GTEST_HAS_DEATH_TEST
        -: 5821:
        1: 5822:  const bool should_shard = ShouldShard(kTestTotalShards, kTestShardIndex,
call    0 returned 1
        -: 5823:                                        in_subprocess_for_death_test);
        -: 5824:
        -: 5825:  // Compares the full test names with the filter to decide which
        -: 5826:  // tests to run.
       1*: 5827:  const bool has_tests_to_run = FilterTests(should_shard
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 5827-block  0
        1: 5827-block  1
        1: 5827-block  2
call    2 returned 1
        -: 5828:                                              ? HONOR_SHARDING_PROTOCOL
        1: 5829:                                              : IGNORE_SHARDING_PROTOCOL) > 0;
        -: 5830:
        -: 5831:  // Lists the tests and exits if the --gtest_list_tests flag was specified.
        1: 5832:  if (GTEST_FLAG_GET(list_tests)) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -: 5833:    // This must be called *after* FilterTests() has been called.
    #####: 5834:    ListTestsMatchingFilter();
    %%%%%: 5834-block  0
call    0 never executed
    #####: 5835:    return true;
        -: 5836:  }
        -: 5837:
        1: 5838:  random_seed_ = GTEST_FLAG_GET(shuffle)
       1*: 5839:                     ? GetRandomSeedFromFlag(GTEST_FLAG_GET(random_seed))
        1: 5839-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 5839-block  1
call    2 never executed
        1: 5839-block  2
        -: 5840:                     : 0;
        -: 5841:
        -: 5842:  // True if and only if at least one test has failed.
        1: 5843:  bool failed = false;
        -: 5844:
        1: 5845:  TestEventListener* repeater = listeners()->repeater();
        1: 5845-block  0
call    0 returned 1
call    1 returned 1
        -: 5846:
        1: 5847:  start_timestamp_ = GetTimeInMillis();
call    0 returned 1
        1: 5848:  repeater->OnTestProgramStart(*parent_);
call    0 returned 1
        -: 5849:
        -: 5850:  // How many times to repeat the tests?  We don't want to repeat them
        -: 5851:  // when we are inside the subprocess of a death test.
       1*: 5852:  const int repeat = in_subprocess_for_death_test ? 1 : GTEST_FLAG_GET(repeat);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 5852-block  0
        1: 5852-block  1
        -: 5853:
        -: 5854:  // Repeats forever if the repeat count is negative.
        1: 5855:  const bool gtest_repeat_forever = repeat < 0;
        -: 5856:
        -: 5857:  // Should test environments be set up and torn down for each repeat, or only
        -: 5858:  // set up on the first and torn down on the last iteration? If there is no
        -: 5859:  // "last" iteration because the tests will repeat forever, always recreate the
        -: 5860:  // environments to avoid leaks in case one of the environments is using
        -: 5861:  // resources that are external to this process. Without this check there would
        -: 5862:  // be no way to clean up those external resources automatically.
        1: 5863:  const bool recreate_environments_when_repeating =
       1*: 5864:      GTEST_FLAG_GET(recreate_environments_when_repeating) ||
        1: 5864-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 5864-block  1
branch  2 never executed
branch  3 never executed
        1: 5864-block  2
    %%%%%: 5864-block  3
        -: 5865:      gtest_repeat_forever;
        -: 5866:
        2: 5867:  for (int i = 0; gtest_repeat_forever || i != repeat; i++) {
        1: 5867-block  0
        2: 5867-block  1
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2: 5867-block  2
branch  2 taken 1 (fallthrough)
branch  3 taken 1
        1: 5867-block  3
        -: 5868:    // We want to preserve failures generated by ad-hoc test
        -: 5869:    // assertions executed before RUN_ALL_TESTS().
        1: 5870:    ClearNonAdHocTestResult();
        1: 5870-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 5871:
        1: 5872:    Timer timer;
        1: 5872-block  0
call    0 returned 1
        -: 5873:
        -: 5874:    // Shuffles test suites and tests if requested.
        1: 5875:    if (has_tests_to_run && GTEST_FLAG_GET(shuffle)) {
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 5875-block  0
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    #####: 5876:      random()->Reseed(static_cast<uint32_t>(random_seed_));
    %%%%%: 5876-block  0
call    0 never executed
call    1 never executed
        -: 5877:      // This should be done before calling OnTestIterationStart(),
        -: 5878:      // such that a test event listener can see the actual test order
        -: 5879:      // in the event.
    #####: 5880:      ShuffleTests();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5881:    }
        -: 5882:
        -: 5883:    // Tells the unit test event listeners that the tests are about to start.
        1: 5884:    repeater->OnTestIterationStart(*parent_, i);
        1: 5884-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 5885:
        -: 5886:    // Runs each test suite if there is at least one test to run.
        1: 5887:    if (has_tests_to_run) {
        1: 5887-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -: 5888:      // Sets up all environments beforehand. If test environments aren't
        -: 5889:      // recreated for each iteration, only do so on the first iteration.
       1*: 5890:      if (i == 0 || recreate_environments_when_repeating) {
        1: 5890-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 5890-block  1
branch  2 never executed
branch  3 never executed
        1: 5891:        repeater->OnEnvironmentsSetUpStart(*parent_);
        1: 5891-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5892:        ForEach(environments_, SetUpEnvironment);
        1: 5892-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5893:        repeater->OnEnvironmentsSetUpEnd(*parent_);
        1: 5893-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 5894:      }
        -: 5895:
        -: 5896:      // Runs the tests only if there was no fatal failure or skip triggered
        -: 5897:      // during global set-up.
        1: 5898:      if (Test::IsSkipped()) {
        1: 5898-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5898-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
        -: 5899:        // Emit diagnostics when global set-up calls skip, as it will not be
        -: 5900:        // emitted by default.
        -: 5901:        TestResult& test_result =
    #####: 5902:            *internal::GetUnitTestImpl()->current_test_result();
    %%%%%: 5902-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5902-block  1
call    3 never executed
    #####: 5903:        for (int j = 0; j < test_result.total_part_count(); ++j) {
    %%%%%: 5903-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5903-block  1
        -: 5904:          const TestPartResult& test_part_result =
    #####: 5905:              test_result.GetTestPartResult(j);
    %%%%%: 5905-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5906:          if (test_part_result.type() == TestPartResult::kSkip) {
    %%%%%: 5906-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5907:            const std::string& result = test_part_result.message();
    %%%%%: 5907-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 5907-block  1
call    5 never executed
    %%%%%: 5907-block  2
call    6 never executed
    $$$$$: 5907-block  3
call    7 never executed
    $$$$$: 5907-block  4
    $$$$$: 5907-block  5
call    8 never executed
    #####: 5908:            printf("%s\n", result.c_str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 5909:          }
        -: 5910:        }
    #####: 5911:        fflush(stdout);
    %%%%%: 5911-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5911-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        1: 5912:      } else if (!Test::HasFatalFailure()) {
        1: 5912-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5912-block  1
branch  3 taken 1 (fallthrough)
branch  4 taken 0
       24: 5913:        for (int test_index = 0; test_index < total_test_suite_count();
        1: 5913-block  0
       24: 5913-block  1
call    0 returned 24
branch  1 taken 23 (fallthrough)
branch  2 taken 1
       23: 5913-block  2
        -: 5914:             test_index++) {
       23: 5915:          GetMutableSuiteCase(test_index)->Run();
       23: 5915-block  0
call    0 returned 23
branch  1 taken 23 (fallthrough)
branch  2 taken 0 (throw)
       23: 5915-block  1
call    3 returned 23
branch  4 taken 23 (fallthrough)
branch  5 taken 0 (throw)
      23*: 5916:          if (GTEST_FLAG_GET(fail_fast) &&
       23: 5916-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 23
    %%%%%: 5916-block  1
       23: 5916-block  2
       23: 5916-block  3
branch  2 taken 0 (fallthrough)
branch  3 taken 23
    #####: 5917:              GetMutableSuiteCase(test_index)->Failed()) {
    %%%%%: 5917-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5917-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5917-block  2
branch  6 never executed
branch  7 never executed
    #####: 5918:            for (int j = test_index + 1; j < total_test_suite_count(); j++) {
    %%%%%: 5918-block  0
    %%%%%: 5918-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5918-block  2
    #####: 5919:              GetMutableSuiteCase(j)->Skip();
    %%%%%: 5919-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5919-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 5920:            }
    #####: 5921:            break;
    %%%%%: 5921-block  0
        -: 5922:          }
        -: 5923:        }
    #####: 5924:      } else if (Test::HasFatalFailure()) {
    %%%%%: 5924-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5924-block  1
branch  3 never executed
branch  4 never executed
        -: 5925:        // If there was a fatal failure during the global setup then we know we
        -: 5926:        // aren't going to run any tests. Explicitly mark all of the tests as
        -: 5927:        // skipped to make this obvious in the output.
    #####: 5928:        for (int test_index = 0; test_index < total_test_suite_count();
    %%%%%: 5928-block  0
    %%%%%: 5928-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5928-block  2
        -: 5929:             test_index++) {
    #####: 5930:          GetMutableSuiteCase(test_index)->Skip();
    %%%%%: 5930-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5930-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 5931:        }
        -: 5932:      }
        -: 5933:
        -: 5934:      // Tears down all environments in reverse order afterwards. If test
        -: 5935:      // environments aren't recreated for each iteration, only do so on the
        -: 5936:      // last iteration.
       1*: 5937:      if (i == repeat - 1 || recreate_environments_when_repeating) {
        1: 5937-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 5937-block  1
branch  2 never executed
branch  3 never executed
        1: 5938:        repeater->OnEnvironmentsTearDownStart(*parent_);
        1: 5938-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5939:        std::for_each(environments_.rbegin(), environments_.rend(),
        1: 5939-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
    $$$$$: 5939-block  1
    $$$$$: 5939-block  2
        -: 5940:                      TearDownEnvironment);
        1: 5941:        repeater->OnEnvironmentsTearDownEnd(*parent_);
        1: 5941-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 5942:      }
        -: 5943:    }
        -: 5944:
        1: 5945:    elapsed_time_ = timer.Elapsed();
        1: 5945-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 5946:
        -: 5947:    // Tells the unit test event listener that the tests have just finished.
        1: 5948:    repeater->OnTestIterationEnd(*parent_, i);
        1: 5948-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 5949:
        -: 5950:    // Gets the result and clears it.
        1: 5951:    if (!Passed()) {
        1: 5951-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5951-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    #####: 5952:      failed = true;
    %%%%%: 5952-block  0
        -: 5953:    }
        -: 5954:
        -: 5955:    // Restores the original test order after the iteration.  This
        -: 5956:    // allows the user to quickly repro a failure that happens in the
        -: 5957:    // N-th iteration without repeating the first (N - 1) iterations.
        -: 5958:    // This is not enclosed in "if (GTEST_FLAG(shuffle)) { ... }", in
        -: 5959:    // case the user somehow changes the value of the flag somewhere
        -: 5960:    // (it's always safe to unshuffle the tests).
        1: 5961:    UnshuffleTests();
        1: 5961-block  0
call    0 returned 1
        -: 5962:
        1: 5963:    if (GTEST_FLAG_GET(shuffle)) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -: 5964:      // Picks a new random seed for each iteration.
    #####: 5965:      random_seed_ = GetNextRandomSeed(random_seed_);
    %%%%%: 5965-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5965-block  1
        -: 5966:    }
        -: 5967:  }
        -: 5968:
        1: 5969:  repeater->OnTestProgramEnd(*parent_);
        1: 5969-block  0
call    0 returned 1
        -: 5970:
        1: 5971:  if (!gtest_is_initialized_before_run_all_tests) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 5972:    ColoredPrintf(
    %%%%%: 5972-block  0
call    0 never executed
        -: 5973:        GTestColor::kRed,
        -: 5974:        "\nIMPORTANT NOTICE - DO NOT IGNORE:\n"
        -: 5975:        "This test program did NOT call " GTEST_INIT_GOOGLE_TEST_NAME_
        -: 5976:        "() before calling RUN_ALL_TESTS(). This is INVALID. Soon " GTEST_NAME_
        -: 5977:        " will start to enforce the valid usage. "
        -: 5978:        "Please fix it ASAP, or IT WILL START TO FAIL.\n");  // NOLINT
        -: 5979:#if GTEST_FOR_GOOGLE_
        -: 5980:    ColoredPrintf(GTestColor::kRed,
        -: 5981:                  "For more details, see http://wiki/Main/ValidGUnitMain.\n");
        -: 5982:#endif  // GTEST_FOR_GOOGLE_
        -: 5983:  }
        -: 5984:
        1: 5985:  return !failed;
        1: 5985-block  0
        -: 5986:}
        -: 5987:
        -: 5988:// Reads the GTEST_SHARD_STATUS_FILE environment variable, and creates the file
        -: 5989:// if the variable is present. If a file already exists at this location, this
        -: 5990:// function will write over it. If the variable is present, but the file cannot
        -: 5991:// be created, prints an error and exits.
function _ZN7testing8internal30WriteToShardStatusFileIfNeededEv called 1 returned 100% blocks executed 30%
        1: 5992:void WriteToShardStatusFileIfNeeded() {
        1: 5993:  const char* const test_shard_file = posix::GetEnv(kTestShardStatusFile);
        1: 5993-block  0
call    0 returned 1
        1: 5994:  if (test_shard_file != nullptr) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 5995:    FILE* const file = posix::FOpen(test_shard_file, "w");
    %%%%%: 5995-block  0
call    0 never executed
    #####: 5996:    if (file == nullptr) {
branch  0 never executed
branch  1 never executed
    #####: 5997:      ColoredPrintf(GTestColor::kRed,
    %%%%%: 5997-block  0
call    0 never executed
        -: 5998:                    "Could not write to the test shard status file \"%s\" "
        -: 5999:                    "specified by the %s environment variable.\n",
        -: 6000:                    test_shard_file, kTestShardStatusFile);
    #####: 6001:      fflush(stdout);
call    0 never executed
call    1 never executed
    #####: 6002:      exit(EXIT_FAILURE);
call    0 never executed
        -: 6003:    }
    #####: 6004:    fclose(file);
    %%%%%: 6004-block  0
call    0 never executed
        -: 6005:  }
        1: 6006:}
        -: 6007:
        -: 6008:// Checks whether sharding is enabled by examining the relevant
        -: 6009:// environment variable values. If the variables are present,
        -: 6010:// but inconsistent (i.e., shard_index >= total_shards), prints
        -: 6011:// an error and exits. If in_subprocess_for_death_test, sharding is
        -: 6012:// disabled because it must only be applied to the original test
        -: 6013:// process. Otherwise, we could filter out death tests we intended to execute.
function _ZN7testing8internal11ShouldShardEPKcS2_b called 2 returned 100% blocks executed 9%
        2: 6014:bool ShouldShard(const char* total_shards_env,
        -: 6015:                 const char* shard_index_env,
        -: 6016:                 bool in_subprocess_for_death_test) {
        2: 6017:  if (in_subprocess_for_death_test) {
        2: 6017-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####: 6018:    return false;
    %%%%%: 6018-block  0
        -: 6019:  }
        -: 6020:
        2: 6021:  const int32_t total_shards = Int32FromEnvOrDie(total_shards_env, -1);
        2: 6021-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2: 6022:  const int32_t shard_index = Int32FromEnvOrDie(shard_index_env, -1);
        2: 6022-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        -: 6023:
        2: 6024:  if (total_shards == -1 && shard_index == -1) {
        2: 6024-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2: 6024-block  1
branch  2 taken 2 (fallthrough)
branch  3 taken 0
        2: 6025:    return false;
        2: 6025-block  0
    #####: 6026:  } else if (total_shards == -1 && shard_index != -1) {
    %%%%%: 6026-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 6026-block  1
branch  2 never executed
branch  3 never executed
    #####: 6027:    const Message msg = Message()
    %%%%%: 6027-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 6027-block  1
    #####: 6028:      << "Invalid environment variables: you have "
    %%%%%: 6028-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6029:      << kTestShardIndex << " = " << shard_index
    %%%%%: 6029-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6029-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6029-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 6030:      << ", but have left " << kTestTotalShards << " unset.\n";
    %%%%%: 6030-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6030-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6030-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 6030-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$: 6030-block  4
call   12 never executed
    #####: 6031:    ColoredPrintf(GTestColor::kRed, "%s", msg.GetString().c_str());
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6031-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 6031-block  1
call    7 never executed
    $$$$$: 6031-block  2
call    8 never executed
    $$$$$: 6031-block  3
    #####: 6032:    fflush(stdout);
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6032-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 6033:    exit(EXIT_FAILURE);
    %%%%%: 6033-block  0
call    0 never executed
    #####: 6034:  } else if (total_shards != -1 && shard_index == -1) {
    %%%%%: 6034-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 6034-block  1
branch  2 never executed
branch  3 never executed
    #####: 6035:    const Message msg = Message()
    %%%%%: 6035-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 6035-block  1
    #####: 6036:      << "Invalid environment variables: you have "
    %%%%%: 6036-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6037:      << kTestTotalShards << " = " << total_shards
    %%%%%: 6037-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6037-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6037-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 6038:      << ", but have left " << kTestShardIndex << " unset.\n";
    %%%%%: 6038-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6038-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6038-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 6038-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$: 6038-block  4
call   12 never executed
    #####: 6039:    ColoredPrintf(GTestColor::kRed, "%s", msg.GetString().c_str());
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6039-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 6039-block  1
call    7 never executed
    $$$$$: 6039-block  2
call    8 never executed
    $$$$$: 6039-block  3
    #####: 6040:    fflush(stdout);
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6040-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 6041:    exit(EXIT_FAILURE);
    %%%%%: 6041-block  0
call    0 never executed
    #####: 6042:  } else if (shard_index < 0 || shard_index >= total_shards) {
    %%%%%: 6042-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 6042-block  1
branch  2 never executed
branch  3 never executed
    #####: 6043:    const Message msg = Message()
    %%%%%: 6043-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 6043-block  1
    #####: 6044:      << "Invalid environment variables: we require 0 <= "
    %%%%%: 6044-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6045:      << kTestShardIndex << " < " << kTestTotalShards
    %%%%%: 6045-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6045-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6045-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 6046:      << ", but you have " << kTestShardIndex << "=" << shard_index
    %%%%%: 6046-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6046-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6046-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 6046-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 6047:      << ", " << kTestTotalShards << "=" << total_shards << ".\n";
    %%%%%: 6047-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6047-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6047-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 6047-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 6047-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 6047-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
    $$$$$: 6047-block  6
call   18 never executed
    #####: 6048:    ColoredPrintf(GTestColor::kRed, "%s", msg.GetString().c_str());
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6048-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 6048-block  1
call    7 never executed
    $$$$$: 6048-block  2
call    8 never executed
    $$$$$: 6048-block  3
    #####: 6049:    fflush(stdout);
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6049-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 6050:    exit(EXIT_FAILURE);
    %%%%%: 6050-block  0
call    0 never executed
        -: 6051:  }
        -: 6052:
    #####: 6053:  return total_shards > 1;
    %%%%%: 6053-block  0
        -: 6054:}
        -: 6055:
        -: 6056:// Parses the environment variable var as an Int32. If it is unset,
        -: 6057:// returns default_val. If it is not an Int32, prints an error
        -: 6058:// and aborts.
function _ZN7testing8internal17Int32FromEnvOrDieEPKci called 4 returned 100% blocks executed 35%
        4: 6059:int32_t Int32FromEnvOrDie(const char* var, int32_t default_val) {
        4: 6060:  const char* str_val = posix::GetEnv(var);
        4: 6060-block  0
call    0 returned 4
        4: 6061:  if (str_val == nullptr) {
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4: 6062:    return default_val;
        4: 6062-block  0
        -: 6063:  }
        -: 6064:
        -: 6065:  int32_t result;
    #####: 6066:  if (!ParseInt32(Message() << "The value of environment variable " << var,
    %%%%%: 6066-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6066-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6066-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 6066-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 6066-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    $$$$$: 6066-block  5
call   15 never executed
    $$$$$: 6066-block  6
        -: 6067:                  str_val, &result)) {
    #####: 6068:    exit(EXIT_FAILURE);
    %%%%%: 6068-block  0
call    0 never executed
        -: 6069:  }
    #####: 6070:  return result;
    %%%%%: 6070-block  0
        -: 6071:}
        -: 6072:
        -: 6073:// Given the total number of shards, the shard index, and the test id,
        -: 6074:// returns true if and only if the test should be run on this shard. The test id
        -: 6075:// is some arbitrary but unique non-negative integer assigned to each test
        -: 6076:// method. Assumes that 0 <= shard_index < total_shards.
function _ZN7testing8internal20ShouldRunTestOnShardEiii called 0 returned 0% blocks executed 0%
    #####: 6077:bool ShouldRunTestOnShard(int total_shards, int shard_index, int test_id) {
    #####: 6078:  return (test_id % total_shards) == shard_index;
    %%%%%: 6078-block  0
        -: 6079:}
        -: 6080:
        -: 6081:// Compares the name of each test with the user-specified filter to
        -: 6082:// decide whether the test should be run, then records the result in
        -: 6083:// each TestSuite and TestInfo object.
        -: 6084:// If shard_tests == true, further filters tests based on sharding
        -: 6085:// variables in the environment - see
        -: 6086:// https://github.com/google/googletest/blob/master/googletest/docs/advanced.md
        -: 6087:// . Returns the number of tests that should run.
function _ZN7testing8internal12UnitTestImpl11FilterTestsENS1_18ReactionToShardingE called 1 returned 100% blocks executed 70%
        1: 6088:int UnitTestImpl::FilterTests(ReactionToSharding shard_tests) {
        1: 6089:  const int32_t total_shards = shard_tests == HONOR_SHARDING_PROTOCOL ?
        1: 6089-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        1: 6089-block  1
    #####: 6090:      Int32FromEnvOrDie(kTestTotalShards, -1) : -1;
    %%%%%: 6090-block  0
call    0 never executed
        1: 6091:  const int32_t shard_index = shard_tests == HONOR_SHARDING_PROTOCOL ?
        1: 6091-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        1: 6091-block  1
    #####: 6092:      Int32FromEnvOrDie(kTestShardIndex, -1) : -1;
    %%%%%: 6092-block  0
call    0 never executed
        -: 6093:
        -: 6094:  // num_runnable_tests are the number of tests that will
        -: 6095:  // run across all shards (i.e., match filter and are not disabled).
        -: 6096:  // num_selected_tests are the number of tests to be run on
        -: 6097:  // this shard.
        1: 6098:  int num_runnable_tests = 0;
        1: 6099:  int num_selected_tests = 0;
       24: 6100:  for (auto* test_suite : test_suites_) {
        1: 6100-block  0
call    0 returned 1
call    1 returned 1
       24: 6100-block  1
call    2 returned 24
branch  3 taken 23 (fallthrough)
branch  4 taken 1
       23: 6100-block  2
call    5 returned 23
call    6 returned 23
       46: 6101:    const std::string& test_suite_name = test_suite->name();
call    0 returned 23
call    1 returned 23
call    2 returned 23
branch  3 taken 23 (fallthrough)
branch  4 taken 0 (throw)
       23: 6101-block  0
call    5 returned 23
       23: 6101-block  1
call    6 returned 23
    $$$$$: 6101-block  2
call    7 never executed
    $$$$$: 6101-block  3
    $$$$$: 6101-block  4
call    8 never executed
       23: 6102:    test_suite->set_should_run(false);
call    0 returned 23
        -: 6103:
       46: 6104:    for (size_t j = 0; j < test_suite->test_info_list().size(); j++) {
       46: 6104-block  0
call    0 returned 46
call    1 returned 46
branch  2 taken 23 (fallthrough)
branch  3 taken 23
       23: 6105:      TestInfo* const test_info = test_suite->test_info_list()[j];
       23: 6105-block  0
call    0 returned 23
call    1 returned 23
       46: 6106:      const std::string test_name(test_info->name());
call    0 returned 23
call    1 returned 23
call    2 returned 23
branch  3 taken 23 (fallthrough)
branch  4 taken 0 (throw)
call    5 returned 23
    $$$$$: 6106-block  0
    $$$$$: 6106-block  1
call    6 never executed
        -: 6107:      // A test is disabled if test suite name or test name matches
        -: 6108:      // kDisableTestFilter.
       23: 6109:      const bool is_disabled = internal::UnitTestOptions::MatchesFilter(
call    0 returned 23
      46*: 6110:                                   test_suite_name, kDisableTestFilter) ||
branch  0 taken 23 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 23
    %%%%%: 6110-block  0
       23: 6110-block  1
       23: 6111:                               internal::UnitTestOptions::MatchesFilter(
       23: 6111-block  0
call    0 returned 23
       23: 6112:                                   test_name, kDisableTestFilter);
       23: 6113:      test_info->is_disabled_ = is_disabled;
        -: 6114:
       23: 6115:      const bool matches_filter = internal::UnitTestOptions::FilterMatchesTest(
       23: 6115-block  0
call    0 returned 23
branch  1 taken 23 (fallthrough)
branch  2 taken 0 (throw)
        -: 6116:          test_suite_name, test_name);
       23: 6117:      test_info->matches_filter_ = matches_filter;
        -: 6118:
       23: 6119:      const bool is_runnable =
      23*: 6120:          (GTEST_FLAG_GET(also_run_disabled_tests) || !is_disabled) &&
       23: 6120-block  0
branch  0 taken 23 (fallthrough)
branch  1 taken 0
       23: 6120-block  1
branch  2 taken 23 (fallthrough)
branch  3 taken 0
       23: 6120-block  2
branch  4 taken 23 (fallthrough)
branch  5 taken 0
       23: 6120-block  3
    %%%%%: 6120-block  4
        -: 6121:          matches_filter;
        -: 6122:
        -: 6123:      const bool is_in_another_shard =
      23*: 6124:          shard_tests != IGNORE_SHARDING_PROTOCOL &&
       23: 6124-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 23
    %%%%%: 6124-block  1
       23: 6124-block  2
    #####: 6125:          !ShouldRunTestOnShard(total_shards, shard_index, num_runnable_tests);
    %%%%%: 6125-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
       23: 6126:      test_info->is_in_another_shard_ = is_in_another_shard;
      23*: 6127:      const bool is_selected = is_runnable && !is_in_another_shard;
       23: 6127-block  0
branch  0 taken 23 (fallthrough)
branch  1 taken 0
       23: 6127-block  1
branch  2 taken 23 (fallthrough)
branch  3 taken 0
       23: 6127-block  2
    %%%%%: 6127-block  3
        -: 6128:
       23: 6129:      num_runnable_tests += is_runnable;
       23: 6130:      num_selected_tests += is_selected;
        -: 6131:
       23: 6132:      test_info->should_run_ = is_selected;
      23*: 6133:      test_suite->set_should_run(test_suite->should_run() || is_selected);
       23: 6133-block  0
call    0 returned 23
branch  1 taken 23 (fallthrough)
branch  2 taken 0
       23: 6133-block  1
branch  3 taken 23 (fallthrough)
branch  4 taken 0
       23: 6133-block  2
    %%%%%: 6133-block  3
       23: 6133-block  4
call    5 returned 23
        -: 6134:    }
        -: 6135:  }
        1: 6136:  return num_selected_tests;
        1: 6136-block  0
        1: 6136-block  1
        -: 6137:}
        -: 6138:
        -: 6139:// Prints the given C-string on a single line by replacing all '\n'
        -: 6140:// characters with string "\\n".  If the output takes more than
        -: 6141:// max_length characters, only prints the first max_length characters
        -: 6142:// and "...".
function _ZN7testing8internalL14PrintOnOneLineEPKci called 0 returned 0% blocks executed 0%
    #####: 6143:static void PrintOnOneLine(const char* str, int max_length) {
    #####: 6144:  if (str != nullptr) {
    %%%%%: 6144-block  0
branch  0 never executed
branch  1 never executed
    #####: 6145:    for (int i = 0; *str != '\0'; ++str) {
    %%%%%: 6145-block  0
    %%%%%: 6145-block  1
branch  0 never executed
branch  1 never executed
    %%%%%: 6145-block  2
    #####: 6146:      if (i >= max_length) {
    %%%%%: 6146-block  0
branch  0 never executed
branch  1 never executed
    #####: 6147:        printf("...");
    %%%%%: 6147-block  0
call    0 never executed
    #####: 6148:        break;
        -: 6149:      }
    #####: 6150:      if (*str == '\n') {
    %%%%%: 6150-block  0
branch  0 never executed
branch  1 never executed
    #####: 6151:        printf("\\n");
    %%%%%: 6151-block  0
call    0 never executed
    #####: 6152:        i += 2;
        -: 6153:      } else {
    #####: 6154:        printf("%c", *str);
    %%%%%: 6154-block  0
call    0 never executed
    #####: 6155:        ++i;
        -: 6156:      }
        -: 6157:    }
        -: 6158:  }
    #####: 6159:}
        -: 6160:
        -: 6161:// Prints the names of the tests matching the user-specified filter flag.
function _ZN7testing8internal12UnitTestImpl23ListTestsMatchingFilterEv called 0 returned 0% blocks executed 0%
    #####: 6162:void UnitTestImpl::ListTestsMatchingFilter() {
        -: 6163:  // Print at most this many characters for each type/value parameter.
    #####: 6164:  const int kMaxParamLength = 250;
        -: 6165:
    #####: 6166:  for (auto* test_suite : test_suites_) {
    %%%%%: 6166-block  0
call    0 never executed
call    1 never executed
    %%%%%: 6166-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 6166-block  2
call    5 never executed
    %%%%%: 6166-block  3
call    6 never executed
    #####: 6167:    bool printed_test_suite_name = false;
        -: 6168:
    #####: 6169:    for (size_t j = 0; j < test_suite->test_info_list().size(); j++) {
    %%%%%: 6169-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6169-block  1
    #####: 6170:      const TestInfo* const test_info = test_suite->test_info_list()[j];
    %%%%%: 6170-block  0
call    0 never executed
call    1 never executed
    #####: 6171:      if (test_info->matches_filter_) {
branch  0 never executed
branch  1 never executed
    #####: 6172:        if (!printed_test_suite_name) {
    %%%%%: 6172-block  0
branch  0 never executed
branch  1 never executed
    #####: 6173:          printed_test_suite_name = true;
    #####: 6174:          printf("%s.", test_suite->name());
    %%%%%: 6174-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 6175:          if (test_suite->type_param() != nullptr) {
    %%%%%: 6175-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6176:            printf("  # %s = ", kTypeParamLabel);
    %%%%%: 6176-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 6177:            // We print the type parameter on a single line to make
        -: 6178:            // the output easy to parse by a program.
    #####: 6179:            PrintOnOneLine(test_suite->type_param(), kMaxParamLength);
    %%%%%: 6179-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 6180:          }
    #####: 6181:          printf("\n");
    %%%%%: 6181-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 6182:        }
    #####: 6183:        printf("  %s", test_info->name());
    %%%%%: 6183-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 6184:        if (test_info->value_param() != nullptr) {
    %%%%%: 6184-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6185:          printf("  # %s = ", kValueParamLabel);
    %%%%%: 6185-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 6186:          // We print the value parameter on a single line to make the
        -: 6187:          // output easy to parse by a program.
    #####: 6188:          PrintOnOneLine(test_info->value_param(), kMaxParamLength);
    %%%%%: 6188-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 6189:        }
    #####: 6190:        printf("\n");
    %%%%%: 6190-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 6191:      }
        -: 6192:    }
        -: 6193:  }
    #####: 6194:  fflush(stdout);
    %%%%%: 6194-block  0
call    0 never executed
call    1 never executed
    #####: 6195:  const std::string& output_format = UnitTestOptions::GetOutputFormat();
call    0 never executed
    %%%%%: 6195-block  0
call    1 never executed
    $$$$$: 6195-block  1
call    2 never executed
    #####: 6196:  if (output_format == "xml" || output_format == "json") {
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6196-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6196-block  1
    %%%%%: 6196-block  2
    %%%%%: 6196-block  3
branch  6 never executed
branch  7 never executed
    #####: 6197:    FILE* fileout = OpenFileForWriting(
    %%%%%: 6197-block  0
call    0 never executed
    %%%%%: 6197-block  1
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 6197-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 6197-block  3
call    8 never executed
    $$$$$: 6197-block  4
call    9 never executed
    $$$$$: 6197-block  5
    $$$$$: 6197-block  6
call   10 never executed
    $$$$$: 6197-block  7
    #####: 6198:        UnitTestOptions::GetAbsolutePathToOutputFile().c_str());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    $$$$$: 6198-block  0
call    5 never executed
    $$$$$: 6198-block  1
    #####: 6199:    std::stringstream stream;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6199-block  0
call    4 never executed
    $$$$$: 6199-block  1
call    5 never executed
    #####: 6200:    if (output_format == "xml") {
    %%%%%: 6200-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6201:      XmlUnitTestResultPrinter(
    %%%%%: 6201-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6201-block  1
call    4 never executed
    $$$$$: 6201-block  2
call    5 never executed
    $$$$$: 6201-block  3
    #####: 6202:          UnitTestOptions::GetAbsolutePathToOutputFile().c_str())
    %%%%%: 6202-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$: 6202-block  1
call    4 never executed
    $$$$$: 6202-block  2
    #####: 6203:          .PrintXmlTestsList(&stream, test_suites_);
    %%%%%: 6203-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6204:    } else if (output_format == "json") {
    %%%%%: 6204-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6205:      JsonUnitTestResultPrinter(
    %%%%%: 6205-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6205-block  1
call    4 never executed
    $$$$$: 6205-block  2
call    5 never executed
    $$$$$: 6205-block  3
    #####: 6206:          UnitTestOptions::GetAbsolutePathToOutputFile().c_str())
    %%%%%: 6206-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$: 6206-block  1
call    4 never executed
    $$$$$: 6206-block  2
    #####: 6207:          .PrintJsonTestList(&stream, test_suites_);
    %%%%%: 6207-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 6208:    }
    #####: 6209:    fprintf(fileout, "%s", StringStreamToString(&stream).c_str());
    %%%%%: 6209-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6209-block  1
call    3 never executed
call    4 never executed
call    5 never executed
    #####: 6210:    fclose(fileout);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 6211:  }
    #####: 6212:}
        -: 6213:
        -: 6214:// Sets the OS stack trace getter.
        -: 6215://
        -: 6216:// Does nothing if the input and the current OS stack trace getter are
        -: 6217:// the same; otherwise, deletes the old getter and makes the input the
        -: 6218:// current getter.
function _ZN7testing8internal12UnitTestImpl25set_os_stack_trace_getterEPNS0_27OsStackTraceGetterInterfaceE called 0 returned 0% blocks executed 0%
    #####: 6219:void UnitTestImpl::set_os_stack_trace_getter(
        -: 6220:    OsStackTraceGetterInterface* getter) {
    #####: 6221:  if (os_stack_trace_getter_ != getter) {
    %%%%%: 6221-block  0
branch  0 never executed
branch  1 never executed
    #####: 6222:    delete os_stack_trace_getter_;
    %%%%%: 6222-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 6222-block  1
call    2 never executed
    #####: 6223:    os_stack_trace_getter_ = getter;
    %%%%%: 6223-block  0
        -: 6224:  }
    #####: 6225:}
        -: 6226:
        -: 6227:// Returns the current OS stack trace getter if it is not NULL;
        -: 6228:// otherwise, creates an OsStackTraceGetter, makes it the current
        -: 6229:// getter, and returns it.
function _ZN7testing8internal12UnitTestImpl21os_stack_trace_getterEv called 161 returned 100% blocks executed 100%
      161: 6230:OsStackTraceGetterInterface* UnitTestImpl::os_stack_trace_getter() {
      161: 6231:  if (os_stack_trace_getter_ == nullptr) {
      161: 6231-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 160
        -: 6232:#ifdef GTEST_OS_STACK_TRACE_GETTER_
        -: 6233:    os_stack_trace_getter_ = new GTEST_OS_STACK_TRACE_GETTER_;
        -: 6234:#else
        1: 6235:    os_stack_trace_getter_ = new OsStackTraceGetter;
        1: 6235-block  0
call    0 returned 1
call    1 returned 1
        -: 6236:#endif  // GTEST_OS_STACK_TRACE_GETTER_
        -: 6237:  }
        -: 6238:
      161: 6239:  return os_stack_trace_getter_;
      161: 6239-block  0
        -: 6240:}
        -: 6241:
        -: 6242:// Returns the most specific TestResult currently running.
function _ZN7testing8internal12UnitTestImpl19current_test_resultEv called 94 returned 100% blocks executed 83%
       94: 6243:TestResult* UnitTestImpl::current_test_result() {
       94: 6244:  if (current_test_info_ != nullptr) {
       94: 6244-block  0
branch  0 taken 92 (fallthrough)
branch  1 taken 2
       92: 6245:    return &current_test_info_->result_;
       92: 6245-block  0
        -: 6246:  }
        2: 6247:  if (current_test_suite_ != nullptr) {
        2: 6247-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####: 6248:    return &current_test_suite_->ad_hoc_test_result_;
    %%%%%: 6248-block  0
        -: 6249:  }
        2: 6250:  return &ad_hoc_test_result_;
        2: 6250-block  0
        -: 6251:}
        -: 6252:
        -: 6253:// Shuffles all test suites, and the tests within each test suite,
        -: 6254:// making sure that death tests are still run first.
function _ZN7testing8internal12UnitTestImpl12ShuffleTestsEv called 0 returned 0% blocks executed 0%
    #####: 6255:void UnitTestImpl::ShuffleTests() {
        -: 6256:  // Shuffles the death test suites.
    #####: 6257:  ShuffleRange(random(), 0, last_death_test_suite_ + 1, &test_suite_indices_);
    %%%%%: 6257-block  0
call    0 never executed
call    1 never executed
        -: 6258:
        -: 6259:  // Shuffles the non-death test suites.
    #####: 6260:  ShuffleRange(random(), last_death_test_suite_ + 1,
call    0 never executed
call    1 never executed
    #####: 6261:               static_cast<int>(test_suites_.size()), &test_suite_indices_);
call    0 never executed
        -: 6262:
        -: 6263:  // Shuffles the tests inside each test suite.
    #####: 6264:  for (auto& test_suite : test_suites_) {
call    0 never executed
call    1 never executed
    %%%%%: 6264-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 6264-block  1
call    5 never executed
    %%%%%: 6264-block  2
call    6 never executed
    #####: 6265:    test_suite->ShuffleTests(random());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 6266:  }
    #####: 6267:}
    %%%%%: 6267-block  0
        -: 6268:
        -: 6269:// Restores the test suites and tests to their order before the first shuffle.
function _ZN7testing8internal12UnitTestImpl14UnshuffleTestsEv called 1 returned 100% blocks executed 100%
        1: 6270:void UnitTestImpl::UnshuffleTests() {
       24: 6271:  for (size_t i = 0; i < test_suites_.size(); i++) {
        1: 6271-block  0
       24: 6271-block  1
call    0 returned 24
branch  1 taken 23 (fallthrough)
branch  2 taken 1
        -: 6272:    // Unshuffles the tests in each test suite.
       23: 6273:    test_suites_[i]->UnshuffleTests();
       23: 6273-block  0
call    0 returned 23
call    1 returned 23
        -: 6274:    // Resets the index of each test suite.
       23: 6275:    test_suite_indices_[i] = static_cast<int>(i);
call    0 returned 23
        -: 6276:  }
        1: 6277:}
        -: 6278:
        -: 6279:// Returns the current OS stack trace as an std::string.
        -: 6280://
        -: 6281:// The maximum number of stack frames to be included is specified by
        -: 6282:// the gtest_stack_trace_depth flag.  The skip_count parameter
        -: 6283:// specifies the number of top frames to be skipped, which doesn't
        -: 6284:// count against the number of frames to be included.
        -: 6285://
        -: 6286:// For example, if Foo() calls Bar(), which in turn calls
        -: 6287:// GetCurrentOsStackTraceExceptTop(..., 1), Foo() will be included in
        -: 6288:// the trace but Bar() and GetCurrentOsStackTraceExceptTop() won't.
function _ZN7testing8internal31GetCurrentOsStackTraceExceptTopB5cxx11EPNS_8UnitTestEi called 0 returned 0% blocks executed 0%
    #####: 6289:std::string GetCurrentOsStackTraceExceptTop(UnitTest* /*unit_test*/,
        -: 6290:                                            int skip_count) {
        -: 6291:  // We pass skip_count + 1 to skip this wrapper function in addition
        -: 6292:  // to what the user really wants to skip.
    #####: 6293:  return GetUnitTestImpl()->CurrentOsStackTraceExceptTop(skip_count + 1);
    %%%%%: 6293-block  0
call    0 never executed
call    1 never executed
        -: 6294:}
        -: 6295:
        -: 6296:// Used by the GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_ macro to
        -: 6297:// suppress unreachable code warnings.
        -: 6298:namespace {
        -: 6299:class ClassUniqueToAlwaysTrue {};
        -: 6300:}
        -: 6301:
function _ZN7testing8internal6IsTrueEb called 47 returned 100% blocks executed 100%
       47: 6302:bool IsTrue(bool condition) { return condition; }
       47: 6302-block  0
        -: 6303:
function _ZN7testing8internal10AlwaysTrueEv called 0 returned 0% blocks executed 0%
    #####: 6304:bool AlwaysTrue() {
        -: 6305:#if GTEST_HAS_EXCEPTIONS
        -: 6306:  // This condition is always false so AlwaysTrue() never actually throws,
        -: 6307:  // but it makes the compiler think that it may throw.
    #####: 6308:  if (IsTrue(false))
    %%%%%: 6308-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6309:    throw ClassUniqueToAlwaysTrue();
    %%%%%: 6309-block  0
call    0 never executed
call    1 never executed
        -: 6310:#endif  // GTEST_HAS_EXCEPTIONS
    #####: 6311:  return true;
    %%%%%: 6311-block  0
        -: 6312:}
        -: 6313:
        -: 6314:// If *pstr starts with the given prefix, modifies *pstr to be right
        -: 6315:// past the prefix and returns true; otherwise leaves *pstr unchanged
        -: 6316:// and returns false.  None of pstr, *pstr, and prefix can be NULL.
function _ZN7testing8internal10SkipPrefixEPKcPS2_ called 0 returned 0% blocks executed 0%
    #####: 6317:bool SkipPrefix(const char* prefix, const char** pstr) {
    #####: 6318:  const size_t prefix_len = strlen(prefix);
    #####: 6319:  if (strncmp(*pstr, prefix, prefix_len) == 0) {
    %%%%%: 6319-block  0
branch  0 never executed
branch  1 never executed
    #####: 6320:    *pstr += prefix_len;
    #####: 6321:    return true;
    %%%%%: 6321-block  0
        -: 6322:  }
    #####: 6323:  return false;
    %%%%%: 6323-block  0
        -: 6324:}
        -: 6325:
        -: 6326:// Parses a string as a command line flag.  The string should have
        -: 6327:// the format "--flag=value".  When def_optional is true, the "=value"
        -: 6328:// part can be omitted.
        -: 6329://
        -: 6330:// Returns the value of the flag, or NULL if the parsing failed.
function _ZN7testing8internalL14ParseFlagValueEPKcS2_b called 4 returned 100% blocks executed 61%
        4: 6331:static const char* ParseFlagValue(const char* str, const char* flag_name,
        -: 6332:                                  bool def_optional) {
        -: 6333:  // str and flag must not be NULL.
       4*: 6334:  if (str == nullptr || flag_name == nullptr) return nullptr;
        4: 6334-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4: 6334-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 4
    %%%%%: 6334-block  2
        -: 6335:
        -: 6336:  // The flag must start with "--" followed by GTEST_FLAG_PREFIX_.
        -: 6337:  const std::string flag_str =
       12: 6338:      std::string("--") + GTEST_FLAG_PREFIX_ + flag_name;
        4: 6338-block  0
call    0 returned 4
call    1 returned 4
branch  2 taken 4 (fallthrough)
branch  3 taken 0 (throw)
        4: 6338-block  1
call    4 returned 4
branch  5 taken 4 (fallthrough)
branch  6 taken 0 (throw)
        4: 6338-block  2
call    7 returned 4
branch  8 taken 4 (fallthrough)
branch  9 taken 0 (throw)
call   10 returned 4
call   11 returned 4
        4: 6338-block  3
call   12 returned 4
    $$$$$: 6338-block  4
    $$$$$: 6338-block  5
    $$$$$: 6338-block  6
        4: 6339:  const size_t flag_len = flag_str.length();
call    0 returned 4
        4: 6340:  if (strncmp(str, flag_str.c_str(), flag_len) != 0) return nullptr;
call    0 returned 4
branch  1 taken 3 (fallthrough)
branch  2 taken 1
        3: 6340-block  0
        -: 6341:
        -: 6342:  // Skips the flag name.
        1: 6343:  const char* flag_end = str + flag_len;
        -: 6344:
        -: 6345:  // When def_optional is true, it's OK to not have a "=value" part.
       1*: 6346:  if (def_optional && (flag_end[0] == '\0')) {
        1: 6346-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 6346-block  1
branch  2 never executed
branch  3 never executed
    #####: 6347:    return flag_end;
    %%%%%: 6347-block  0
        -: 6348:  }
        -: 6349:
        -: 6350:  // If def_optional is true and there are more characters after the
        -: 6351:  // flag name, or if def_optional is false, there must be a '=' after
        -: 6352:  // the flag name.
       1*: 6353:  if (flag_end[0] != '=') return nullptr;
        1: 6353-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 6353-block  1
        -: 6354:
        -: 6355:  // Returns the string after "=".
        1: 6356:  return flag_end + 1;
        1: 6356-block  0
        -: 6357:}
        -: 6358:
        -: 6359:// Parses a string for a bool flag, in the form of either
        -: 6360:// "--flag=value" or "--flag".
        -: 6361://
        -: 6362:// In the former case, the value is taken as true as long as it does
        -: 6363:// not start with '0', 'f', or 'F'.
        -: 6364://
        -: 6365:// In the latter case, the value is taken as true.
        -: 6366://
        -: 6367:// On success, stores the value of the flag in *value, and returns
        -: 6368:// true.  On failure, returns false without changing *value.
function _ZN7testing8internalL9ParseFlagEPKcS2_Pb called 3 returned 100% blocks executed 40%
        3: 6369:static bool ParseFlag(const char* str, const char* flag_name, bool* value) {
        -: 6370:  // Gets the value of the flag as a string.
        3: 6371:  const char* const value_str = ParseFlagValue(str, flag_name, true);
        3: 6371-block  0
call    0 returned 3
        -: 6372:
        -: 6373:  // Aborts if the parsing failed.
        3: 6374:  if (value_str == nullptr) return false;
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        3: 6374-block  0
        -: 6375:
        -: 6376:  // Converts the string value to a bool.
    #####: 6377:  *value = !(*value_str == '0' || *value_str == 'f' || *value_str == 'F');
    %%%%%: 6377-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 6377-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 6377-block  2
branch  4 never executed
branch  5 never executed
    %%%%%: 6377-block  3
    %%%%%: 6377-block  4
    #####: 6378:  return true;
    %%%%%: 6378-block  0
        -: 6379:}
        -: 6380:
        -: 6381:// Parses a string for an int32_t flag, in the form of "--flag=value".
        -: 6382://
        -: 6383:// On success, stores the value of the flag in *value, and returns
        -: 6384:// true.  On failure, returns false without changing *value.
function _ZN7testing8internal9ParseFlagEPKcS2_Pi called 0 returned 0% blocks executed 0%
    #####: 6385:bool ParseFlag(const char* str, const char* flag_name, int32_t* value) {
        -: 6386:  // Gets the value of the flag as a string.
    #####: 6387:  const char* const value_str = ParseFlagValue(str, flag_name, false);
    %%%%%: 6387-block  0
call    0 never executed
        -: 6388:
        -: 6389:  // Aborts if the parsing failed.
    #####: 6390:  if (value_str == nullptr) return false;
branch  0 never executed
branch  1 never executed
    %%%%%: 6390-block  0
        -: 6391:
        -: 6392:  // Sets *value to the value of the flag.
    #####: 6393:  return ParseInt32(Message() << "The value of flag --" << flag_name, value_str,
    %%%%%: 6393-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6393-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 6393-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 6393-block  3
call   10 never executed
    $$$$$: 6393-block  4
call   11 never executed
    #####: 6394:                    value);
    %%%%%: 6394-block  0
        -: 6395:}
        -: 6396:
        -: 6397:// Parses a string for a string flag, in the form of "--flag=value".
        -: 6398://
        -: 6399:// On success, stores the value of the flag in *value, and returns
        -: 6400:// true.  On failure, returns false without changing *value.
        -: 6401:template <typename String>
function _ZN7testing8internalL9ParseFlagINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbPKcS9_PT_ called 1 returned 100% blocks executed 83%
        1: 6402:static bool ParseFlag(const char* str, const char* flag_name, String* value) {
        -: 6403:  // Gets the value of the flag as a string.
        1: 6404:  const char* const value_str = ParseFlagValue(str, flag_name, false);
        1: 6404-block  0
call    0 returned 1
        -: 6405:
        -: 6406:  // Aborts if the parsing failed.
       1*: 6407:  if (value_str == nullptr) return false;
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 6407-block  0
        -: 6408:
        -: 6409:  // Sets *value to the value of the flag.
        1: 6410:  *value = value_str;
        1: 6410-block  0
call    0 returned 1
        1: 6411:  return true;
        -: 6412:}
        -: 6413:
        -: 6414:// Determines whether a string has a prefix that Google Test uses for its
        -: 6415:// flags, i.e., starts with GTEST_FLAG_PREFIX_ or GTEST_FLAG_PREFIX_DASH_.
        -: 6416:// If Google Test detects that a command line flag has its prefix but is not
        -: 6417:// recognized, it will print its help message. Flags starting with
        -: 6418:// GTEST_INTERNAL_PREFIX_ followed by "internal_" are considered Google Test
        -: 6419:// internal flags and do not trigger the help message.
function _ZN7testing8internalL23HasGoogleTestFlagPrefixEPKc called 0 returned 0% blocks executed 0%
    #####: 6420:static bool HasGoogleTestFlagPrefix(const char* str) {
    #####: 6421:  return (SkipPrefix("--", &str) ||
    %%%%%: 6421-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6422:          SkipPrefix("-", &str) ||
    %%%%%: 6422-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6423:          SkipPrefix("/", &str)) &&
    %%%%%: 6423-block  0
call    0 never executed
    #####: 6424:         !SkipPrefix(GTEST_FLAG_PREFIX_ "internal_", &str) &&
branch  0 never executed
branch  1 never executed
    %%%%%: 6424-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 6424-block  1
    %%%%%: 6424-block  2
    #####: 6425:         (SkipPrefix(GTEST_FLAG_PREFIX_, &str) ||
    %%%%%: 6425-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6426:          SkipPrefix(GTEST_FLAG_PREFIX_DASH_, &str));
    %%%%%: 6426-block  0
call    0 never executed
    %%%%%: 6426-block  1
        -: 6427:}
        -: 6428:
        -: 6429:// Prints a string containing code-encoded text.  The following escape
        -: 6430:// sequences can be used in the string to control the text color:
        -: 6431://
        -: 6432://   @@    prints a single '@' character.
        -: 6433://   @R    changes the color to red.
        -: 6434://   @G    changes the color to green.
        -: 6435://   @Y    changes the color to yellow.
        -: 6436://   @D    changes to the default terminal text color.
        -: 6437://
function _ZN7testing8internalL17PrintColorEncodedEPKc called 0 returned 0% blocks executed 0%
    #####: 6438:static void PrintColorEncoded(const char* str) {
    #####: 6439:  GTestColor color = GTestColor::kDefault;  // The current color.
    %%%%%: 6439-block  0
        -: 6440:
        -: 6441:  // Conceptually, we split the string into segments divided by escape
        -: 6442:  // sequences.  Then we print one segment at a time.  At the end of
        -: 6443:  // each iteration, the str pointer advances to the beginning of the
        -: 6444:  // next segment.
        -: 6445:  for (;;) {
    #####: 6446:    const char* p = strchr(str, '@');
    #####: 6447:    if (p == nullptr) {
    %%%%%: 6447-block  0
branch  0 never executed
branch  1 never executed
    #####: 6448:      ColoredPrintf(color, "%s", str);
    %%%%%: 6448-block  0
call    0 never executed
    #####: 6449:      return;
    %%%%%: 6449-block  0
        -: 6450:    }
        -: 6451:
    #####: 6452:    ColoredPrintf(color, "%s", std::string(str, p).c_str());
    %%%%%: 6452-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6452-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 6452-block  2
call    8 never executed
call    9 never executed
    $$$$$: 6452-block  3
call   10 never executed
    $$$$$: 6452-block  4
    $$$$$: 6452-block  5
call   11 never executed
        -: 6453:
    #####: 6454:    const char ch = p[1];
    #####: 6455:    str = p + 2;
    #####: 6456:    if (ch == '@') {
branch  0 never executed
branch  1 never executed
    #####: 6457:      ColoredPrintf(color, "@");
    %%%%%: 6457-block  0
call    0 never executed
    #####: 6458:    } else if (ch == 'D') {
    %%%%%: 6458-block  0
branch  0 never executed
branch  1 never executed
    #####: 6459:      color = GTestColor::kDefault;
    %%%%%: 6459-block  0
    #####: 6460:    } else if (ch == 'R') {
    %%%%%: 6460-block  0
branch  0 never executed
branch  1 never executed
    #####: 6461:      color = GTestColor::kRed;
    %%%%%: 6461-block  0
    #####: 6462:    } else if (ch == 'G') {
    %%%%%: 6462-block  0
branch  0 never executed
branch  1 never executed
    #####: 6463:      color = GTestColor::kGreen;
    %%%%%: 6463-block  0
    #####: 6464:    } else if (ch == 'Y') {
    %%%%%: 6464-block  0
branch  0 never executed
branch  1 never executed
    #####: 6465:      color = GTestColor::kYellow;
    %%%%%: 6465-block  0
        -: 6466:    } else {
    #####: 6467:      --str;
    %%%%%: 6467-block  0
        -: 6468:    }
    #####: 6469:  }
    %%%%%: 6469-block  0
        -: 6470:}
        -: 6471:
        -: 6472:static const char kColorEncodedHelpMessage[] =
        -: 6473:    "This program contains tests written using " GTEST_NAME_
        -: 6474:    ". You can use the\n"
        -: 6475:    "following command line flags to control its behavior:\n"
        -: 6476:    "\n"
        -: 6477:    "Test Selection:\n"
        -: 6478:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6479:    "list_tests@D\n"
        -: 6480:    "      List the names of all tests instead of running them. The name of\n"
        -: 6481:    "      TEST(Foo, Bar) is \"Foo.Bar\".\n"
        -: 6482:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6483:    "filter=@YPOSITIVE_PATTERNS"
        -: 6484:    "[@G-@YNEGATIVE_PATTERNS]@D\n"
        -: 6485:    "      Run only the tests whose name matches one of the positive patterns "
        -: 6486:    "but\n"
        -: 6487:    "      none of the negative patterns. '?' matches any single character; "
        -: 6488:    "'*'\n"
        -: 6489:    "      matches any substring; ':' separates two patterns.\n"
        -: 6490:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6491:    "also_run_disabled_tests@D\n"
        -: 6492:    "      Run all disabled tests too.\n"
        -: 6493:    "\n"
        -: 6494:    "Test Execution:\n"
        -: 6495:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6496:    "repeat=@Y[COUNT]@D\n"
        -: 6497:    "      Run the tests repeatedly; use a negative count to repeat forever.\n"
        -: 6498:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6499:    "shuffle@D\n"
        -: 6500:    "      Randomize tests' orders on every iteration.\n"
        -: 6501:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6502:    "random_seed=@Y[NUMBER]@D\n"
        -: 6503:    "      Random number seed to use for shuffling test orders (between 1 and\n"
        -: 6504:    "      99999, or 0 to use a seed based on the current time).\n"
        -: 6505:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6506:    "recreate_environments_when_repeating@D\n"
        -: 6507:    "      Sets up and tears down the global test environment on each repeat\n"
        -: 6508:    "      of the test.\n"
        -: 6509:    "\n"
        -: 6510:    "Test Output:\n"
        -: 6511:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6512:    "color=@Y(@Gyes@Y|@Gno@Y|@Gauto@Y)@D\n"
        -: 6513:    "      Enable/disable colored output. The default is @Gauto@D.\n"
        -: 6514:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6515:    "brief=1@D\n"
        -: 6516:    "      Only print test failures.\n"
        -: 6517:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6518:    "print_time=0@D\n"
        -: 6519:    "      Don't print the elapsed time of each test.\n"
        -: 6520:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6521:    "output=@Y(@Gjson@Y|@Gxml@Y)[@G:@YDIRECTORY_PATH@G" GTEST_PATH_SEP_
        -: 6522:    "@Y|@G:@YFILE_PATH]@D\n"
        -: 6523:    "      Generate a JSON or XML report in the given directory or with the "
        -: 6524:    "given\n"
        -: 6525:    "      file name. @YFILE_PATH@D defaults to @Gtest_detail.xml@D.\n"
        -: 6526:# if GTEST_CAN_STREAM_RESULTS_
        -: 6527:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6528:    "stream_result_to=@YHOST@G:@YPORT@D\n"
        -: 6529:    "      Stream test results to the given server.\n"
        -: 6530:# endif  // GTEST_CAN_STREAM_RESULTS_
        -: 6531:    "\n"
        -: 6532:    "Assertion Behavior:\n"
        -: 6533:# if GTEST_HAS_DEATH_TEST && !GTEST_OS_WINDOWS
        -: 6534:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6535:    "death_test_style=@Y(@Gfast@Y|@Gthreadsafe@Y)@D\n"
        -: 6536:    "      Set the default death test style.\n"
        -: 6537:# endif  // GTEST_HAS_DEATH_TEST && !GTEST_OS_WINDOWS
        -: 6538:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6539:    "break_on_failure@D\n"
        -: 6540:    "      Turn assertion failures into debugger break-points.\n"
        -: 6541:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6542:    "throw_on_failure@D\n"
        -: 6543:    "      Turn assertion failures into C++ exceptions for use by an external\n"
        -: 6544:    "      test framework.\n"
        -: 6545:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6546:    "catch_exceptions=0@D\n"
        -: 6547:    "      Do not report exceptions as test failures. Instead, allow them\n"
        -: 6548:    "      to crash the program or throw a pop-up (on Windows).\n"
        -: 6549:    "\n"
        -: 6550:    "Except for @G--" GTEST_FLAG_PREFIX_
        -: 6551:    "list_tests@D, you can alternatively set "
        -: 6552:    "the corresponding\n"
        -: 6553:    "environment variable of a flag (all letters in upper-case). For example, "
        -: 6554:    "to\n"
        -: 6555:    "disable colored text output, you can either specify "
        -: 6556:    "@G--" GTEST_FLAG_PREFIX_
        -: 6557:    "color=no@D or set\n"
        -: 6558:    "the @G" GTEST_FLAG_PREFIX_UPPER_
        -: 6559:    "COLOR@D environment variable to @Gno@D.\n"
        -: 6560:    "\n"
        -: 6561:    "For more information, please read the " GTEST_NAME_
        -: 6562:    " documentation at\n"
        -: 6563:    "@G" GTEST_PROJECT_URL_ "@D. If you find a bug in " GTEST_NAME_
        -: 6564:    "\n"
        -: 6565:    "(not one in your own code or tests), please report it to\n"
        -: 6566:    "@G<" GTEST_DEV_EMAIL_ ">@D.\n";
        -: 6567:
function _ZN7testing8internalL19ParseGoogleTestFlagEPKc called 1 returned 100% blocks executed 12%
        1: 6568:static bool ParseGoogleTestFlag(const char* const arg) {
        -: 6569:#define GTEST_INTERNAL_PARSE_FLAG(flag_name)  \
        -: 6570:  do {                                        \
        -: 6571:    auto value = GTEST_FLAG_GET(flag_name);   \
        -: 6572:    if (ParseFlag(arg, #flag_name, &value)) { \
        -: 6573:      GTEST_FLAG_SET(flag_name, value);       \
        -: 6574:      return true;                            \
        -: 6575:    }                                         \
        -: 6576:  } while (false)
        -: 6577:
       1*: 6578:  GTEST_INTERNAL_PARSE_FLAG(also_run_disabled_tests);
        1: 6578-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 6578-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%: 6578-block  2
       1*: 6579:  GTEST_INTERNAL_PARSE_FLAG(break_on_failure);
        1: 6579-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 6579-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%: 6579-block  2
       1*: 6580:  GTEST_INTERNAL_PARSE_FLAG(catch_exceptions);
        1: 6580-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 6580-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%: 6580-block  2
        1: 6581:  GTEST_INTERNAL_PARSE_FLAG(color);
        1: 6581-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 6581-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 6581-block  2
branch  6 taken 1 (fallthrough)
branch  7 taken 0
        1: 6581-block  3
call    8 returned 1
branch  9 taken 1 (fallthrough)
branch 10 taken 0 (throw)
        1: 6581-block  4
    $$$$$: 6581-block  5
call   11 never executed
    #####: 6582:  GTEST_INTERNAL_PARSE_FLAG(death_test_style);
    %%%%%: 6582-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6582-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6582-block  2
branch  6 never executed
branch  7 never executed
    %%%%%: 6582-block  3
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 6582-block  4
    $$$$$: 6582-block  5
call   11 never executed
    #####: 6583:  GTEST_INTERNAL_PARSE_FLAG(death_test_use_fork);
    %%%%%: 6583-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6583-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 6583-block  2
    #####: 6584:  GTEST_INTERNAL_PARSE_FLAG(fail_fast);
    %%%%%: 6584-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6584-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 6584-block  2
    #####: 6585:  GTEST_INTERNAL_PARSE_FLAG(filter);
    %%%%%: 6585-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6585-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6585-block  2
branch  6 never executed
branch  7 never executed
    %%%%%: 6585-block  3
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 6585-block  4
    $$$$$: 6585-block  5
call   11 never executed
    #####: 6586:  GTEST_INTERNAL_PARSE_FLAG(internal_run_death_test);
    %%%%%: 6586-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6586-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6586-block  2
branch  6 never executed
branch  7 never executed
    %%%%%: 6586-block  3
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 6586-block  4
    $$$$$: 6586-block  5
call   11 never executed
    #####: 6587:  GTEST_INTERNAL_PARSE_FLAG(list_tests);
    %%%%%: 6587-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6587-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 6587-block  2
    #####: 6588:  GTEST_INTERNAL_PARSE_FLAG(output);
    %%%%%: 6588-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6588-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6588-block  2
branch  6 never executed
branch  7 never executed
    %%%%%: 6588-block  3
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 6588-block  4
    $$$$$: 6588-block  5
call   11 never executed
    #####: 6589:  GTEST_INTERNAL_PARSE_FLAG(brief);
    %%%%%: 6589-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6589-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 6589-block  2
    #####: 6590:  GTEST_INTERNAL_PARSE_FLAG(print_time);
    %%%%%: 6590-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6590-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 6590-block  2
    #####: 6591:  GTEST_INTERNAL_PARSE_FLAG(print_utf8);
    %%%%%: 6591-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6591-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 6591-block  2
    #####: 6592:  GTEST_INTERNAL_PARSE_FLAG(random_seed);
    %%%%%: 6592-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6592-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 6592-block  2
    #####: 6593:  GTEST_INTERNAL_PARSE_FLAG(repeat);
    %%%%%: 6593-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6593-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 6593-block  2
    #####: 6594:  GTEST_INTERNAL_PARSE_FLAG(recreate_environments_when_repeating);
    %%%%%: 6594-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6594-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 6594-block  2
    #####: 6595:  GTEST_INTERNAL_PARSE_FLAG(shuffle);
    %%%%%: 6595-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6595-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 6595-block  2
    #####: 6596:  GTEST_INTERNAL_PARSE_FLAG(stack_trace_depth);
    %%%%%: 6596-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6596-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 6596-block  2
    #####: 6597:  GTEST_INTERNAL_PARSE_FLAG(stream_result_to);
    %%%%%: 6597-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6597-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6597-block  2
branch  6 never executed
branch  7 never executed
    %%%%%: 6597-block  3
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 6597-block  4
    $$$$$: 6597-block  5
call   11 never executed
    #####: 6598:  GTEST_INTERNAL_PARSE_FLAG(throw_on_failure);
    %%%%%: 6598-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6598-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 6598-block  2
    #####: 6599:  return false;
    %%%%%: 6599-block  0
        -: 6600:}
        -: 6601:
        -: 6602:#if GTEST_USE_OWN_FLAGFILE_FLAG_
function _ZN7testing8internalL17LoadFlagsFromFileERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 6603:static void LoadFlagsFromFile(const std::string& path) {
    #####: 6604:  FILE* flagfile = posix::FOpen(path.c_str(), "r");
    %%%%%: 6604-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 6605:  if (!flagfile) {
    %%%%%: 6605-block  0
branch  0 never executed
branch  1 never executed
    #####: 6606:    GTEST_LOG_(FATAL) << "Unable to open file \"" << GTEST_FLAG_GET(flagfile)
    %%%%%: 6606-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6606-block  1
call    3 never executed
    %%%%%: 6606-block  2
call    4 never executed
    $$$$$: 6606-block  3
call    5 never executed
    $$$$$: 6606-block  4
    #####: 6607:                      << "\"";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6607-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6607-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 6608:  }
    #####: 6609:  std::string contents(ReadEntireFile(flagfile));
    %%%%%: 6609-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$: 6609-block  1
call    4 never executed
    #####: 6610:  posix::FClose(flagfile);
    %%%%%: 6610-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6611:  std::vector<std::string> lines;
    %%%%%: 6611-block  0
call    0 never executed
    %%%%%: 6611-block  1
call    1 never executed
    $$$$$: 6611-block  2
call    2 never executed
    #####: 6612:  SplitString(contents, '\n', &lines);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6613:  for (size_t i = 0; i < lines.size(); ++i) {
    %%%%%: 6613-block  0
    %%%%%: 6613-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6613-block  2
    #####: 6614:    if (lines[i].empty())
    %%%%%: 6614-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 6615:      continue;
    %%%%%: 6615-block  0
    #####: 6616:    if (!ParseGoogleTestFlag(lines[i].c_str()))
    %%%%%: 6616-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 6616-block  1
branch  5 never executed
branch  6 never executed
    #####: 6617:      g_help_flag = true;
    %%%%%: 6617-block  0
        -: 6618:  }
    #####: 6619:}
        -: 6620:#endif  // GTEST_USE_OWN_FLAGFILE_FLAG_
        -: 6621:
        -: 6622:// Parses the command line for Google Test flags, without initializing
        -: 6623:// other parts of Google Test.  The type parameter CharType can be
        -: 6624:// instantiated to either char or wchar_t.
        -: 6625:template <typename CharType>
       1*: 6626:void ParseGoogleTestFlagsOnlyImpl(int* argc, CharType** argv) {
       2*: 6627:  std::string flagfile_value;
       2*: 6628:  for (int i = 1; i < *argc; i++) {
       2*: 6629:    const std::string arg_string = StreamableToString(argv[i]);
       1*: 6630:    const char* const arg = arg_string.c_str();
        -: 6631:
        -: 6632:    using internal::ParseFlag;
        -: 6633:
       1*: 6634:    bool remove_flag = false;
       1*: 6635:    if (ParseGoogleTestFlag(arg)) {
       1*: 6636:      remove_flag = true;
        -: 6637:#if GTEST_USE_OWN_FLAGFILE_FLAG_
    #####: 6638:    } else if (ParseFlag(arg, "flagfile", &flagfile_value)) {
    #####: 6639:      GTEST_FLAG_SET(flagfile, flagfile_value);
    #####: 6640:      LoadFlagsFromFile(flagfile_value);
    #####: 6641:      remove_flag = true;
        -: 6642:#endif  // GTEST_USE_OWN_FLAGFILE_FLAG_
    #####: 6643:    } else if (arg_string == "--help" || arg_string == "-h" ||
    #####: 6644:               arg_string == "-?" || arg_string == "/?" ||
    #####: 6645:               HasGoogleTestFlagPrefix(arg)) {
        -: 6646:      // Both help flag and unrecognized Google Test flags (excluding
        -: 6647:      // internal ones) trigger help display.
    #####: 6648:      g_help_flag = true;
        -: 6649:    }
        -: 6650:
       1*: 6651:    if (remove_flag) {
        -: 6652:      // Shift the remainder of the argv list left by one.  Note
        -: 6653:      // that argv has (*argc + 1) elements, the last one always being
        -: 6654:      // NULL.  The following loop moves the trailing NULL element as
        -: 6655:      // well.
       2*: 6656:      for (int j = i; j != *argc; j++) {
       1*: 6657:        argv[j] = argv[j + 1];
        -: 6658:      }
        -: 6659:
        -: 6660:      // Decrements the argument count.
       1*: 6661:      (*argc)--;
        -: 6662:
        -: 6663:      // We also need to decrement the iterator as we just removed
        -: 6664:      // an element.
       1*: 6665:      i--;
        -: 6666:    }
        -: 6667:  }
        -: 6668:
       1*: 6669:  if (g_help_flag) {
        -: 6670:    // We print the help here instead of in RUN_ALL_TESTS(), as the
        -: 6671:    // latter may not be called at all if the user is using Google
        -: 6672:    // Test with another testing framework.
    #####: 6673:    PrintColorEncoded(kColorEncodedHelpMessage);
        -: 6674:  }
       1*: 6675:}
------------------
_ZN7testing8internal28ParseGoogleTestFlagsOnlyImplIwEEvPiPPT_:
function _ZN7testing8internal28ParseGoogleTestFlagsOnlyImplIwEEvPiPPT_ called 0 returned 0% blocks executed 0%
    #####: 6626:void ParseGoogleTestFlagsOnlyImpl(int* argc, CharType** argv) {
    #####: 6627:  std::string flagfile_value;
    %%%%%: 6627-block  0
call    0 never executed
    %%%%%: 6627-block  1
call    1 never executed
    $$$$$: 6627-block  2
call    2 never executed
    #####: 6628:  for (int i = 1; i < *argc; i++) {
    %%%%%: 6628-block  0
branch  0 never executed
branch  1 never executed
    #####: 6629:    const std::string arg_string = StreamableToString(argv[i]);
    %%%%%: 6629-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6629-block  1
call    3 never executed
    $$$$$: 6629-block  2
call    4 never executed
    #####: 6630:    const char* const arg = arg_string.c_str();
    %%%%%: 6630-block  0
call    0 never executed
        -: 6631:
        -: 6632:    using internal::ParseFlag;
        -: 6633:
    #####: 6634:    bool remove_flag = false;
    #####: 6635:    if (ParseGoogleTestFlag(arg)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6635-block  0
branch  3 never executed
branch  4 never executed
    #####: 6636:      remove_flag = true;
    %%%%%: 6636-block  0
        -: 6637:#if GTEST_USE_OWN_FLAGFILE_FLAG_
    #####: 6638:    } else if (ParseFlag(arg, "flagfile", &flagfile_value)) {
    %%%%%: 6638-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6638-block  1
branch  3 never executed
branch  4 never executed
    #####: 6639:      GTEST_FLAG_SET(flagfile, flagfile_value);
    %%%%%: 6639-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6640:      LoadFlagsFromFile(flagfile_value);
    %%%%%: 6640-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6641:      remove_flag = true;
    %%%%%: 6641-block  0
        -: 6642:#endif  // GTEST_USE_OWN_FLAGFILE_FLAG_
    #####: 6643:    } else if (arg_string == "--help" || arg_string == "-h" ||
    %%%%%: 6643-block  0
call    0 never executed
    %%%%%: 6643-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 6644:               arg_string == "-?" || arg_string == "/?" ||
branch  0 never executed
branch  1 never executed
    %%%%%: 6644-block  0
call    2 never executed
    %%%%%: 6644-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 6644-block  2
    %%%%%: 6644-block  3
    %%%%%: 6644-block  4
branch  8 never executed
branch  9 never executed
    #####: 6645:               HasGoogleTestFlagPrefix(arg)) {
    %%%%%: 6645-block  0
call    0 never executed
        -: 6646:      // Both help flag and unrecognized Google Test flags (excluding
        -: 6647:      // internal ones) trigger help display.
    #####: 6648:      g_help_flag = true;
    %%%%%: 6648-block  0
        -: 6649:    }
        -: 6650:
    #####: 6651:    if (remove_flag) {
    %%%%%: 6651-block  0
branch  0 never executed
branch  1 never executed
        -: 6652:      // Shift the remainder of the argv list left by one.  Note
        -: 6653:      // that argv has (*argc + 1) elements, the last one always being
        -: 6654:      // NULL.  The following loop moves the trailing NULL element as
        -: 6655:      // well.
    #####: 6656:      for (int j = i; j != *argc; j++) {
    %%%%%: 6656-block  0
    %%%%%: 6656-block  1
branch  0 never executed
branch  1 never executed
    #####: 6657:        argv[j] = argv[j + 1];
    %%%%%: 6657-block  0
        -: 6658:      }
        -: 6659:
        -: 6660:      // Decrements the argument count.
    #####: 6661:      (*argc)--;
        -: 6662:
        -: 6663:      // We also need to decrement the iterator as we just removed
        -: 6664:      // an element.
    #####: 6665:      i--;
    %%%%%: 6665-block  0
        -: 6666:    }
        -: 6667:  }
        -: 6668:
    #####: 6669:  if (g_help_flag) {
    %%%%%: 6669-block  0
branch  0 never executed
branch  1 never executed
        -: 6670:    // We print the help here instead of in RUN_ALL_TESTS(), as the
        -: 6671:    // latter may not be called at all if the user is using Google
        -: 6672:    // Test with another testing framework.
    #####: 6673:    PrintColorEncoded(kColorEncodedHelpMessage);
    %%%%%: 6673-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 6674:  }
    #####: 6675:}
------------------
_ZN7testing8internal28ParseGoogleTestFlagsOnlyImplIcEEvPiPPT_:
function _ZN7testing8internal28ParseGoogleTestFlagsOnlyImplIcEEvPiPPT_ called 1 returned 100% blocks executed 42%
        1: 6626:void ParseGoogleTestFlagsOnlyImpl(int* argc, CharType** argv) {
        2: 6627:  std::string flagfile_value;
        1: 6627-block  0
call    0 returned 1
        1: 6627-block  1
call    1 returned 1
    $$$$$: 6627-block  2
call    2 never executed
        2: 6628:  for (int i = 1; i < *argc; i++) {
        2: 6628-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        2: 6629:    const std::string arg_string = StreamableToString(argv[i]);
        1: 6629-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 6629-block  1
call    3 returned 1
    $$$$$: 6629-block  2
call    4 never executed
        1: 6630:    const char* const arg = arg_string.c_str();
        1: 6630-block  0
call    0 returned 1
        -: 6631:
        -: 6632:    using internal::ParseFlag;
        -: 6633:
        1: 6634:    bool remove_flag = false;
        1: 6635:    if (ParseGoogleTestFlag(arg)) {
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 6635-block  0
branch  3 taken 1 (fallthrough)
branch  4 taken 0
        1: 6636:      remove_flag = true;
        1: 6636-block  0
        -: 6637:#if GTEST_USE_OWN_FLAGFILE_FLAG_
    #####: 6638:    } else if (ParseFlag(arg, "flagfile", &flagfile_value)) {
    %%%%%: 6638-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6638-block  1
branch  3 never executed
branch  4 never executed
    #####: 6639:      GTEST_FLAG_SET(flagfile, flagfile_value);
    %%%%%: 6639-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6640:      LoadFlagsFromFile(flagfile_value);
    %%%%%: 6640-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6641:      remove_flag = true;
    %%%%%: 6641-block  0
        -: 6642:#endif  // GTEST_USE_OWN_FLAGFILE_FLAG_
    #####: 6643:    } else if (arg_string == "--help" || arg_string == "-h" ||
    %%%%%: 6643-block  0
call    0 never executed
    %%%%%: 6643-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 6644:               arg_string == "-?" || arg_string == "/?" ||
branch  0 never executed
branch  1 never executed
    %%%%%: 6644-block  0
call    2 never executed
    %%%%%: 6644-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 6644-block  2
    %%%%%: 6644-block  3
    %%%%%: 6644-block  4
branch  8 never executed
branch  9 never executed
    #####: 6645:               HasGoogleTestFlagPrefix(arg)) {
    %%%%%: 6645-block  0
call    0 never executed
        -: 6646:      // Both help flag and unrecognized Google Test flags (excluding
        -: 6647:      // internal ones) trigger help display.
    #####: 6648:      g_help_flag = true;
    %%%%%: 6648-block  0
        -: 6649:    }
        -: 6650:
        1: 6651:    if (remove_flag) {
        1: 6651-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -: 6652:      // Shift the remainder of the argv list left by one.  Note
        -: 6653:      // that argv has (*argc + 1) elements, the last one always being
        -: 6654:      // NULL.  The following loop moves the trailing NULL element as
        -: 6655:      // well.
        2: 6656:      for (int j = i; j != *argc; j++) {
        1: 6656-block  0
        2: 6656-block  1
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1: 6657:        argv[j] = argv[j + 1];
        1: 6657-block  0
        -: 6658:      }
        -: 6659:
        -: 6660:      // Decrements the argument count.
        1: 6661:      (*argc)--;
        -: 6662:
        -: 6663:      // We also need to decrement the iterator as we just removed
        -: 6664:      // an element.
        1: 6665:      i--;
        1: 6665-block  0
        -: 6666:    }
        -: 6667:  }
        -: 6668:
        1: 6669:  if (g_help_flag) {
        1: 6669-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -: 6670:    // We print the help here instead of in RUN_ALL_TESTS(), as the
        -: 6671:    // latter may not be called at all if the user is using Google
        -: 6672:    // Test with another testing framework.
    #####: 6673:    PrintColorEncoded(kColorEncodedHelpMessage);
    %%%%%: 6673-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 6674:  }
        1: 6675:}
------------------
        -: 6676:
        -: 6677:// Parses the command line for Google Test flags, without initializing
        -: 6678:// other parts of Google Test.
function _ZN7testing8internal24ParseGoogleTestFlagsOnlyEPiPPc called 1 returned 100% blocks executed 100%
        1: 6679:void ParseGoogleTestFlagsOnly(int* argc, char** argv) {
        1: 6680:  ParseGoogleTestFlagsOnlyImpl(argc, argv);
        1: 6680-block  0
call    0 returned 1
        -: 6681:
        -: 6682:  // Fix the value of *_NSGetArgc() on macOS, but if and only if
        -: 6683:  // *_NSGetArgv() == argv
        -: 6684:  // Only applicable to char** version of argv
        -: 6685:#if GTEST_OS_MAC
        -: 6686:#ifndef GTEST_OS_IOS
        -: 6687:  if (*_NSGetArgv() == argv) {
        -: 6688:    *_NSGetArgc() = *argc;
        -: 6689:  }
        -: 6690:#endif
        -: 6691:#endif
        1: 6692:}
function _ZN7testing8internal24ParseGoogleTestFlagsOnlyEPiPPw called 0 returned 0% blocks executed 0%
    #####: 6693:void ParseGoogleTestFlagsOnly(int* argc, wchar_t** argv) {
    #####: 6694:  ParseGoogleTestFlagsOnlyImpl(argc, argv);
    %%%%%: 6694-block  0
call    0 never executed
    #####: 6695:}
        -: 6696:
        -: 6697:// The internal implementation of InitGoogleTest().
        -: 6698://
        -: 6699:// The type parameter CharType can be instantiated to either char or
        -: 6700:// wchar_t.
        -: 6701:template <typename CharType>
       1*: 6702:void InitGoogleTestImpl(int* argc, CharType** argv) {
        -: 6703:  // We don't want to run the initialization code twice.
       1*: 6704:  if (GTestIsInitialized()) return;
        -: 6705:
       1*: 6706:  if (*argc <= 0) return;
        -: 6707:
       1*: 6708:  g_argvs.clear();
       3*: 6709:  for (int i = 0; i != *argc; i++) {
       2*: 6710:    g_argvs.push_back(StreamableToString(argv[i]));
        -: 6711:  }
        -: 6712:
        -: 6713:#if GTEST_HAS_ABSL
        -: 6714:  absl::InitializeSymbolizer(g_argvs[0].c_str());
        -: 6715:#endif  // GTEST_HAS_ABSL
        -: 6716:
       1*: 6717:  ParseGoogleTestFlagsOnly(argc, argv);
       1*: 6718:  GetUnitTestImpl()->PostFlagParsingInit();
        -: 6719:}
------------------
_ZN7testing8internal18InitGoogleTestImplIwEEvPiPPT_:
function _ZN7testing8internal18InitGoogleTestImplIwEEvPiPPT_ called 0 returned 0% blocks executed 0%
    #####: 6702:void InitGoogleTestImpl(int* argc, CharType** argv) {
        -: 6703:  // We don't want to run the initialization code twice.
    #####: 6704:  if (GTestIsInitialized()) return;
    %%%%%: 6704-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6704-block  1
        -: 6705:
    #####: 6706:  if (*argc <= 0) return;
    %%%%%: 6706-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 6706-block  1
        -: 6707:
    #####: 6708:  g_argvs.clear();
    %%%%%: 6708-block  0
call    0 never executed
    #####: 6709:  for (int i = 0; i != *argc; i++) {
    %%%%%: 6709-block  0
branch  0 never executed
branch  1 never executed
    #####: 6710:    g_argvs.push_back(StreamableToString(argv[i]));
    %%%%%: 6710-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6710-block  1
call    4 never executed
    $$$$$: 6710-block  2
call    5 never executed
        -: 6711:  }
        -: 6712:
        -: 6713:#if GTEST_HAS_ABSL
        -: 6714:  absl::InitializeSymbolizer(g_argvs[0].c_str());
        -: 6715:#endif  // GTEST_HAS_ABSL
        -: 6716:
    #####: 6717:  ParseGoogleTestFlagsOnly(argc, argv);
    %%%%%: 6717-block  0
call    0 never executed
    #####: 6718:  GetUnitTestImpl()->PostFlagParsingInit();
call    0 never executed
call    1 never executed
        -: 6719:}
------------------
_ZN7testing8internal18InitGoogleTestImplIcEEvPiPPT_:
function _ZN7testing8internal18InitGoogleTestImplIcEEvPiPPT_ called 1 returned 100% blocks executed 79%
        1: 6702:void InitGoogleTestImpl(int* argc, CharType** argv) {
        -: 6703:  // We don't want to run the initialization code twice.
       1*: 6704:  if (GTestIsInitialized()) return;
        1: 6704-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%: 6704-block  1
        -: 6705:
       1*: 6706:  if (*argc <= 0) return;
        1: 6706-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 6706-block  1
        -: 6707:
        1: 6708:  g_argvs.clear();
        1: 6708-block  0
call    0 returned 1
        3: 6709:  for (int i = 0; i != *argc; i++) {
        3: 6709-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 1
        2: 6710:    g_argvs.push_back(StreamableToString(argv[i]));
        2: 6710-block  0
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0 (throw)
        2: 6710-block  1
call    4 returned 2
    $$$$$: 6710-block  2
call    5 never executed
        -: 6711:  }
        -: 6712:
        -: 6713:#if GTEST_HAS_ABSL
        -: 6714:  absl::InitializeSymbolizer(g_argvs[0].c_str());
        -: 6715:#endif  // GTEST_HAS_ABSL
        -: 6716:
        1: 6717:  ParseGoogleTestFlagsOnly(argc, argv);
        1: 6717-block  0
call    0 returned 1
        1: 6718:  GetUnitTestImpl()->PostFlagParsingInit();
call    0 returned 1
call    1 returned 1
        -: 6719:}
------------------
        -: 6720:
        -: 6721:}  // namespace internal
        -: 6722:
        -: 6723:// Initializes Google Test.  This must be called before calling
        -: 6724:// RUN_ALL_TESTS().  In particular, it parses a command line for the
        -: 6725:// flags that Google Test recognizes.  Whenever a Google Test flag is
        -: 6726:// seen, it is removed from argv, and *argc is decremented.
        -: 6727://
        -: 6728:// No value is returned.  Instead, the Google Test flag variables are
        -: 6729:// updated.
        -: 6730://
        -: 6731:// Calling the function for the second time has no user-visible effect.
function _ZN7testing14InitGoogleTestEPiPPc called 1 returned 100% blocks executed 100%
        1: 6732:void InitGoogleTest(int* argc, char** argv) {
        -: 6733:#if defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
        -: 6734:  GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_(argc, argv);
        -: 6735:#else  // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
        1: 6736:  internal::InitGoogleTestImpl(argc, argv);
        1: 6736-block  0
call    0 returned 1
        -: 6737:#endif  // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
        1: 6738:}
        -: 6739:
        -: 6740:// This overloaded version can be used in Windows programs compiled in
        -: 6741:// UNICODE mode.
function _ZN7testing14InitGoogleTestEPiPPw called 0 returned 0% blocks executed 0%
    #####: 6742:void InitGoogleTest(int* argc, wchar_t** argv) {
        -: 6743:#if defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
        -: 6744:  GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_(argc, argv);
        -: 6745:#else  // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
    #####: 6746:  internal::InitGoogleTestImpl(argc, argv);
    %%%%%: 6746-block  0
call    0 never executed
        -: 6747:#endif  // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
    #####: 6748:}
        -: 6749:
        -: 6750:// This overloaded version can be used on Arduino/embedded platforms where
        -: 6751:// there is no argc/argv.
function _ZN7testing14InitGoogleTestEv called 0 returned 0% blocks executed 0%
    #####: 6752:void InitGoogleTest() {
        -: 6753:  // Since Arduino doesn't have a command line, fake out the argc/argv arguments
    #####: 6754:  int argc = 1;
    #####: 6755:  const auto arg0 = "dummy";
    #####: 6756:  char* argv0 = const_cast<char*>(arg0);
    #####: 6757:  char** argv = &argv0;
        -: 6758:
        -: 6759:#if defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
        -: 6760:  GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_(&argc, argv);
        -: 6761:#else  // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
    #####: 6762:  internal::InitGoogleTestImpl(&argc, argv);
    %%%%%: 6762-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 6763:#endif  // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
    #####: 6764:}
    %%%%%: 6764-block  0
        -: 6765:
function _ZN7testing7TempDirB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####: 6766:std::string TempDir() {
        -: 6767:#if defined(GTEST_CUSTOM_TEMPDIR_FUNCTION_)
        -: 6768:  return GTEST_CUSTOM_TEMPDIR_FUNCTION_();
        -: 6769:#elif GTEST_OS_WINDOWS_MOBILE
        -: 6770:  return "\\temp\\";
        -: 6771:#elif GTEST_OS_WINDOWS
    #####: 6772:  const char* temp_dir = internal::posix::GetEnv("TEMP");
    %%%%%: 6772-block  0
call    0 never executed
    #####: 6773:  if (temp_dir == nullptr || temp_dir[0] == '\0') {
branch  0 never executed
branch  1 never executed
    %%%%%: 6773-block  0
branch  2 never executed
branch  3 never executed
    #####: 6774:    return "\\temp\\";
    %%%%%: 6774-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6774-block  1
call    4 never executed
    $$$$$: 6774-block  2
call    5 never executed
    $$$$$: 6774-block  3
    #####: 6775:  } else if (temp_dir[strlen(temp_dir) - 1] == '\\') {
    %%%%%: 6775-block  0
branch  0 never executed
branch  1 never executed
    #####: 6776:    return temp_dir;
    %%%%%: 6776-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6776-block  1
call    4 never executed
    $$$$$: 6776-block  2
call    5 never executed
    $$$$$: 6776-block  3
        -: 6777:  } else {
    #####: 6778:    return std::string(temp_dir) + "\\";
    %%%%%: 6778-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6778-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 6778-block  2
    %%%%%: 6778-block  3
call    7 never executed
call    8 never executed
    $$$$$: 6778-block  4
call    9 never executed
    $$$$$: 6778-block  5
    $$$$$: 6778-block  6
call   10 never executed
    $$$$$: 6778-block  7
        -: 6779:  }
        -: 6780:#elif GTEST_OS_LINUX_ANDROID
        -: 6781:  const char* temp_dir = internal::posix::GetEnv("TEST_TMPDIR");
        -: 6782:  if (temp_dir == nullptr || temp_dir[0] == '\0') {
        -: 6783:    return "/data/local/tmp/";
        -: 6784:  } else {
        -: 6785:    return temp_dir;
        -: 6786:  }
        -: 6787:#elif GTEST_OS_LINUX
        -: 6788:  const char* temp_dir = internal::posix::GetEnv("TEST_TMPDIR");
        -: 6789:  if (temp_dir == nullptr || temp_dir[0] == '\0') {
        -: 6790:    return "/tmp/";
        -: 6791:  } else {
        -: 6792:    return temp_dir;
        -: 6793:  }
        -: 6794:#else
        -: 6795:  return "/tmp/";
        -: 6796:#endif  // GTEST_OS_WINDOWS_MOBILE
        -: 6797:}
        -: 6798:
        -: 6799:// Class ScopedTrace
        -: 6800:
        -: 6801:// Pushes the given source file location and message onto a per-thread
        -: 6802:// trace stack maintained by Google Test.
function _ZN7testing11ScopedTrace9PushTraceEPKciNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 6803:void ScopedTrace::PushTrace(const char* file, int line, std::string message) {
    #####: 6804:  internal::TraceInfo trace;
    %%%%%: 6804-block  0
call    0 never executed
    %%%%%: 6804-block  1
call    1 never executed
    $$$$$: 6804-block  2
call    2 never executed
    #####: 6805:  trace.file = file;
    #####: 6806:  trace.line = line;
    #####: 6807:  trace.message.swap(message);
call    0 never executed
        -: 6808:
    #####: 6809:  UnitTest::GetInstance()->PushGTestTrace(trace);
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6809-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 6810:}
        -: 6811:
        -: 6812:// Pops the info pushed by the c'tor.
function _ZN7testing11ScopedTraceD2Ev called 0 returned 0% blocks executed 0%
    #####: 6813:ScopedTrace::~ScopedTrace()
        -: 6814:    GTEST_LOCK_EXCLUDED_(&UnitTest::mutex_) {
    #####: 6815:  UnitTest::GetInstance()->PopGTestTrace();
    %%%%%: 6815-block  0
call    0 never executed
call    1 never executed
    #####: 6816:}
        -: 6817:
        -: 6818:}  // namespace testing
